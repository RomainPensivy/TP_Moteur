
TP_Moteur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009974  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  08009b58  08009b58  00019b58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1fc  0800a1fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1fc  0800a1fc  0001a1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a204  0800a204  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a204  0800a204  0001a204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a208  0800a208  0001a208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a20c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  200001e0  0800a3ec  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  0800a3ec  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae44  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317a  00000000  00000000  0003b054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  0003e1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  0003f3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002059d  00000000  00000000  00040468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001426f  00000000  00000000  00060a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c706c  00000000  00000000  00074c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013bce0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bb8  00000000  00000000  0013bd34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009b3c 	.word	0x08009b3c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	08009b3c 	.word	0x08009b3c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <Ligne_Init>:
 */
int V=50;

#include "fonctions.h"

void Ligne_Init(UART_HandleTypeDef *huart){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t *)&LIGNE, strlen(LIGNE), 0xFFFF);
 8000ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000efc:	221c      	movs	r2, #28
 8000efe:	4904      	ldr	r1, [pc, #16]	; (8000f10 <Ligne_Init+0x20>)
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f004 fb8c 	bl	800561e <HAL_UART_Transmit>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	08009d80 	.word	0x08009d80

08000f14 <Commande_exec>:

void Commande_exec(int i){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	int commande_existe=0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
	if ((strncmp(Commande,PINOUT,i)==0) && (i==strlen(PINOUT))){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	461a      	mov	r2, r3
 8000f24:	4942      	ldr	r1, [pc, #264]	; (8001030 <Commande_exec+0x11c>)
 8000f26:	4843      	ldr	r0, [pc, #268]	; (8001034 <Commande_exec+0x120>)
 8000f28:	f006 fd02 	bl	8007930 <strncmp>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d113      	bne.n	8000f5a <Commande_exec+0x46>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b06      	cmp	r3, #6
 8000f36:	d110      	bne.n	8000f5a <Commande_exec+0x46>
		printf("\r\nLes broches connectées sont:\r\n");
 8000f38:	483f      	ldr	r0, [pc, #252]	; (8001038 <Commande_exec+0x124>)
 8000f3a:	f006 fcf1 	bl	8007920 <puts>
		printf("    - help\r\n");
 8000f3e:	483f      	ldr	r0, [pc, #252]	; (800103c <Commande_exec+0x128>)
 8000f40:	f006 fcee 	bl	8007920 <puts>
		printf("    - pinout\r\n");
 8000f44:	483e      	ldr	r0, [pc, #248]	; (8001040 <Commande_exec+0x12c>)
 8000f46:	f006 fceb 	bl	8007920 <puts>
		printf("    - start\r\n");
 8000f4a:	483e      	ldr	r0, [pc, #248]	; (8001044 <Commande_exec+0x130>)
 8000f4c:	f006 fce8 	bl	8007920 <puts>
		printf("    - stop\r\n");
 8000f50:	483d      	ldr	r0, [pc, #244]	; (8001048 <Commande_exec+0x134>)
 8000f52:	f006 fce5 	bl	8007920 <puts>
		commande_existe=1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
	}
	if (strncmp(Commande,SPEED,6)==0){
 8000f5a:	2206      	movs	r2, #6
 8000f5c:	493b      	ldr	r1, [pc, #236]	; (800104c <Commande_exec+0x138>)
 8000f5e:	4835      	ldr	r0, [pc, #212]	; (8001034 <Commande_exec+0x120>)
 8000f60:	f006 fce6 	bl	8007930 <strncmp>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d104      	bne.n	8000f74 <Commande_exec+0x60>
		Set_SPEED(i);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 f88e 	bl	800108c <Set_SPEED>
		commande_existe=1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
	}
	if ((strncmp(Commande,START,i)==0) && (i==strlen(START))){
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	461a      	mov	r2, r3
 8000f78:	4935      	ldr	r1, [pc, #212]	; (8001050 <Commande_exec+0x13c>)
 8000f7a:	482e      	ldr	r0, [pc, #184]	; (8001034 <Commande_exec+0x120>)
 8000f7c:	f006 fcd8 	bl	8007930 <strncmp>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d109      	bne.n	8000f9a <Commande_exec+0x86>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b05      	cmp	r3, #5
 8000f8a:	d106      	bne.n	8000f9a <Commande_exec+0x86>
		printf("\r\nPower ON\r\n");
 8000f8c:	4831      	ldr	r0, [pc, #196]	; (8001054 <Commande_exec+0x140>)
 8000f8e:	f006 fcc7 	bl	8007920 <puts>
		Start();
 8000f92:	f000 f905 	bl	80011a0 <Start>
		commande_existe=1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	60fb      	str	r3, [r7, #12]
	}
	if ((strncmp(Commande,STOP,i)==0) && (i==strlen(STOP))){
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	492e      	ldr	r1, [pc, #184]	; (8001058 <Commande_exec+0x144>)
 8000fa0:	4824      	ldr	r0, [pc, #144]	; (8001034 <Commande_exec+0x120>)
 8000fa2:	f006 fcc5 	bl	8007930 <strncmp>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d109      	bne.n	8000fc0 <Commande_exec+0xac>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d106      	bne.n	8000fc0 <Commande_exec+0xac>
		printf("\r\nPower OFF\r\n");
 8000fb2:	482a      	ldr	r0, [pc, #168]	; (800105c <Commande_exec+0x148>)
 8000fb4:	f006 fcb4 	bl	8007920 <puts>
		Stop();
 8000fb8:	f000 f950 	bl	800125c <Stop>
		commande_existe=1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
	}
	if ((strncmp(Commande,HELP,i)==0) && (i==strlen(HELP))){
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4926      	ldr	r1, [pc, #152]	; (8001060 <Commande_exec+0x14c>)
 8000fc6:	481b      	ldr	r0, [pc, #108]	; (8001034 <Commande_exec+0x120>)
 8000fc8:	f006 fcb2 	bl	8007930 <strncmp>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d113      	bne.n	8000ffa <Commande_exec+0xe6>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d110      	bne.n	8000ffa <Commande_exec+0xe6>
		printf("\r\nLes commandes disponibles sont:\r\n");
 8000fd8:	4822      	ldr	r0, [pc, #136]	; (8001064 <Commande_exec+0x150>)
 8000fda:	f006 fca1 	bl	8007920 <puts>
		printf("    - help\r\n");
 8000fde:	4817      	ldr	r0, [pc, #92]	; (800103c <Commande_exec+0x128>)
 8000fe0:	f006 fc9e 	bl	8007920 <puts>
		printf("    - pinout\r\n");
 8000fe4:	4816      	ldr	r0, [pc, #88]	; (8001040 <Commande_exec+0x12c>)
 8000fe6:	f006 fc9b 	bl	8007920 <puts>
		printf("    - start\r\n");
 8000fea:	4816      	ldr	r0, [pc, #88]	; (8001044 <Commande_exec+0x130>)
 8000fec:	f006 fc98 	bl	8007920 <puts>
		printf("    - stop\r\n");
 8000ff0:	4815      	ldr	r0, [pc, #84]	; (8001048 <Commande_exec+0x134>)
 8000ff2:	f006 fc95 	bl	8007920 <puts>
		commande_existe=1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
	}
	if ((strncmp(Commande,GET_SPEED,i)==0) && (i==strlen(GET_SPEED))){
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	491a      	ldr	r1, [pc, #104]	; (8001068 <Commande_exec+0x154>)
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <Commande_exec+0x120>)
 8001002:	f006 fc95 	bl	8007930 <strncmp>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d106      	bne.n	800101a <Commande_exec+0x106>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b09      	cmp	r3, #9
 8001010:	d103      	bne.n	800101a <Commande_exec+0x106>
		Get_Speed();
 8001012:	f000 f82d 	bl	8001070 <Get_Speed>
		commande_existe=1;
 8001016:	2301      	movs	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
	}
	if(commande_existe==0){
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <Commande_exec+0x112>
		printf("\r\nCette commande n'existe pas\r\n");
 8001020:	4812      	ldr	r0, [pc, #72]	; (800106c <Commande_exec+0x158>)
 8001022:	f006 fc7d 	bl	8007920 <puts>
	}
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	08009db8 	.word	0x08009db8
 8001034:	20000220 	.word	0x20000220
 8001038:	08009b58 	.word	0x08009b58
 800103c:	08009b7c 	.word	0x08009b7c
 8001040:	08009b88 	.word	0x08009b88
 8001044:	08009b98 	.word	0x08009b98
 8001048:	08009ba8 	.word	0x08009ba8
 800104c:	08009da8 	.word	0x08009da8
 8001050:	08009da0 	.word	0x08009da0
 8001054:	08009bb4 	.word	0x08009bb4
 8001058:	08009dc0 	.word	0x08009dc0
 800105c:	08009bc0 	.word	0x08009bc0
 8001060:	08009db0 	.word	0x08009db0
 8001064:	08009bd0 	.word	0x08009bd0
 8001068:	08009dc8 	.word	0x08009dc8
 800106c:	08009bf4 	.word	0x08009bf4

08001070 <Get_Speed>:

void Get_Speed(){
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	printf("\r\nLa vitesse est %d pulse/sec\r\n", vitesse);
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <Get_Speed+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	4803      	ldr	r0, [pc, #12]	; (8001088 <Get_Speed+0x18>)
 800107c:	f006 fbca 	bl	8007814 <iprintf>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000284 	.word	0x20000284
 8001088:	08009c14 	.word	0x08009c14

0800108c <Set_SPEED>:

void Set_SPEED(int i){
 800108c:	b5b0      	push	{r4, r5, r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	466b      	mov	r3, sp
 8001096:	461d      	mov	r5, r3
	int length = i - strlen(SPEED);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b06      	subs	r3, #6
 800109c:	61bb      	str	r3, [r7, #24]
	printf("\r\ni=%d\r\n", length);
 800109e:	69b9      	ldr	r1, [r7, #24]
 80010a0:	4837      	ldr	r0, [pc, #220]	; (8001180 <Set_SPEED+0xf4>)
 80010a2:	f006 fbb7 	bl	8007814 <iprintf>
	char valeur[length];
 80010a6:	69bc      	ldr	r4, [r7, #24]
 80010a8:	1e63      	subs	r3, r4, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	4623      	mov	r3, r4
 80010ae:	4618      	mov	r0, r3
 80010b0:	f04f 0100 	mov.w	r1, #0
 80010b4:	f04f 0200 	mov.w	r2, #0
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	00cb      	lsls	r3, r1, #3
 80010be:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010c2:	00c2      	lsls	r2, r0, #3
 80010c4:	4623      	mov	r3, r4
 80010c6:	4618      	mov	r0, r3
 80010c8:	f04f 0100 	mov.w	r1, #0
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	00cb      	lsls	r3, r1, #3
 80010d6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010da:	00c2      	lsls	r2, r0, #3
 80010dc:	4623      	mov	r3, r4
 80010de:	3307      	adds	r3, #7
 80010e0:	08db      	lsrs	r3, r3, #3
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	ebad 0d03 	sub.w	sp, sp, r3
 80010e8:	466b      	mov	r3, sp
 80010ea:	3300      	adds	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
	for (int j=0; j<length; j++){
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	e00b      	b.n	800110c <Set_SPEED+0x80>
		valeur[j]=Commande[6+j];
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	3306      	adds	r3, #6
 80010f8:	4a22      	ldr	r2, [pc, #136]	; (8001184 <Set_SPEED+0xf8>)
 80010fa:	5cd1      	ldrb	r1, [r2, r3]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	4413      	add	r3, r2
 8001102:	460a      	mov	r2, r1
 8001104:	701a      	strb	r2, [r3, #0]
	for (int j=0; j<length; j++){
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3301      	adds	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	429a      	cmp	r2, r3
 8001112:	dbef      	blt.n	80010f4 <Set_SPEED+0x68>
	}
	printf("chaîne=%s\r\n", valeur);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4619      	mov	r1, r3
 8001118:	481b      	ldr	r0, [pc, #108]	; (8001188 <Set_SPEED+0xfc>)
 800111a:	f006 fb7b 	bl	8007814 <iprintf>
	int a = atoi(valeur);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4618      	mov	r0, r3
 8001122:	f005 fed7 	bl	8006ed4 <atoi>
 8001126:	60f8      	str	r0, [r7, #12]
	printf("chaîne=%d\r\n", a);
 8001128:	68f9      	ldr	r1, [r7, #12]
 800112a:	4818      	ldr	r0, [pc, #96]	; (800118c <Set_SPEED+0x100>)
 800112c:	f006 fb72 	bl	8007814 <iprintf>
	if(a>0 || a<100){
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	dc02      	bgt.n	800113c <Set_SPEED+0xb0>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b63      	cmp	r3, #99	; 0x63
 800113a:	dc17      	bgt.n	800116c <Set_SPEED+0xe0>
		V=a;
 800113c:	4a14      	ldr	r2, [pc, #80]	; (8001190 <Set_SPEED+0x104>)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6013      	str	r3, [r2, #0]
		TIM1->CCR1 = (int) ((TIM1->ARR)*a)/100;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <Set_SPEED+0x108>)
 8001144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	fb02 f303 	mul.w	r3, r2, r3
 800114c:	4a12      	ldr	r2, [pc, #72]	; (8001198 <Set_SPEED+0x10c>)
 800114e:	fb82 1203 	smull	r1, r2, r2, r3
 8001152:	1152      	asrs	r2, r2, #5
 8001154:	17db      	asrs	r3, r3, #31
 8001156:	1ad2      	subs	r2, r2, r3
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <Set_SPEED+0x108>)
 800115a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = (TIM1->ARR) - TIM1->CCR1;
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <Set_SPEED+0x108>)
 800115e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <Set_SPEED+0x108>)
 8001162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001164:	490b      	ldr	r1, [pc, #44]	; (8001194 <Set_SPEED+0x108>)
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	638b      	str	r3, [r1, #56]	; 0x38
 800116a:	e003      	b.n	8001174 <Set_SPEED+0xe8>
	}else{
		printf("La valeur de vitesse n'est pas valable. Elle doit être comprise entre 1 et 99.=%d\r\n", a);
 800116c:	68f9      	ldr	r1, [r7, #12]
 800116e:	480b      	ldr	r0, [pc, #44]	; (800119c <Set_SPEED+0x110>)
 8001170:	f006 fb50 	bl	8007814 <iprintf>
 8001174:	46ad      	mov	sp, r5
	}
}
 8001176:	bf00      	nop
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bdb0      	pop	{r4, r5, r7, pc}
 800117e:	bf00      	nop
 8001180:	08009c34 	.word	0x08009c34
 8001184:	20000220 	.word	0x20000220
 8001188:	08009c40 	.word	0x08009c40
 800118c:	08009c50 	.word	0x08009c50
 8001190:	20000000 	.word	0x20000000
 8001194:	40012c00 	.word	0x40012c00
 8001198:	51eb851f 	.word	0x51eb851f
 800119c:	08009c60 	.word	0x08009c60

080011a0 <Start>:

void Start(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	TIM1->CCR1 = (int) ((TIM1->ARR)*V)/100;
 80011a4:	4b25      	ldr	r3, [pc, #148]	; (800123c <Start+0x9c>)
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	4a25      	ldr	r2, [pc, #148]	; (8001240 <Start+0xa0>)
 80011aa:	6812      	ldr	r2, [r2, #0]
 80011ac:	fb02 f303 	mul.w	r3, r2, r3
 80011b0:	4a24      	ldr	r2, [pc, #144]	; (8001244 <Start+0xa4>)
 80011b2:	fb82 1203 	smull	r1, r2, r2, r3
 80011b6:	1152      	asrs	r2, r2, #5
 80011b8:	17db      	asrs	r3, r3, #31
 80011ba:	1ad2      	subs	r2, r2, r3
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <Start+0x9c>)
 80011be:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (TIM1->ARR) - TIM1->CCR1;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <Start+0x9c>)
 80011c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <Start+0x9c>)
 80011c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c8:	491c      	ldr	r1, [pc, #112]	; (800123c <Start+0x9c>)
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	638b      	str	r3, [r1, #56]	; 0x38
	printf("\r\nARR=%d\r\n",(int)TIM1->ARR);
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <Start+0x9c>)
 80011d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d2:	4619      	mov	r1, r3
 80011d4:	481c      	ldr	r0, [pc, #112]	; (8001248 <Start+0xa8>)
 80011d6:	f006 fb1d 	bl	8007814 <iprintf>
	printf("\r\nCCR1=%d\r\n",(int)TIM1->CCR1);
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <Start+0x9c>)
 80011dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011de:	4619      	mov	r1, r3
 80011e0:	481a      	ldr	r0, [pc, #104]	; (800124c <Start+0xac>)
 80011e2:	f006 fb17 	bl	8007814 <iprintf>
	printf("\r\nCCR2=%d\r\n",(int)TIM1->CCR2);
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <Start+0x9c>)
 80011e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ea:	4619      	mov	r1, r3
 80011ec:	4818      	ldr	r0, [pc, #96]	; (8001250 <Start+0xb0>)
 80011ee:	f006 fb11 	bl	8007814 <iprintf>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011f2:	2100      	movs	r1, #0
 80011f4:	4817      	ldr	r0, [pc, #92]	; (8001254 <Start+0xb4>)
 80011f6:	f002 fc59 	bl	8003aac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011fa:	2104      	movs	r1, #4
 80011fc:	4815      	ldr	r0, [pc, #84]	; (8001254 <Start+0xb4>)
 80011fe:	f002 fc55 	bl	8003aac <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001202:	2100      	movs	r1, #0
 8001204:	4813      	ldr	r0, [pc, #76]	; (8001254 <Start+0xb4>)
 8001206:	f003 ff1b 	bl	8005040 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800120a:	2104      	movs	r1, #4
 800120c:	4811      	ldr	r0, [pc, #68]	; (8001254 <Start+0xb4>)
 800120e:	f003 ff17 	bl	8005040 <HAL_TIMEx_PWMN_Start>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	2110      	movs	r1, #16
 8001216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121a:	f001 fb19 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800121e:	2001      	movs	r0, #1
 8001220:	f000 ffa2 	bl	8002168 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	2110      	movs	r1, #16
 8001228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122c:	f001 fb10 	bl	8002850 <HAL_GPIO_WritePin>
	ON=1;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <Start+0xb8>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40012c00 	.word	0x40012c00
 8001240:	20000000 	.word	0x20000000
 8001244:	51eb851f 	.word	0x51eb851f
 8001248:	08009cb8 	.word	0x08009cb8
 800124c:	08009cc4 	.word	0x08009cc4
 8001250:	08009cd0 	.word	0x08009cd0
 8001254:	20000320 	.word	0x20000320
 8001258:	2000020c 	.word	0x2000020c

0800125c <Stop>:

void Stop(){
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001260:	2100      	movs	r1, #0
 8001262:	480a      	ldr	r0, [pc, #40]	; (800128c <Stop+0x30>)
 8001264:	f002 fd22 	bl	8003cac <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001268:	2104      	movs	r1, #4
 800126a:	4808      	ldr	r0, [pc, #32]	; (800128c <Stop+0x30>)
 800126c:	f002 fd1e 	bl	8003cac <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001270:	2100      	movs	r1, #0
 8001272:	4806      	ldr	r0, [pc, #24]	; (800128c <Stop+0x30>)
 8001274:	f003 ff98 	bl	80051a8 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001278:	2104      	movs	r1, #4
 800127a:	4804      	ldr	r0, [pc, #16]	; (800128c <Stop+0x30>)
 800127c:	f003 ff94 	bl	80051a8 <HAL_TIMEx_PWMN_Stop>
	ON=0;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <Stop+0x34>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000320 	.word	0x20000320
 8001290:	2000020c 	.word	0x2000020c

08001294 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	4b39      	ldr	r3, [pc, #228]	; (8001390 <MX_GPIO_Init+0xfc>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a38      	ldr	r2, [pc, #224]	; (8001390 <MX_GPIO_Init+0xfc>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b36      	ldr	r3, [pc, #216]	; (8001390 <MX_GPIO_Init+0xfc>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012c2:	4b33      	ldr	r3, [pc, #204]	; (8001390 <MX_GPIO_Init+0xfc>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a32      	ldr	r2, [pc, #200]	; (8001390 <MX_GPIO_Init+0xfc>)
 80012c8:	f043 0320 	orr.w	r3, r3, #32
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <MX_GPIO_Init+0xfc>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0320 	and.w	r3, r3, #32
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <MX_GPIO_Init+0xfc>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	4a2c      	ldr	r2, [pc, #176]	; (8001390 <MX_GPIO_Init+0xfc>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <MX_GPIO_Init+0xfc>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	4b27      	ldr	r3, [pc, #156]	; (8001390 <MX_GPIO_Init+0xfc>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	4a26      	ldr	r2, [pc, #152]	; (8001390 <MX_GPIO_Init+0xfc>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fe:	4b24      	ldr	r3, [pc, #144]	; (8001390 <MX_GPIO_Init+0xfc>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2110      	movs	r1, #16
 800130e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001312:	f001 fa9d 	bl	8002850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8001316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <MX_GPIO_Init+0x100>)
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	481b      	ldr	r0, [pc, #108]	; (8001398 <MX_GPIO_Init+0x104>)
 800132c:	f001 f90e 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001330:	2310      	movs	r3, #16
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f001 f8ff 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800134e:	2340      	movs	r3, #64	; 0x40
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_GPIO_Init+0x108>)
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001364:	f001 f8f2 	bl	800254c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	2017      	movs	r0, #23
 800136e:	f000 fff8 	bl	8002362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001372:	2017      	movs	r0, #23
 8001374:	f001 f80f 	bl	8002396 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	2028      	movs	r0, #40	; 0x28
 800137e:	f000 fff0 	bl	8002362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001382:	2028      	movs	r0, #40	; 0x28
 8001384:	f001 f807 	bl	8002396 <HAL_NVIC_EnableIRQ>

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021000 	.word	0x40021000
 8001394:	10210000 	.word	0x10210000
 8001398:	48000800 	.word	0x48000800
 800139c:	10110000 	.word	0x10110000

080013a0 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80013a8:	1d39      	adds	r1, r7, #4
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	2201      	movs	r2, #1
 80013b0:	4803      	ldr	r0, [pc, #12]	; (80013c0 <__io_putchar+0x20>)
 80013b2:	f004 f934 	bl	800561e <HAL_UART_Transmit>
	return ch;
 80013b6:	687b      	ldr	r3, [r7, #4]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000404 	.word	0x20000404

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c8:	f000 fe5d 	bl	8002086 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013cc:	f000 f8c0 	bl	8001550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d0:	f7ff ff60 	bl	8001294 <MX_GPIO_Init>
  MX_TIM6_Init();
 80013d4:	f000 fbf4 	bl	8001bc0 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80013d8:	f000 fd96 	bl	8001f08 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80013dc:	f000 fc28 	bl	8001c30 <MX_TIM7_Init>
  MX_TIM1_Init();
 80013e0:	f000 faa8 	bl	8001934 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013e4:	f000 fb48 	bl	8001a78 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013e8:	f000 fb9a 	bl	8001b20 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n========== TP1 : Actionneurs ==========\r\n");
 80013ec:	4848      	ldr	r0, [pc, #288]	; (8001510 <main+0x14c>)
 80013ee:	f006 fa97 	bl	8007920 <puts>
	printf("Entrer help pour afficher toutes les commandes disponibles\r\n");
 80013f2:	4848      	ldr	r0, [pc, #288]	; (8001514 <main+0x150>)
 80013f4:	f006 fa94 	bl	8007920 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_TIM_Base_Start_IT(&htim3);
 80013f8:	4847      	ldr	r0, [pc, #284]	; (8001518 <main+0x154>)
 80013fa:	f002 fa95 	bl	8003928 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80013fe:	213c      	movs	r1, #60	; 0x3c
 8001400:	4846      	ldr	r0, [pc, #280]	; (800151c <main+0x158>)
 8001402:	f002 fd8f 	bl	8003f24 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2110      	movs	r1, #16
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f001 fa1f 	bl	8002850 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) echo, 1);
 8001412:	2201      	movs	r2, #1
 8001414:	4942      	ldr	r1, [pc, #264]	; (8001520 <main+0x15c>)
 8001416:	4843      	ldr	r0, [pc, #268]	; (8001524 <main+0x160>)
 8001418:	f004 f998 	bl	800574c <HAL_UART_Receive_IT>
	Ligne_Init(&huart2);
 800141c:	4841      	ldr	r0, [pc, #260]	; (8001524 <main+0x160>)
 800141e:	f7ff fd67 	bl	8000ef0 <Ligne_Init>
	//Ligne_Init(&huart6);
	while (1)
	{
		if (sec_it==1){
 8001422:	4b41      	ldr	r3, [pc, #260]	; (8001528 <main+0x164>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d115      	bne.n	8001456 <main+0x92>
			vitesse=TIM2->CNT;
 800142a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	461a      	mov	r2, r3
 8001432:	4b3e      	ldr	r3, [pc, #248]	; (800152c <main+0x168>)
 8001434:	601a      	str	r2, [r3, #0]
			printf("La vitesse est %d pulse/sec\r\n", vitesse);
 8001436:	4b3d      	ldr	r3, [pc, #244]	; (800152c <main+0x168>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	483c      	ldr	r0, [pc, #240]	; (8001530 <main+0x16c>)
 800143e:	f006 f9e9 	bl	8007814 <iprintf>
			TIM2->CNT=0;
 8001442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	; 0x24
			Ligne_Init(&huart2);
 800144a:	4836      	ldr	r0, [pc, #216]	; (8001524 <main+0x160>)
 800144c:	f7ff fd50 	bl	8000ef0 <Ligne_Init>
			sec_it=0;
 8001450:	4b35      	ldr	r3, [pc, #212]	; (8001528 <main+0x164>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
		}
		if (exti_it==1){
 8001456:	4b37      	ldr	r3, [pc, #220]	; (8001534 <main+0x170>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d117      	bne.n	800148e <main+0xca>
			if(ON==0){
 800145e:	4b36      	ldr	r3, [pc, #216]	; (8001538 <main+0x174>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d105      	bne.n	8001472 <main+0xae>
				printf("\r\nPower ON\r\n");
 8001466:	4835      	ldr	r0, [pc, #212]	; (800153c <main+0x178>)
 8001468:	f006 fa5a 	bl	8007920 <puts>
				Start();
 800146c:	f7ff fe98 	bl	80011a0 <Start>
 8001470:	e004      	b.n	800147c <main+0xb8>
			}else{
				printf("\r\nPower OFF\r\n");
 8001472:	4833      	ldr	r0, [pc, #204]	; (8001540 <main+0x17c>)
 8001474:	f006 fa54 	bl	8007920 <puts>
				Stop();
 8001478:	f7ff fef0 	bl	800125c <Stop>
			}
			i=0;
 800147c:	4b31      	ldr	r3, [pc, #196]	; (8001544 <main+0x180>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
			Ligne_Init(&huart2);
 8001482:	4828      	ldr	r0, [pc, #160]	; (8001524 <main+0x160>)
 8001484:	f7ff fd34 	bl	8000ef0 <Ligne_Init>
			exti_it=0;
 8001488:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <main+0x170>)
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
		}
		if (uart_it==1)
 800148e:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <main+0x184>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d1c5      	bne.n	8001422 <main+0x5e>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *) echo, 1, 0xFFFF);
 8001496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800149a:	2201      	movs	r2, #1
 800149c:	4920      	ldr	r1, [pc, #128]	; (8001520 <main+0x15c>)
 800149e:	4821      	ldr	r0, [pc, #132]	; (8001524 <main+0x160>)
 80014a0:	f004 f8bd 	bl	800561e <HAL_UART_Transmit>
			//HAL_UART_Transmit(&huart6, (uint8_t *) echo, 1, 0xFFFF);
			//Exécution de la commande après appui sur la touche entrer
			if (echo[0]==ENTER){
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <main+0x15c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	220d      	movs	r2, #13
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d10b      	bne.n	80014c6 <main+0x102>
				Commande_exec(i);
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <main+0x180>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fd2e 	bl	8000f14 <Commande_exec>
				i=0;
 80014b8:	4b22      	ldr	r3, [pc, #136]	; (8001544 <main+0x180>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
				Ligne_Init(&huart2);
 80014be:	4819      	ldr	r0, [pc, #100]	; (8001524 <main+0x160>)
 80014c0:	f7ff fd16 	bl	8000ef0 <Ligne_Init>
 80014c4:	e01f      	b.n	8001506 <main+0x142>
				//Ligne_Init(&huart6);
			}else{
				//Suppression d'un caractère après appui sur la touche delete
				if((echo[0]==DEL)&&(i>0)){
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <main+0x15c>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	227f      	movs	r2, #127	; 0x7f
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d10f      	bne.n	80014f0 <main+0x12c>
 80014d0:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <main+0x180>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	dd0b      	ble.n	80014f0 <main+0x12c>
					Commande[i-1]=0;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <main+0x180>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3b01      	subs	r3, #1
 80014de:	4a1b      	ldr	r2, [pc, #108]	; (800154c <main+0x188>)
 80014e0:	2100      	movs	r1, #0
 80014e2:	54d1      	strb	r1, [r2, r3]
					i=i-1;
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <main+0x180>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <main+0x180>)
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e00a      	b.n	8001506 <main+0x142>
				}else{
					//Ecriture de la commande dans un buffer
					Commande[i]= echo[0];
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <main+0x180>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <main+0x15c>)
 80014f6:	7811      	ldrb	r1, [r2, #0]
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <main+0x188>)
 80014fa:	54d1      	strb	r1, [r2, r3]
					i=i+1;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <main+0x180>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <main+0x180>)
 8001504:	6013      	str	r3, [r2, #0]
				}
			}
			uart_it=0;
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <main+0x184>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
		if (sec_it==1){
 800150c:	e789      	b.n	8001422 <main+0x5e>
 800150e:	bf00      	nop
 8001510:	08009cdc 	.word	0x08009cdc
 8001514:	08009d08 	.word	0x08009d08
 8001518:	20000288 	.word	0x20000288
 800151c:	2000036c 	.word	0x2000036c
 8001520:	2000021c 	.word	0x2000021c
 8001524:	20000404 	.word	0x20000404
 8001528:	20000204 	.word	0x20000204
 800152c:	20000284 	.word	0x20000284
 8001530:	08009d44 	.word	0x08009d44
 8001534:	20000200 	.word	0x20000200
 8001538:	2000020c 	.word	0x2000020c
 800153c:	08009d64 	.word	0x08009d64
 8001540:	08009d70 	.word	0x08009d70
 8001544:	20000208 	.word	0x20000208
 8001548:	200001fc 	.word	0x200001fc
 800154c:	20000220 	.word	0x20000220

08001550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b0a4      	sub	sp, #144	; 0x90
 8001554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800155a:	2238      	movs	r2, #56	; 0x38
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f005 fce6 	bl	8006f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001574:	463b      	mov	r3, r7
 8001576:	2244      	movs	r2, #68	; 0x44
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f005 fcd8 	bl	8006f30 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001580:	2000      	movs	r0, #0
 8001582:	f001 f9a1 	bl	80028c8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001586:	2302      	movs	r3, #2
 8001588:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800158e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001590:	2340      	movs	r3, #64	; 0x40
 8001592:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001594:	2302      	movs	r3, #2
 8001596:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001598:	2302      	movs	r3, #2
 800159a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800159c:	2304      	movs	r3, #4
 800159e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80015a0:	2355      	movs	r3, #85	; 0x55
 80015a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015a6:	2302      	movs	r3, #2
 80015a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015ac:	2302      	movs	r3, #2
 80015ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015bc:	4618      	mov	r0, r3
 80015be:	f001 fa37 	bl	8002a30 <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80015c8:	f000 f83c 	bl	8001644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015cc:	230f      	movs	r3, #15
 80015ce:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d0:	2303      	movs	r3, #3
 80015d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015e4:	2104      	movs	r1, #4
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 fd3a 	bl	8003060 <HAL_RCC_ClockConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80015f2:	f000 f827 	bl	8001644 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015f6:	2302      	movs	r3, #2
 80015f8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fe:	463b      	mov	r3, r7
 8001600:	4618      	mov	r0, r3
 8001602:	f001 ff49 	bl	8003498 <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800160c:	f000 f81a 	bl	8001644 <Error_Handler>
  }
}
 8001610:	bf00      	nop
 8001612:	3790      	adds	r7, #144	; 0x90
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	uart_it=1;
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_UART_RxCpltCallback+0x20>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, (uint8_t *) echo, 1);
 8001626:	2201      	movs	r2, #1
 8001628:	4904      	ldr	r1, [pc, #16]	; (800163c <HAL_UART_RxCpltCallback+0x24>)
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <HAL_UART_RxCpltCallback+0x28>)
 800162c:	f004 f88e 	bl	800574c <HAL_UART_Receive_IT>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200001fc 	.word	0x200001fc
 800163c:	2000021c 	.word	0x2000021c
 8001640:	20000404 	.word	0x20000404

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800164c:	e7fe      	b.n	800164c <Error_Handler+0x8>
	...

08001650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <HAL_MspInit+0x44>)
 8001658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165a:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <HAL_MspInit+0x44>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6613      	str	r3, [r2, #96]	; 0x60
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_MspInit+0x44>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_MspInit+0x44>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <HAL_MspInit+0x44>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	6593      	str	r3, [r2, #88]	; 0x58
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_MspInit+0x44>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001686:	f001 f9c3 	bl	8002a10 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000

08001698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800169c:	e7fe      	b.n	800169c <NMI_Handler+0x4>

0800169e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <HardFault_Handler+0x4>

080016a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <MemManage_Handler+0x4>

080016aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <BusFault_Handler+0x4>

080016b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <UsageFault_Handler+0x4>

080016b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e4:	f000 fd22 	bl	800212c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}

080016ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80016f0:	2040      	movs	r0, #64	; 0x40
 80016f2:	f001 f8c5 	bl	8002880 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001702:	f002 fc9d 	bl	8004040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000320 	.word	0x20000320

08001710 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	sec_it=1;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <TIM3_IRQHandler+0x14>)
 8001716:	2201      	movs	r2, #1
 8001718:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800171a:	4803      	ldr	r0, [pc, #12]	; (8001728 <TIM3_IRQHandler+0x18>)
 800171c:	f002 fc90 	bl	8004040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000204 	.word	0x20000204
 8001728:	20000288 	.word	0x20000288

0800172c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <USART2_IRQHandler+0x10>)
 8001732:	f004 f851 	bl	80057d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000404 	.word	0x20000404

08001740 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	exti_it=1;
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <EXTI15_10_IRQHandler+0x18>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800174a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800174e:	f001 f897 	bl	8002880 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000200 	.word	0x20000200

0800175c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <TIM6_DAC_IRQHandler+0x10>)
 8001762:	f002 fc6d 	bl	8004040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200002d4 	.word	0x200002d4

08001770 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <TIM7_IRQHandler+0x10>)
 8001776:	f002 fc63 	bl	8004040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200003b8 	.word	0x200003b8

08001784 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
	return 1;
 8001788:	2301      	movs	r3, #1
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_kill>:

int _kill(int pid, int sig)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800179e:	f005 fb9d 	bl	8006edc <__errno>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2216      	movs	r2, #22
 80017a6:	601a      	str	r2, [r3, #0]
	return -1;
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_exit>:

void _exit (int status)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ffe7 	bl	8001794 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017c6:	e7fe      	b.n	80017c6 <_exit+0x12>

080017c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	e00a      	b.n	80017f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017da:	f3af 8000 	nop.w
 80017de:	4601      	mov	r1, r0
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	60ba      	str	r2, [r7, #8]
 80017e6:	b2ca      	uxtb	r2, r1
 80017e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3301      	adds	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbf0      	blt.n	80017da <_read+0x12>
	}

return len;
 80017f8:	687b      	ldr	r3, [r7, #4]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	e009      	b.n	8001828 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	60ba      	str	r2, [r7, #8]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fdbf 	bl	80013a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3301      	adds	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	429a      	cmp	r2, r3
 800182e:	dbf1      	blt.n	8001814 <_write+0x12>
	}
	return len;
 8001830:	687b      	ldr	r3, [r7, #4]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_close>:

int _close(int file)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
	return -1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001862:	605a      	str	r2, [r3, #4]
	return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <_isatty>:

int _isatty(int file)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
	return 1;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
	return 0;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ac:	4a14      	ldr	r2, [pc, #80]	; (8001900 <_sbrk+0x5c>)
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <_sbrk+0x60>)
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d102      	bne.n	80018c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <_sbrk+0x64>)
 80018c2:	4a12      	ldr	r2, [pc, #72]	; (800190c <_sbrk+0x68>)
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <_sbrk+0x64>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d207      	bcs.n	80018e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d4:	f005 fb02 	bl	8006edc <__errno>
 80018d8:	4603      	mov	r3, r0
 80018da:	220c      	movs	r2, #12
 80018dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	e009      	b.n	80018f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a05      	ldr	r2, [pc, #20]	; (8001908 <_sbrk+0x64>)
 80018f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f6:	68fb      	ldr	r3, [r7, #12]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20008000 	.word	0x20008000
 8001904:	00000400 	.word	0x00000400
 8001908:	20000210 	.word	0x20000210
 800190c:	200004a8 	.word	0x200004a8

08001910 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <SystemInit+0x20>)
 8001916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <SystemInit+0x20>)
 800191c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b098      	sub	sp, #96	; 0x60
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001946:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	615a      	str	r2, [r3, #20]
 8001958:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2234      	movs	r2, #52	; 0x34
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f005 fae5 	bl	8006f30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001966:	4b42      	ldr	r3, [pc, #264]	; (8001a70 <MX_TIM1_Init+0x13c>)
 8001968:	4a42      	ldr	r2, [pc, #264]	; (8001a74 <MX_TIM1_Init+0x140>)
 800196a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 800196c:	4b40      	ldr	r3, [pc, #256]	; (8001a70 <MX_TIM1_Init+0x13c>)
 800196e:	2204      	movs	r2, #4
 8001970:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001972:	4b3f      	ldr	r3, [pc, #252]	; (8001a70 <MX_TIM1_Init+0x13c>)
 8001974:	2220      	movs	r2, #32
 8001976:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001978:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <MX_TIM1_Init+0x13c>)
 800197a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800197e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001980:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <MX_TIM1_Init+0x13c>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001986:	4b3a      	ldr	r3, [pc, #232]	; (8001a70 <MX_TIM1_Init+0x13c>)
 8001988:	2200      	movs	r2, #0
 800198a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198c:	4b38      	ldr	r3, [pc, #224]	; (8001a70 <MX_TIM1_Init+0x13c>)
 800198e:	2200      	movs	r2, #0
 8001990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001992:	4837      	ldr	r0, [pc, #220]	; (8001a70 <MX_TIM1_Init+0x13c>)
 8001994:	f002 f832 	bl	80039fc <HAL_TIM_PWM_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800199e:	f7ff fe51 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019b2:	4619      	mov	r1, r3
 80019b4:	482e      	ldr	r0, [pc, #184]	; (8001a70 <MX_TIM1_Init+0x13c>)
 80019b6:	f003 fc55 	bl	8005264 <HAL_TIMEx_MasterConfigSynchronization>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019c0:	f7ff fe40 	bl	8001644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c4:	2360      	movs	r3, #96	; 0x60
 80019c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019cc:	2300      	movs	r3, #0
 80019ce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019d0:	2300      	movs	r3, #0
 80019d2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019e4:	2200      	movs	r2, #0
 80019e6:	4619      	mov	r1, r3
 80019e8:	4821      	ldr	r0, [pc, #132]	; (8001a70 <MX_TIM1_Init+0x13c>)
 80019ea:	f002 fca9 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019f4:	f7ff fe26 	bl	8001644 <Error_Handler>
  }
  sConfigOC.Pulse = 2656;
 80019f8:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 80019fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a02:	2204      	movs	r2, #4
 8001a04:	4619      	mov	r1, r3
 8001a06:	481a      	ldr	r0, [pc, #104]	; (8001a70 <MX_TIM1_Init+0x13c>)
 8001a08:	f002 fc9a 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8001a12:	f7ff fe17 	bl	8001644 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 203;
 8001a22:	23cb      	movs	r3, #203	; 0xcb
 8001a24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a46:	2300      	movs	r3, #0
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	4619      	mov	r1, r3
 8001a52:	4807      	ldr	r0, [pc, #28]	; (8001a70 <MX_TIM1_Init+0x13c>)
 8001a54:	f003 fc88 	bl	8005368 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001a5e:	f7ff fdf1 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a62:	4803      	ldr	r0, [pc, #12]	; (8001a70 <MX_TIM1_Init+0x13c>)
 8001a64:	f000 f9de 	bl	8001e24 <HAL_TIM_MspPostInit>

}
 8001a68:	bf00      	nop
 8001a6a:	3760      	adds	r7, #96	; 0x60
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000320 	.word	0x20000320
 8001a74:	40012c00 	.word	0x40012c00

08001a78 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08c      	sub	sp, #48	; 0x30
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	2224      	movs	r2, #36	; 0x24
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f005 fa52 	bl	8006f30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	463b      	mov	r3, r7
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a96:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <MX_TIM2_Init+0xa4>)
 8001a98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <MX_TIM2_Init+0xa4>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <MX_TIM2_Init+0xa4>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <MX_TIM2_Init+0xa4>)
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_TIM2_Init+0xa4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <MX_TIM2_Init+0xa4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <MX_TIM2_Init+0xa4>)
 8001aea:	f002 f975 	bl	8003dd8 <HAL_TIM_Encoder_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001af4:	f7ff fda6 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b00:	463b      	mov	r3, r7
 8001b02:	4619      	mov	r1, r3
 8001b04:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_TIM2_Init+0xa4>)
 8001b06:	f003 fbad 	bl	8005264 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001b10:	f7ff fd98 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	3730      	adds	r7, #48	; 0x30
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	2000036c 	.word	0x2000036c

08001b20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b26:	f107 0310 	add.w	r3, r7, #16
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b40:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <MX_TIM3_Init+0x9c>)
 8001b42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 8001b44:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b46:	f244 2267 	movw	r2, #16999	; 0x4267
 8001b4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b54:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b66:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b68:	f001 fe86 	bl	8003878 <HAL_TIM_Base_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001b72:	f7ff fd67 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	4619      	mov	r1, r3
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b84:	f002 fcec 	bl	8004560 <HAL_TIM_ConfigClockSource>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001b8e:	f7ff fd59 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001ba0:	f003 fb60 	bl	8005264 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001baa:	f7ff fd4b 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	3720      	adds	r7, #32
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000288 	.word	0x20000288
 8001bbc:	40000400 	.word	0x40000400

08001bc0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bd0:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <MX_TIM6_Init+0x68>)
 8001bd2:	4a16      	ldr	r2, [pc, #88]	; (8001c2c <MX_TIM6_Init+0x6c>)
 8001bd4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16999;
 8001bd6:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <MX_TIM6_Init+0x68>)
 8001bd8:	f244 2267 	movw	r2, #16999	; 0x4267
 8001bdc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <MX_TIM6_Init+0x68>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001be4:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <MX_TIM6_Init+0x68>)
 8001be6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_TIM6_Init+0x68>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bf2:	480d      	ldr	r0, [pc, #52]	; (8001c28 <MX_TIM6_Init+0x68>)
 8001bf4:	f001 fe40 	bl	8003878 <HAL_TIM_Base_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001bfe:	f7ff fd21 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4806      	ldr	r0, [pc, #24]	; (8001c28 <MX_TIM6_Init+0x68>)
 8001c10:	f003 fb28 	bl	8005264 <HAL_TIMEx_MasterConfigSynchronization>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001c1a:	f7ff fd13 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200002d4 	.word	0x200002d4
 8001c2c:	40001000 	.word	0x40001000

08001c30 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_TIM7_Init+0x64>)
 8001c42:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <MX_TIM7_Init+0x68>)
 8001c44:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <MX_TIM7_Init+0x64>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_TIM7_Init+0x64>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <MX_TIM7_Init+0x64>)
 8001c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c58:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <MX_TIM7_Init+0x64>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c60:	480c      	ldr	r0, [pc, #48]	; (8001c94 <MX_TIM7_Init+0x64>)
 8001c62:	f001 fe09 	bl	8003878 <HAL_TIM_Base_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001c6c:	f7ff fcea 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_TIM7_Init+0x64>)
 8001c7e:	f003 faf1 	bl	8005264 <HAL_TIMEx_MasterConfigSynchronization>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001c88:	f7ff fcdc 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	200003b8 	.word	0x200003b8
 8001c98:	40001400 	.word	0x40001400

08001c9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <HAL_TIM_PWM_MspInit+0x44>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d113      	bne.n	8001cd6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x48>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x48>)
 8001cb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cb8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x48>)
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2019      	movs	r0, #25
 8001ccc:	f000 fb49 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001cd0:	2019      	movs	r0, #25
 8001cd2:	f000 fb60 	bl	8002396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40012c00 	.word	0x40012c00
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d08:	d128      	bne.n	8001d5c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0a:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	4a15      	ldr	r2, [pc, #84]	; (8001d64 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6593      	str	r3, [r2, #88]	; 0x58
 8001d16:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d58:	f000 fbf8 	bl	800254c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	3728      	adds	r7, #40	; 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a27      	ldr	r2, [pc, #156]	; (8001e14 <HAL_TIM_Base_MspInit+0xac>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d114      	bne.n	8001da4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d7a:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <HAL_TIM_Base_MspInit+0xb0>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	4a26      	ldr	r2, [pc, #152]	; (8001e18 <HAL_TIM_Base_MspInit+0xb0>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	6593      	str	r3, [r2, #88]	; 0x58
 8001d86:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <HAL_TIM_Base_MspInit+0xb0>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2100      	movs	r1, #0
 8001d96:	201d      	movs	r0, #29
 8001d98:	f000 fae3 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d9c:	201d      	movs	r0, #29
 8001d9e:	f000 fafa 	bl	8002396 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001da2:	e032      	b.n	8001e0a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1c      	ldr	r2, [pc, #112]	; (8001e1c <HAL_TIM_Base_MspInit+0xb4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d114      	bne.n	8001dd8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dae:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <HAL_TIM_Base_MspInit+0xb0>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	4a19      	ldr	r2, [pc, #100]	; (8001e18 <HAL_TIM_Base_MspInit+0xb0>)
 8001db4:	f043 0310 	orr.w	r3, r3, #16
 8001db8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_TIM_Base_MspInit+0xb0>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2036      	movs	r0, #54	; 0x36
 8001dcc:	f000 fac9 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dd0:	2036      	movs	r0, #54	; 0x36
 8001dd2:	f000 fae0 	bl	8002396 <HAL_NVIC_EnableIRQ>
}
 8001dd6:	e018      	b.n	8001e0a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a10      	ldr	r2, [pc, #64]	; (8001e20 <HAL_TIM_Base_MspInit+0xb8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d113      	bne.n	8001e0a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <HAL_TIM_Base_MspInit+0xb0>)
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <HAL_TIM_Base_MspInit+0xb0>)
 8001de8:	f043 0320 	orr.w	r3, r3, #32
 8001dec:	6593      	str	r3, [r2, #88]	; 0x58
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_TIM_Base_MspInit+0xb0>)
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	f003 0320 	and.w	r3, r3, #32
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2037      	movs	r0, #55	; 0x37
 8001e00:	f000 faaf 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e04:	2037      	movs	r0, #55	; 0x37
 8001e06:	f000 fac6 	bl	8002396 <HAL_NVIC_EnableIRQ>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40000400 	.word	0x40000400
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40001000 	.word	0x40001000
 8001e20:	40001400 	.word	0x40001400

08001e24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2d      	ldr	r2, [pc, #180]	; (8001ef8 <HAL_TIM_MspPostInit+0xd4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d154      	bne.n	8001ef0 <HAL_TIM_MspPostInit+0xcc>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e46:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <HAL_TIM_MspPostInit+0xd8>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	4a2c      	ldr	r2, [pc, #176]	; (8001efc <HAL_TIM_MspPostInit+0xd8>)
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e52:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <HAL_TIM_MspPostInit+0xd8>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	4b27      	ldr	r3, [pc, #156]	; (8001efc <HAL_TIM_MspPostInit+0xd8>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	4a26      	ldr	r2, [pc, #152]	; (8001efc <HAL_TIM_MspPostInit+0xd8>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6a:	4b24      	ldr	r3, [pc, #144]	; (8001efc <HAL_TIM_MspPostInit+0xd8>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	4b21      	ldr	r3, [pc, #132]	; (8001efc <HAL_TIM_MspPostInit+0xd8>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	4a20      	ldr	r2, [pc, #128]	; (8001efc <HAL_TIM_MspPostInit+0xd8>)
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e82:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_TIM_MspPostInit+0xd8>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4815      	ldr	r0, [pc, #84]	; (8001f00 <HAL_TIM_MspPostInit+0xdc>)
 8001eaa:	f000 fb4f 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ebe:	2306      	movs	r3, #6
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ecc:	f000 fb3e 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ee0:	2306      	movs	r3, #6
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4806      	ldr	r0, [pc, #24]	; (8001f04 <HAL_TIM_MspPostInit+0xe0>)
 8001eec:	f000 fb2e 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ef0:	bf00      	nop
 8001ef2:	3728      	adds	r7, #40	; 0x28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40012c00 	.word	0x40012c00
 8001efc:	40021000 	.word	0x40021000
 8001f00:	48000800 	.word	0x48000800
 8001f04:	48000400 	.word	0x48000400

08001f08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f0c:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f0e:	4a23      	ldr	r2, [pc, #140]	; (8001f9c <MX_USART2_UART_Init+0x94>)
 8001f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f12:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f26:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f2e:	220c      	movs	r2, #12
 8001f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f38:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f3e:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f44:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f4a:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f50:	4811      	ldr	r0, [pc, #68]	; (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f52:	f003 fb14 	bl	800557e <HAL_UART_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f5c:	f7ff fb72 	bl	8001644 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f60:	2100      	movs	r1, #0
 8001f62:	480d      	ldr	r0, [pc, #52]	; (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f64:	f004 feeb 	bl	8006d3e <HAL_UARTEx_SetTxFifoThreshold>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f6e:	f7ff fb69 	bl	8001644 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f72:	2100      	movs	r1, #0
 8001f74:	4808      	ldr	r0, [pc, #32]	; (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f76:	f004 ff20 	bl	8006dba <HAL_UARTEx_SetRxFifoThreshold>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f80:	f7ff fb60 	bl	8001644 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f84:	4804      	ldr	r0, [pc, #16]	; (8001f98 <MX_USART2_UART_Init+0x90>)
 8001f86:	f004 fea1 	bl	8006ccc <HAL_UARTEx_DisableFifoMode>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f90:	f7ff fb58 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000404 	.word	0x20000404
 8001f9c:	40004400 	.word	0x40004400

08001fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1b      	ldr	r2, [pc, #108]	; (800202c <HAL_UART_MspInit+0x8c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d130      	bne.n	8002024 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_UART_MspInit+0x90>)
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc6:	4a1a      	ldr	r2, [pc, #104]	; (8002030 <HAL_UART_MspInit+0x90>)
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001fce:	4b18      	ldr	r3, [pc, #96]	; (8002030 <HAL_UART_MspInit+0x90>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_UART_MspInit+0x90>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	4a14      	ldr	r2, [pc, #80]	; (8002030 <HAL_UART_MspInit+0x90>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_UART_MspInit+0x90>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ff2:	230c      	movs	r3, #12
 8001ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002002:	2307      	movs	r3, #7
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002010:	f000 fa9c 	bl	800254c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2100      	movs	r1, #0
 8002018:	2026      	movs	r0, #38	; 0x26
 800201a:	f000 f9a2 	bl	8002362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800201e:	2026      	movs	r0, #38	; 0x26
 8002020:	f000 f9b9 	bl	8002396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002024:	bf00      	nop
 8002026:	3728      	adds	r7, #40	; 0x28
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40004400 	.word	0x40004400
 8002030:	40021000 	.word	0x40021000

08002034 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002034:	480d      	ldr	r0, [pc, #52]	; (800206c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002036:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002038:	480d      	ldr	r0, [pc, #52]	; (8002070 <LoopForever+0x6>)
  ldr r1, =_edata
 800203a:	490e      	ldr	r1, [pc, #56]	; (8002074 <LoopForever+0xa>)
  ldr r2, =_sidata
 800203c:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <LoopForever+0xe>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002040:	e002      	b.n	8002048 <LoopCopyDataInit>

08002042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002046:	3304      	adds	r3, #4

08002048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800204c:	d3f9      	bcc.n	8002042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204e:	4a0b      	ldr	r2, [pc, #44]	; (800207c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002050:	4c0b      	ldr	r4, [pc, #44]	; (8002080 <LoopForever+0x16>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002054:	e001      	b.n	800205a <LoopFillZerobss>

08002056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002058:	3204      	adds	r2, #4

0800205a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800205c:	d3fb      	bcc.n	8002056 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800205e:	f7ff fc57 	bl	8001910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002062:	f004 ff41 	bl	8006ee8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002066:	f7ff f9ad 	bl	80013c4 <main>

0800206a <LoopForever>:

LoopForever:
    b LoopForever
 800206a:	e7fe      	b.n	800206a <LoopForever>
  ldr   r0, =_estack
 800206c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002074:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002078:	0800a20c 	.word	0x0800a20c
  ldr r2, =_sbss
 800207c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002080:	200004a8 	.word	0x200004a8

08002084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002084:	e7fe      	b.n	8002084 <ADC1_2_IRQHandler>

08002086 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002090:	2003      	movs	r0, #3
 8002092:	f000 f95b 	bl	800234c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002096:	200f      	movs	r0, #15
 8002098:	f000 f80e 	bl	80020b8 <HAL_InitTick>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	71fb      	strb	r3, [r7, #7]
 80020a6:	e001      	b.n	80020ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020a8:	f7ff fad2 	bl	8001650 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020ac:	79fb      	ldrb	r3, [r7, #7]

}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80020c4:	4b16      	ldr	r3, [pc, #88]	; (8002120 <HAL_InitTick+0x68>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d022      	beq.n	8002112 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020cc:	4b15      	ldr	r3, [pc, #84]	; (8002124 <HAL_InitTick+0x6c>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_InitTick+0x68>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 f966 	bl	80023b2 <HAL_SYSTICK_Config>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10f      	bne.n	800210c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b0f      	cmp	r3, #15
 80020f0:	d809      	bhi.n	8002106 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f2:	2200      	movs	r2, #0
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	f04f 30ff 	mov.w	r0, #4294967295
 80020fa:	f000 f932 	bl	8002362 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <HAL_InitTick+0x70>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	e007      	b.n	8002116 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	73fb      	strb	r3, [r7, #15]
 800210a:	e004      	b.n	8002116 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e001      	b.n	8002116 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	2000000c 	.word	0x2000000c
 8002124:	20000004 	.word	0x20000004
 8002128:	20000008 	.word	0x20000008

0800212c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_IncTick+0x1c>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_IncTick+0x20>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4413      	add	r3, r2
 800213a:	4a03      	ldr	r2, [pc, #12]	; (8002148 <HAL_IncTick+0x1c>)
 800213c:	6013      	str	r3, [r2, #0]
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	20000494 	.word	0x20000494
 800214c:	2000000c 	.word	0x2000000c

08002150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return uwTick;
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_GetTick+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000494 	.word	0x20000494

08002168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff ffee 	bl	8002150 <HAL_GetTick>
 8002174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002180:	d004      	beq.n	800218c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_Delay+0x40>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4413      	add	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800218c:	bf00      	nop
 800218e:	f7ff ffdf 	bl	8002150 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	429a      	cmp	r2, r3
 800219c:	d8f7      	bhi.n	800218e <HAL_Delay+0x26>
  {
  }
}
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	2000000c 	.word	0x2000000c

080021ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c8:	4013      	ands	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021de:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	60d3      	str	r3, [r2, #12]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <__NVIC_GetPriorityGrouping+0x18>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	f003 0307 	and.w	r3, r3, #7
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	2b00      	cmp	r3, #0
 8002220:	db0b      	blt.n	800223a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	f003 021f 	and.w	r2, r3, #31
 8002228:	4907      	ldr	r1, [pc, #28]	; (8002248 <__NVIC_EnableIRQ+0x38>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	2001      	movs	r0, #1
 8002232:	fa00 f202 	lsl.w	r2, r0, r2
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000e100 	.word	0xe000e100

0800224c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225c:	2b00      	cmp	r3, #0
 800225e:	db0a      	blt.n	8002276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	490c      	ldr	r1, [pc, #48]	; (8002298 <__NVIC_SetPriority+0x4c>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	0112      	lsls	r2, r2, #4
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	440b      	add	r3, r1
 8002270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002274:	e00a      	b.n	800228c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4908      	ldr	r1, [pc, #32]	; (800229c <__NVIC_SetPriority+0x50>)
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3b04      	subs	r3, #4
 8002284:	0112      	lsls	r2, r2, #4
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	440b      	add	r3, r1
 800228a:	761a      	strb	r2, [r3, #24]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000e100 	.word	0xe000e100
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f1c3 0307 	rsb	r3, r3, #7
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	bf28      	it	cs
 80022be:	2304      	movcs	r3, #4
 80022c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3304      	adds	r3, #4
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d902      	bls.n	80022d0 <NVIC_EncodePriority+0x30>
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3b03      	subs	r3, #3
 80022ce:	e000      	b.n	80022d2 <NVIC_EncodePriority+0x32>
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43da      	mvns	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	401a      	ands	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	43d9      	mvns	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	4313      	orrs	r3, r2
         );
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002318:	d301      	bcc.n	800231e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231a:	2301      	movs	r3, #1
 800231c:	e00f      	b.n	800233e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <SysTick_Config+0x40>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002326:	210f      	movs	r1, #15
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f7ff ff8e 	bl	800224c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <SysTick_Config+0x40>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SysTick_Config+0x40>)
 8002338:	2207      	movs	r2, #7
 800233a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	e000e010 	.word	0xe000e010

0800234c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff29 	bl	80021ac <__NVIC_SetPriorityGrouping>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002370:	f7ff ff40 	bl	80021f4 <__NVIC_GetPriorityGrouping>
 8002374:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	6978      	ldr	r0, [r7, #20]
 800237c:	f7ff ff90 	bl	80022a0 <NVIC_EncodePriority>
 8002380:	4602      	mov	r2, r0
 8002382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff5f 	bl	800224c <__NVIC_SetPriority>
}
 800238e:	bf00      	nop
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff33 	bl	8002210 <__NVIC_EnableIRQ>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ffa4 	bl	8002308 <SysTick_Config>
 80023c0:	4603      	mov	r3, r0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d005      	beq.n	80023ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2204      	movs	r2, #4
 80023e6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	e037      	b.n	800245e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 020e 	bic.w	r2, r2, #14
 80023fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800240c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0201 	bic.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f003 021f 	and.w	r2, r3, #31
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	2101      	movs	r1, #1
 800242c:	fa01 f202 	lsl.w	r2, r1, r2
 8002430:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800243a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00c      	beq.n	800245e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002452:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800245c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d00d      	beq.n	80024b0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2204      	movs	r2, #4
 8002498:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	e047      	b.n	8002540 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 020e 	bic.w	r2, r2, #14
 80024be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	2101      	movs	r1, #1
 80024ee:	fa01 f202 	lsl.w	r2, r1, r2
 80024f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00c      	beq.n	8002520 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002514:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800251e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4798      	blx	r3
    }
  }
  return status;
 8002540:	7bfb      	ldrb	r3, [r7, #15]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800255a:	e15a      	b.n	8002812 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	4013      	ands	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 814c 	beq.w	800280c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d00b      	beq.n	8002594 <HAL_GPIO_Init+0x48>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d007      	beq.n	8002594 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002588:	2b11      	cmp	r3, #17
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b12      	cmp	r3, #18
 8002592:	d130      	bne.n	80025f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ca:	2201      	movs	r2, #1
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	f003 0201 	and.w	r2, r3, #1
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0xea>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b12      	cmp	r3, #18
 8002634:	d123      	bne.n	800267e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	08da      	lsrs	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3208      	adds	r2, #8
 800263e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002642:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	220f      	movs	r2, #15
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4013      	ands	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	08da      	lsrs	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3208      	adds	r2, #8
 8002678:	6939      	ldr	r1, [r7, #16]
 800267a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2203      	movs	r2, #3
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0203 	and.w	r2, r3, #3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80a6 	beq.w	800280c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c0:	4b5b      	ldr	r3, [pc, #364]	; (8002830 <HAL_GPIO_Init+0x2e4>)
 80026c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c4:	4a5a      	ldr	r2, [pc, #360]	; (8002830 <HAL_GPIO_Init+0x2e4>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6613      	str	r3, [r2, #96]	; 0x60
 80026cc:	4b58      	ldr	r3, [pc, #352]	; (8002830 <HAL_GPIO_Init+0x2e4>)
 80026ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026d8:	4a56      	ldr	r2, [pc, #344]	; (8002834 <HAL_GPIO_Init+0x2e8>)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	3302      	adds	r3, #2
 80026e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	220f      	movs	r2, #15
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002702:	d01f      	beq.n	8002744 <HAL_GPIO_Init+0x1f8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a4c      	ldr	r2, [pc, #304]	; (8002838 <HAL_GPIO_Init+0x2ec>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d019      	beq.n	8002740 <HAL_GPIO_Init+0x1f4>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a4b      	ldr	r2, [pc, #300]	; (800283c <HAL_GPIO_Init+0x2f0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d013      	beq.n	800273c <HAL_GPIO_Init+0x1f0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a4a      	ldr	r2, [pc, #296]	; (8002840 <HAL_GPIO_Init+0x2f4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d00d      	beq.n	8002738 <HAL_GPIO_Init+0x1ec>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a49      	ldr	r2, [pc, #292]	; (8002844 <HAL_GPIO_Init+0x2f8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d007      	beq.n	8002734 <HAL_GPIO_Init+0x1e8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a48      	ldr	r2, [pc, #288]	; (8002848 <HAL_GPIO_Init+0x2fc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d101      	bne.n	8002730 <HAL_GPIO_Init+0x1e4>
 800272c:	2305      	movs	r3, #5
 800272e:	e00a      	b.n	8002746 <HAL_GPIO_Init+0x1fa>
 8002730:	2306      	movs	r3, #6
 8002732:	e008      	b.n	8002746 <HAL_GPIO_Init+0x1fa>
 8002734:	2304      	movs	r3, #4
 8002736:	e006      	b.n	8002746 <HAL_GPIO_Init+0x1fa>
 8002738:	2303      	movs	r3, #3
 800273a:	e004      	b.n	8002746 <HAL_GPIO_Init+0x1fa>
 800273c:	2302      	movs	r3, #2
 800273e:	e002      	b.n	8002746 <HAL_GPIO_Init+0x1fa>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <HAL_GPIO_Init+0x1fa>
 8002744:	2300      	movs	r3, #0
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	f002 0203 	and.w	r2, r2, #3
 800274c:	0092      	lsls	r2, r2, #2
 800274e:	4093      	lsls	r3, r2
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002756:	4937      	ldr	r1, [pc, #220]	; (8002834 <HAL_GPIO_Init+0x2e8>)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	089b      	lsrs	r3, r3, #2
 800275c:	3302      	adds	r3, #2
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002764:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_GPIO_Init+0x300>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	43db      	mvns	r3, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002788:	4a30      	ldr	r2, [pc, #192]	; (800284c <HAL_GPIO_Init+0x300>)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800278e:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_GPIO_Init+0x300>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	43db      	mvns	r3, r3
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4013      	ands	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027b2:	4a26      	ldr	r2, [pc, #152]	; (800284c <HAL_GPIO_Init+0x300>)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027b8:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_GPIO_Init+0x300>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027dc:	4a1b      	ldr	r2, [pc, #108]	; (800284c <HAL_GPIO_Init+0x300>)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027e2:	4b1a      	ldr	r3, [pc, #104]	; (800284c <HAL_GPIO_Init+0x300>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002806:	4a11      	ldr	r2, [pc, #68]	; (800284c <HAL_GPIO_Init+0x300>)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	3301      	adds	r3, #1
 8002810:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	fa22 f303 	lsr.w	r3, r2, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	f47f ae9d 	bne.w	800255c <HAL_GPIO_Init+0x10>
  }
}
 8002822:	bf00      	nop
 8002824:	bf00      	nop
 8002826:	371c      	adds	r7, #28
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	40021000 	.word	0x40021000
 8002834:	40010000 	.word	0x40010000
 8002838:	48000400 	.word	0x48000400
 800283c:	48000800 	.word	0x48000800
 8002840:	48000c00 	.word	0x48000c00
 8002844:	48001000 	.word	0x48001000
 8002848:	48001400 	.word	0x48001400
 800284c:	40010400 	.word	0x40010400

08002850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
 800285c:	4613      	mov	r3, r2
 800285e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002860:	787b      	ldrb	r3, [r7, #1]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800286c:	e002      	b.n	8002874 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800288a:	4b08      	ldr	r3, [pc, #32]	; (80028ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d006      	beq.n	80028a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002896:	4a05      	ldr	r2, [pc, #20]	; (80028ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f806 	bl	80028b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40010400 	.word	0x40010400

080028b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d141      	bne.n	800295a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028d6:	4b4b      	ldr	r3, [pc, #300]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e2:	d131      	bne.n	8002948 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028e4:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ea:	4a46      	ldr	r2, [pc, #280]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028f4:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028fc:	4a41      	ldr	r2, [pc, #260]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002902:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002904:	4b40      	ldr	r3, [pc, #256]	; (8002a08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2232      	movs	r2, #50	; 0x32
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	4a3f      	ldr	r2, [pc, #252]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	0c9b      	lsrs	r3, r3, #18
 8002916:	3301      	adds	r3, #1
 8002918:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800291a:	e002      	b.n	8002922 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3b01      	subs	r3, #1
 8002920:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002922:	4b38      	ldr	r3, [pc, #224]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292e:	d102      	bne.n	8002936 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f2      	bne.n	800291c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002936:	4b33      	ldr	r3, [pc, #204]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002942:	d158      	bne.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e057      	b.n	80029f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002948:	4b2e      	ldr	r3, [pc, #184]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800294a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800294e:	4a2d      	ldr	r2, [pc, #180]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002954:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002958:	e04d      	b.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002960:	d141      	bne.n	80029e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800296a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296e:	d131      	bne.n	80029d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002970:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002976:	4a23      	ldr	r2, [pc, #140]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002980:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002988:	4a1e      	ldr	r2, [pc, #120]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800298a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800298e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002990:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2232      	movs	r2, #50	; 0x32
 8002996:	fb02 f303 	mul.w	r3, r2, r3
 800299a:	4a1c      	ldr	r2, [pc, #112]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	0c9b      	lsrs	r3, r3, #18
 80029a2:	3301      	adds	r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029a6:	e002      	b.n	80029ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ba:	d102      	bne.n	80029c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f2      	bne.n	80029a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ce:	d112      	bne.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e011      	b.n	80029f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80029e4:	e007      	b.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029e6:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029ee:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40007000 	.word	0x40007000
 8002a08:	20000004 	.word	0x20000004
 8002a0c:	431bde83 	.word	0x431bde83

08002a10 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a1e:	6093      	str	r3, [r2, #8]
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40007000 	.word	0x40007000

08002a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e308      	b.n	8003054 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d075      	beq.n	8002b3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a4e:	4ba3      	ldr	r3, [pc, #652]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a58:	4ba0      	ldr	r3, [pc, #640]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	2b0c      	cmp	r3, #12
 8002a66:	d102      	bne.n	8002a6e <HAL_RCC_OscConfig+0x3e>
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d002      	beq.n	8002a74 <HAL_RCC_OscConfig+0x44>
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d10b      	bne.n	8002a8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a74:	4b99      	ldr	r3, [pc, #612]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d05b      	beq.n	8002b38 <HAL_RCC_OscConfig+0x108>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d157      	bne.n	8002b38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e2e3      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a94:	d106      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x74>
 8002a96:	4b91      	ldr	r3, [pc, #580]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a90      	ldr	r2, [pc, #576]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e01d      	b.n	8002ae0 <HAL_RCC_OscConfig+0xb0>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x98>
 8002aae:	4b8b      	ldr	r3, [pc, #556]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a8a      	ldr	r2, [pc, #552]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b88      	ldr	r3, [pc, #544]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a87      	ldr	r2, [pc, #540]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCC_OscConfig+0xb0>
 8002ac8:	4b84      	ldr	r3, [pc, #528]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a83      	ldr	r2, [pc, #524]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	4b81      	ldr	r3, [pc, #516]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a80      	ldr	r2, [pc, #512]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae8:	f7ff fb32 	bl	8002150 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af0:	f7ff fb2e 	bl	8002150 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	; 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e2a8      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b02:	4b76      	ldr	r3, [pc, #472]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0xc0>
 8002b0e:	e014      	b.n	8002b3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7ff fb1e 	bl	8002150 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b18:	f7ff fb1a 	bl	8002150 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e294      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b2a:	4b6c      	ldr	r3, [pc, #432]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0xe8>
 8002b36:	e000      	b.n	8002b3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d075      	beq.n	8002c32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b46:	4b65      	ldr	r3, [pc, #404]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b50:	4b62      	ldr	r3, [pc, #392]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b0c      	cmp	r3, #12
 8002b5e:	d102      	bne.n	8002b66 <HAL_RCC_OscConfig+0x136>
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d002      	beq.n	8002b6c <HAL_RCC_OscConfig+0x13c>
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d11f      	bne.n	8002bac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b6c:	4b5b      	ldr	r3, [pc, #364]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_OscConfig+0x154>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e267      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b84:	4b55      	ldr	r3, [pc, #340]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	061b      	lsls	r3, r3, #24
 8002b92:	4952      	ldr	r1, [pc, #328]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b98:	4b51      	ldr	r3, [pc, #324]	; (8002ce0 <HAL_RCC_OscConfig+0x2b0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fa8b 	bl	80020b8 <HAL_InitTick>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d043      	beq.n	8002c30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e253      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d023      	beq.n	8002bfc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb4:	4b49      	ldr	r3, [pc, #292]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a48      	ldr	r2, [pc, #288]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7ff fac6 	bl	8002150 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc8:	f7ff fac2 	bl	8002150 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e23c      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bda:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be6:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	061b      	lsls	r3, r3, #24
 8002bf4:	4939      	ldr	r1, [pc, #228]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	604b      	str	r3, [r1, #4]
 8002bfa:	e01a      	b.n	8002c32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfc:	4b37      	ldr	r3, [pc, #220]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a36      	ldr	r2, [pc, #216]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002c02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7ff faa2 	bl	8002150 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c10:	f7ff fa9e 	bl	8002150 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e218      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c22:	4b2e      	ldr	r3, [pc, #184]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1e0>
 8002c2e:	e000      	b.n	8002c32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d03c      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d01c      	beq.n	8002c80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c46:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c4c:	4a23      	ldr	r2, [pc, #140]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c56:	f7ff fa7b 	bl	8002150 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5e:	f7ff fa77 	bl	8002150 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e1f1      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c70:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0ef      	beq.n	8002c5e <HAL_RCC_OscConfig+0x22e>
 8002c7e:	e01b      	b.n	8002cb8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c80:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c86:	4a15      	ldr	r2, [pc, #84]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c90:	f7ff fa5e 	bl	8002150 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c98:	f7ff fa5a 	bl	8002150 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e1d4      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1ef      	bne.n	8002c98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80ab 	beq.w	8002e1c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cca:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x2b4>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e005      	b.n	8002ce6 <HAL_RCC_OscConfig+0x2b6>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	20000008 	.word	0x20000008
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00d      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cea:	4baf      	ldr	r3, [pc, #700]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	4aae      	ldr	r2, [pc, #696]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf6:	4bac      	ldr	r3, [pc, #688]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d02:	2301      	movs	r3, #1
 8002d04:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d06:	4ba9      	ldr	r3, [pc, #676]	; (8002fac <HAL_RCC_OscConfig+0x57c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d118      	bne.n	8002d44 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d12:	4ba6      	ldr	r3, [pc, #664]	; (8002fac <HAL_RCC_OscConfig+0x57c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4aa5      	ldr	r2, [pc, #660]	; (8002fac <HAL_RCC_OscConfig+0x57c>)
 8002d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1e:	f7ff fa17 	bl	8002150 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d26:	f7ff fa13 	bl	8002150 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e18d      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d38:	4b9c      	ldr	r3, [pc, #624]	; (8002fac <HAL_RCC_OscConfig+0x57c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d108      	bne.n	8002d5e <HAL_RCC_OscConfig+0x32e>
 8002d4c:	4b96      	ldr	r3, [pc, #600]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	4a95      	ldr	r2, [pc, #596]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d5c:	e024      	b.n	8002da8 <HAL_RCC_OscConfig+0x378>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b05      	cmp	r3, #5
 8002d64:	d110      	bne.n	8002d88 <HAL_RCC_OscConfig+0x358>
 8002d66:	4b90      	ldr	r3, [pc, #576]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6c:	4a8e      	ldr	r2, [pc, #568]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d76:	4b8c      	ldr	r3, [pc, #560]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7c:	4a8a      	ldr	r2, [pc, #552]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d86:	e00f      	b.n	8002da8 <HAL_RCC_OscConfig+0x378>
 8002d88:	4b87      	ldr	r3, [pc, #540]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8e:	4a86      	ldr	r2, [pc, #536]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d98:	4b83      	ldr	r3, [pc, #524]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9e:	4a82      	ldr	r2, [pc, #520]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002da0:	f023 0304 	bic.w	r3, r3, #4
 8002da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d016      	beq.n	8002dde <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7ff f9ce 	bl	8002150 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db8:	f7ff f9ca 	bl	8002150 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e142      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dce:	4b76      	ldr	r3, [pc, #472]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0ed      	beq.n	8002db8 <HAL_RCC_OscConfig+0x388>
 8002ddc:	e015      	b.n	8002e0a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dde:	f7ff f9b7 	bl	8002150 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de6:	f7ff f9b3 	bl	8002150 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e12b      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dfc:	4b6a      	ldr	r3, [pc, #424]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1ed      	bne.n	8002de6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e0a:	7ffb      	ldrb	r3, [r7, #31]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e10:	4b65      	ldr	r3, [pc, #404]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e14:	4a64      	ldr	r2, [pc, #400]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d03c      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d01c      	beq.n	8002e6a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e30:	4b5d      	ldr	r3, [pc, #372]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e36:	4a5c      	ldr	r2, [pc, #368]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7ff f986 	bl	8002150 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e48:	f7ff f982 	bl	8002150 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e0fc      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e5a:	4b53      	ldr	r3, [pc, #332]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002e5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ef      	beq.n	8002e48 <HAL_RCC_OscConfig+0x418>
 8002e68:	e01b      	b.n	8002ea2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e6a:	4b4f      	ldr	r3, [pc, #316]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002e6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e70:	4a4d      	ldr	r2, [pc, #308]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7a:	f7ff f969 	bl	8002150 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e82:	f7ff f965 	bl	8002150 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e0df      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e94:	4b44      	ldr	r3, [pc, #272]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1ef      	bne.n	8002e82 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80d3 	beq.w	8003052 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eac:	4b3e      	ldr	r3, [pc, #248]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	2b0c      	cmp	r3, #12
 8002eb6:	f000 808d 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d15a      	bne.n	8002f78 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec2:	4b39      	ldr	r3, [pc, #228]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a38      	ldr	r2, [pc, #224]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002ec8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ece:	f7ff f93f 	bl	8002150 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7ff f93b 	bl	8002150 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e0b5      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee8:	4b2f      	ldr	r3, [pc, #188]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f0      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <HAL_RCC_OscConfig+0x580>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6a11      	ldr	r1, [r2, #32]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f04:	3a01      	subs	r2, #1
 8002f06:	0112      	lsls	r2, r2, #4
 8002f08:	4311      	orrs	r1, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002f0e:	0212      	lsls	r2, r2, #8
 8002f10:	4311      	orrs	r1, r2
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f16:	0852      	lsrs	r2, r2, #1
 8002f18:	3a01      	subs	r2, #1
 8002f1a:	0552      	lsls	r2, r2, #21
 8002f1c:	4311      	orrs	r1, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f22:	0852      	lsrs	r2, r2, #1
 8002f24:	3a01      	subs	r2, #1
 8002f26:	0652      	lsls	r2, r2, #25
 8002f28:	4311      	orrs	r1, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f2e:	06d2      	lsls	r2, r2, #27
 8002f30:	430a      	orrs	r2, r1
 8002f32:	491d      	ldr	r1, [pc, #116]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1a      	ldr	r2, [pc, #104]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f44:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7ff f8fe 	bl	8002150 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f58:	f7ff f8fa 	bl	8002150 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e074      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x528>
 8002f76:	e06c      	b.n	8003052 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f82:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002f8a:	f023 0303 	bic.w	r3, r3, #3
 8002f8e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4a04      	ldr	r2, [pc, #16]	; (8002fa8 <HAL_RCC_OscConfig+0x578>)
 8002f96:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7ff f8d6 	bl	8002150 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa6:	e00e      	b.n	8002fc6 <HAL_RCC_OscConfig+0x596>
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40007000 	.word	0x40007000
 8002fb0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7ff f8cc 	bl	8002150 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e046      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc6:	4b25      	ldr	r3, [pc, #148]	; (800305c <HAL_RCC_OscConfig+0x62c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x584>
 8002fd2:	e03e      	b.n	8003052 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e039      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002fe0:	4b1e      	ldr	r3, [pc, #120]	; (800305c <HAL_RCC_OscConfig+0x62c>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f003 0203 	and.w	r2, r3, #3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d12c      	bne.n	800304e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	3b01      	subs	r3, #1
 8003000:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d123      	bne.n	800304e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d11b      	bne.n	800304e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d113      	bne.n	800304e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	085b      	lsrs	r3, r3, #1
 8003032:	3b01      	subs	r3, #1
 8003034:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d109      	bne.n	800304e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003044:	085b      	lsrs	r3, r3, #1
 8003046:	3b01      	subs	r3, #1
 8003048:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d001      	beq.n	8003052 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3720      	adds	r7, #32
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000

08003060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e11e      	b.n	80032b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003078:	4b91      	ldr	r3, [pc, #580]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d910      	bls.n	80030a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b8e      	ldr	r3, [pc, #568]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 020f 	bic.w	r2, r3, #15
 800308e:	498c      	ldr	r1, [pc, #560]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b8a      	ldr	r3, [pc, #552]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e106      	b.n	80032b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d073      	beq.n	800319c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d129      	bne.n	8003110 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030bc:	4b81      	ldr	r3, [pc, #516]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0f4      	b.n	80032b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80030cc:	f000 f99e 	bl	800340c <RCC_GetSysClockFreqFromPLLSource>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4a7c      	ldr	r2, [pc, #496]	; (80032c8 <HAL_RCC_ClockConfig+0x268>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d93f      	bls.n	800315a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030da:	4b7a      	ldr	r3, [pc, #488]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d009      	beq.n	80030fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d033      	beq.n	800315a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d12f      	bne.n	800315a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030fa:	4b72      	ldr	r3, [pc, #456]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003102:	4a70      	ldr	r2, [pc, #448]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 8003104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003108:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	e024      	b.n	800315a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d107      	bne.n	8003128 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003118:	4b6a      	ldr	r3, [pc, #424]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d109      	bne.n	8003138 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0c6      	b.n	80032b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003128:	4b66      	ldr	r3, [pc, #408]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0be      	b.n	80032b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003138:	f000 f8ce 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 800313c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4a61      	ldr	r2, [pc, #388]	; (80032c8 <HAL_RCC_ClockConfig+0x268>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d909      	bls.n	800315a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003146:	4b5f      	ldr	r3, [pc, #380]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800314e:	4a5d      	ldr	r2, [pc, #372]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 8003150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003154:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800315a:	4b5a      	ldr	r3, [pc, #360]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f023 0203 	bic.w	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4957      	ldr	r1, [pc, #348]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 8003168:	4313      	orrs	r3, r2
 800316a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800316c:	f7fe fff0 	bl	8002150 <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003172:	e00a      	b.n	800318a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003174:	f7fe ffec 	bl	8002150 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e095      	b.n	80032b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	4b4e      	ldr	r3, [pc, #312]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 020c 	and.w	r2, r3, #12
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	429a      	cmp	r2, r3
 800319a:	d1eb      	bne.n	8003174 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d023      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b4:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	4a42      	ldr	r2, [pc, #264]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 80031ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80031cc:	4b3d      	ldr	r3, [pc, #244]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80031d4:	4a3b      	ldr	r2, [pc, #236]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 80031d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031dc:	4b39      	ldr	r3, [pc, #228]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4936      	ldr	r1, [pc, #216]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
 80031ee:	e008      	b.n	8003202 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2b80      	cmp	r3, #128	; 0x80
 80031f4:	d105      	bne.n	8003202 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80031f6:	4b33      	ldr	r3, [pc, #204]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	4a32      	ldr	r2, [pc, #200]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 80031fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003200:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003202:	4b2f      	ldr	r3, [pc, #188]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d21d      	bcs.n	800324c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003210:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f023 020f 	bic.w	r2, r3, #15
 8003218:	4929      	ldr	r1, [pc, #164]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	4313      	orrs	r3, r2
 800321e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003220:	f7fe ff96 	bl	8002150 <HAL_GetTick>
 8003224:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	e00a      	b.n	800323e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003228:	f7fe ff92 	bl	8002150 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e03b      	b.n	80032b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <HAL_RCC_ClockConfig+0x260>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d1ed      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003258:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4917      	ldr	r1, [pc, #92]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003276:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	490f      	ldr	r1, [pc, #60]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800328a:	f000 f825 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 800328e:	4602      	mov	r2, r0
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_RCC_ClockConfig+0x264>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	490c      	ldr	r1, [pc, #48]	; (80032cc <HAL_RCC_ClockConfig+0x26c>)
 800329c:	5ccb      	ldrb	r3, [r1, r3]
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	fa22 f303 	lsr.w	r3, r2, r3
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <HAL_RCC_ClockConfig+0x270>)
 80032a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80032aa:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <HAL_RCC_ClockConfig+0x274>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe ff02 	bl	80020b8 <HAL_InitTick>
 80032b4:	4603      	mov	r3, r0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40022000 	.word	0x40022000
 80032c4:	40021000 	.word	0x40021000
 80032c8:	04c4b400 	.word	0x04c4b400
 80032cc:	08009dd4 	.word	0x08009dd4
 80032d0:	20000004 	.word	0x20000004
 80032d4:	20000008 	.word	0x20000008

080032d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80032de:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d102      	bne.n	80032f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032ea:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	e047      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80032f0:	4b27      	ldr	r3, [pc, #156]	; (8003390 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d102      	bne.n	8003302 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032fc:	4b26      	ldr	r3, [pc, #152]	; (8003398 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	e03e      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003302:	4b23      	ldr	r3, [pc, #140]	; (8003390 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b0c      	cmp	r3, #12
 800330c:	d136      	bne.n	800337c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800330e:	4b20      	ldr	r3, [pc, #128]	; (8003390 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003318:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <HAL_RCC_GetSysClockFreq+0xb8>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	3301      	adds	r3, #1
 8003324:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b03      	cmp	r3, #3
 800332a:	d10c      	bne.n	8003346 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800332c:	4a1a      	ldr	r2, [pc, #104]	; (8003398 <HAL_RCC_GetSysClockFreq+0xc0>)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	4a16      	ldr	r2, [pc, #88]	; (8003390 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003336:	68d2      	ldr	r2, [r2, #12]
 8003338:	0a12      	lsrs	r2, r2, #8
 800333a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800333e:	fb02 f303 	mul.w	r3, r2, r3
 8003342:	617b      	str	r3, [r7, #20]
      break;
 8003344:	e00c      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003346:	4a13      	ldr	r2, [pc, #76]	; (8003394 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	fbb2 f3f3 	udiv	r3, r2, r3
 800334e:	4a10      	ldr	r2, [pc, #64]	; (8003390 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003350:	68d2      	ldr	r2, [r2, #12]
 8003352:	0a12      	lsrs	r2, r2, #8
 8003354:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003358:	fb02 f303 	mul.w	r3, r2, r3
 800335c:	617b      	str	r3, [r7, #20]
      break;
 800335e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	0e5b      	lsrs	r3, r3, #25
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	3301      	adds	r3, #1
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	e001      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003380:	693b      	ldr	r3, [r7, #16]
}
 8003382:	4618      	mov	r0, r3
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
 8003394:	00f42400 	.word	0x00f42400
 8003398:	007a1200 	.word	0x007a1200

0800339c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a0:	4b03      	ldr	r3, [pc, #12]	; (80033b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20000004 	.word	0x20000004

080033b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033b8:	f7ff fff0 	bl	800339c <HAL_RCC_GetHCLKFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4904      	ldr	r1, [pc, #16]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40021000 	.word	0x40021000
 80033dc:	08009de4 	.word	0x08009de4

080033e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033e4:	f7ff ffda 	bl	800339c <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0adb      	lsrs	r3, r3, #11
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4904      	ldr	r1, [pc, #16]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	08009de4 	.word	0x08009de4

0800340c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003412:	4b1e      	ldr	r3, [pc, #120]	; (800348c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800341c:	4b1b      	ldr	r3, [pc, #108]	; (800348c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	3301      	adds	r3, #1
 8003428:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b03      	cmp	r3, #3
 800342e:	d10c      	bne.n	800344a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003430:	4a17      	ldr	r2, [pc, #92]	; (8003490 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	4a14      	ldr	r2, [pc, #80]	; (800348c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800343a:	68d2      	ldr	r2, [r2, #12]
 800343c:	0a12      	lsrs	r2, r2, #8
 800343e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	617b      	str	r3, [r7, #20]
    break;
 8003448:	e00c      	b.n	8003464 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800344a:	4a12      	ldr	r2, [pc, #72]	; (8003494 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003452:	4a0e      	ldr	r2, [pc, #56]	; (800348c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003454:	68d2      	ldr	r2, [r2, #12]
 8003456:	0a12      	lsrs	r2, r2, #8
 8003458:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800345c:	fb02 f303 	mul.w	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]
    break;
 8003462:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003464:	4b09      	ldr	r3, [pc, #36]	; (800348c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	0e5b      	lsrs	r3, r3, #25
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	3301      	adds	r3, #1
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	fbb2 f3f3 	udiv	r3, r2, r3
 800347c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800347e:	687b      	ldr	r3, [r7, #4]
}
 8003480:	4618      	mov	r0, r3
 8003482:	371c      	adds	r7, #28
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40021000 	.word	0x40021000
 8003490:	007a1200 	.word	0x007a1200
 8003494:	00f42400 	.word	0x00f42400

08003498 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034a0:	2300      	movs	r3, #0
 80034a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034a4:	2300      	movs	r3, #0
 80034a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 8098 	beq.w	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b6:	2300      	movs	r3, #0
 80034b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ba:	4b43      	ldr	r3, [pc, #268]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10d      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	4b40      	ldr	r3, [pc, #256]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ca:	4a3f      	ldr	r2, [pc, #252]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d0:	6593      	str	r3, [r2, #88]	; 0x58
 80034d2:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034de:	2301      	movs	r3, #1
 80034e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034e2:	4b3a      	ldr	r3, [pc, #232]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a39      	ldr	r2, [pc, #228]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034ee:	f7fe fe2f 	bl	8002150 <HAL_GetTick>
 80034f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034f4:	e009      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f6:	f7fe fe2b 	bl	8002150 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d902      	bls.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	74fb      	strb	r3, [r7, #19]
        break;
 8003508:	e005      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800350a:	4b30      	ldr	r3, [pc, #192]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0ef      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d159      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800351c:	4b2a      	ldr	r3, [pc, #168]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003526:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d01e      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	429a      	cmp	r2, r3
 8003536:	d019      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003538:	4b23      	ldr	r3, [pc, #140]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003542:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003544:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	4a1f      	ldr	r2, [pc, #124]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003554:	4b1c      	ldr	r3, [pc, #112]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355a:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800355c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003564:	4a18      	ldr	r2, [pc, #96]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d016      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7fe fdeb 	bl	8002150 <HAL_GetTick>
 800357a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357c:	e00b      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357e:	f7fe fde7 	bl	8002150 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f241 3288 	movw	r2, #5000	; 0x1388
 800358c:	4293      	cmp	r3, r2
 800358e:	d902      	bls.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	74fb      	strb	r3, [r7, #19]
            break;
 8003594:	e006      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ec      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10b      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	4903      	ldr	r1, [pc, #12]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035c0:	e008      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035c2:	7cfb      	ldrb	r3, [r7, #19]
 80035c4:	74bb      	strb	r3, [r7, #18]
 80035c6:	e005      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035d4:	7c7b      	ldrb	r3, [r7, #17]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d105      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035da:	4ba6      	ldr	r3, [pc, #664]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035de:	4aa5      	ldr	r2, [pc, #660]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035f2:	4ba0      	ldr	r3, [pc, #640]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f8:	f023 0203 	bic.w	r2, r3, #3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	499c      	ldr	r1, [pc, #624]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003614:	4b97      	ldr	r3, [pc, #604]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	f023 020c 	bic.w	r2, r3, #12
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	4994      	ldr	r1, [pc, #592]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003636:	4b8f      	ldr	r3, [pc, #572]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	498b      	ldr	r1, [pc, #556]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003658:	4b86      	ldr	r3, [pc, #536]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	4983      	ldr	r1, [pc, #524]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800367a:	4b7e      	ldr	r3, [pc, #504]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800367c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003680:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	497a      	ldr	r1, [pc, #488]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800369c:	4b75      	ldr	r3, [pc, #468]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	4972      	ldr	r1, [pc, #456]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036be:	4b6d      	ldr	r3, [pc, #436]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	4969      	ldr	r1, [pc, #420]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036e0:	4b64      	ldr	r3, [pc, #400]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	4961      	ldr	r1, [pc, #388]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003702:	4b5c      	ldr	r3, [pc, #368]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003708:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	4958      	ldr	r1, [pc, #352]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003720:	2b00      	cmp	r3, #0
 8003722:	d015      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003724:	4b53      	ldr	r3, [pc, #332]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	4950      	ldr	r1, [pc, #320]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003742:	d105      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003744:	4b4b      	ldr	r3, [pc, #300]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a4a      	ldr	r2, [pc, #296]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800374a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800374e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003758:	2b00      	cmp	r3, #0
 800375a:	d015      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800375c:	4b45      	ldr	r3, [pc, #276]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003762:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	4942      	ldr	r1, [pc, #264]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800377a:	d105      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800377c:	4b3d      	ldr	r3, [pc, #244]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	4a3c      	ldr	r2, [pc, #240]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003786:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d015      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003794:	4b37      	ldr	r3, [pc, #220]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	4934      	ldr	r1, [pc, #208]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b2:	d105      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037b4:	4b2f      	ldr	r3, [pc, #188]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4a2e      	ldr	r2, [pc, #184]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d015      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037cc:	4b29      	ldr	r3, [pc, #164]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037da:	4926      	ldr	r1, [pc, #152]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ea:	d105      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ec:	4b21      	ldr	r3, [pc, #132]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a20      	ldr	r2, [pc, #128]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d015      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003804:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	4918      	ldr	r1, [pc, #96]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003822:	d105      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003824:	4b13      	ldr	r3, [pc, #76]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4a12      	ldr	r2, [pc, #72]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800382a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800382e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d015      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800383c:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	490a      	ldr	r1, [pc, #40]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800385a:	d105      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4a04      	ldr	r2, [pc, #16]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003866:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003868:	7cbb      	ldrb	r3, [r7, #18]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000

08003878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e049      	b.n	800391e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fe fa62 	bl	8001d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	4610      	mov	r0, r2
 80038b8:	f000 ff7a 	bl	80047b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d001      	beq.n	8003940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e04a      	b.n	80039d6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a21      	ldr	r2, [pc, #132]	; (80039e4 <HAL_TIM_Base_Start_IT+0xbc>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d018      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x6c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396a:	d013      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x6c>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1d      	ldr	r2, [pc, #116]	; (80039e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00e      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x6c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1c      	ldr	r2, [pc, #112]	; (80039ec <HAL_TIM_Base_Start_IT+0xc4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d009      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x6c>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1a      	ldr	r2, [pc, #104]	; (80039f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d004      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x6c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a19      	ldr	r2, [pc, #100]	; (80039f4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d115      	bne.n	80039c0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800399c:	4013      	ands	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b06      	cmp	r3, #6
 80039a4:	d015      	beq.n	80039d2 <HAL_TIM_Base_Start_IT+0xaa>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ac:	d011      	beq.n	80039d2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0201 	orr.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039be:	e008      	b.n	80039d2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e000      	b.n	80039d4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40012c00 	.word	0x40012c00
 80039e8:	40000400 	.word	0x40000400
 80039ec:	40000800 	.word	0x40000800
 80039f0:	40013400 	.word	0x40013400
 80039f4:	40014000 	.word	0x40014000
 80039f8:	00010007 	.word	0x00010007

080039fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e049      	b.n	8003aa2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fe f93a 	bl	8001c9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f000 feb8 	bl	80047b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d109      	bne.n	8003ad0 <HAL_TIM_PWM_Start+0x24>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e03c      	b.n	8003b4a <HAL_TIM_PWM_Start+0x9e>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d109      	bne.n	8003aea <HAL_TIM_PWM_Start+0x3e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	bf14      	ite	ne
 8003ae2:	2301      	movne	r3, #1
 8003ae4:	2300      	moveq	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	e02f      	b.n	8003b4a <HAL_TIM_PWM_Start+0x9e>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d109      	bne.n	8003b04 <HAL_TIM_PWM_Start+0x58>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e022      	b.n	8003b4a <HAL_TIM_PWM_Start+0x9e>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d109      	bne.n	8003b1e <HAL_TIM_PWM_Start+0x72>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	bf14      	ite	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	2300      	moveq	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	e015      	b.n	8003b4a <HAL_TIM_PWM_Start+0x9e>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d109      	bne.n	8003b38 <HAL_TIM_PWM_Start+0x8c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	bf14      	ite	ne
 8003b30:	2301      	movne	r3, #1
 8003b32:	2300      	moveq	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	e008      	b.n	8003b4a <HAL_TIM_PWM_Start+0x9e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	bf14      	ite	ne
 8003b44:	2301      	movne	r3, #1
 8003b46:	2300      	moveq	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e097      	b.n	8003c82 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <HAL_TIM_PWM_Start+0xb6>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b60:	e023      	b.n	8003baa <HAL_TIM_PWM_Start+0xfe>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d104      	bne.n	8003b72 <HAL_TIM_PWM_Start+0xc6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b70:	e01b      	b.n	8003baa <HAL_TIM_PWM_Start+0xfe>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d104      	bne.n	8003b82 <HAL_TIM_PWM_Start+0xd6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b80:	e013      	b.n	8003baa <HAL_TIM_PWM_Start+0xfe>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b0c      	cmp	r3, #12
 8003b86:	d104      	bne.n	8003b92 <HAL_TIM_PWM_Start+0xe6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b90:	e00b      	b.n	8003baa <HAL_TIM_PWM_Start+0xfe>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d104      	bne.n	8003ba2 <HAL_TIM_PWM_Start+0xf6>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba0:	e003      	b.n	8003baa <HAL_TIM_PWM_Start+0xfe>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	6839      	ldr	r1, [r7, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f001 fa1e 	bl	8004ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a33      	ldr	r2, [pc, #204]	; (8003c8c <HAL_TIM_PWM_Start+0x1e0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d013      	beq.n	8003bea <HAL_TIM_PWM_Start+0x13e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a32      	ldr	r2, [pc, #200]	; (8003c90 <HAL_TIM_PWM_Start+0x1e4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00e      	beq.n	8003bea <HAL_TIM_PWM_Start+0x13e>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a30      	ldr	r2, [pc, #192]	; (8003c94 <HAL_TIM_PWM_Start+0x1e8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d009      	beq.n	8003bea <HAL_TIM_PWM_Start+0x13e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2f      	ldr	r2, [pc, #188]	; (8003c98 <HAL_TIM_PWM_Start+0x1ec>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d004      	beq.n	8003bea <HAL_TIM_PWM_Start+0x13e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2d      	ldr	r2, [pc, #180]	; (8003c9c <HAL_TIM_PWM_Start+0x1f0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d101      	bne.n	8003bee <HAL_TIM_PWM_Start+0x142>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <HAL_TIM_PWM_Start+0x144>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <HAL_TIM_PWM_Start+0x1e0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d018      	beq.n	8003c40 <HAL_TIM_PWM_Start+0x194>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c16:	d013      	beq.n	8003c40 <HAL_TIM_PWM_Start+0x194>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a20      	ldr	r2, [pc, #128]	; (8003ca0 <HAL_TIM_PWM_Start+0x1f4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00e      	beq.n	8003c40 <HAL_TIM_PWM_Start+0x194>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1f      	ldr	r2, [pc, #124]	; (8003ca4 <HAL_TIM_PWM_Start+0x1f8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d009      	beq.n	8003c40 <HAL_TIM_PWM_Start+0x194>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a17      	ldr	r2, [pc, #92]	; (8003c90 <HAL_TIM_PWM_Start+0x1e4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <HAL_TIM_PWM_Start+0x194>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a16      	ldr	r2, [pc, #88]	; (8003c94 <HAL_TIM_PWM_Start+0x1e8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d115      	bne.n	8003c6c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	4b18      	ldr	r3, [pc, #96]	; (8003ca8 <HAL_TIM_PWM_Start+0x1fc>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b06      	cmp	r3, #6
 8003c50:	d015      	beq.n	8003c7e <HAL_TIM_PWM_Start+0x1d2>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c58:	d011      	beq.n	8003c7e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0201 	orr.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6a:	e008      	b.n	8003c7e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e000      	b.n	8003c80 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40013400 	.word	0x40013400
 8003c94:	40014000 	.word	0x40014000
 8003c98:	40014400 	.word	0x40014400
 8003c9c:	40014800 	.word	0x40014800
 8003ca0:	40000400 	.word	0x40000400
 8003ca4:	40000800 	.word	0x40000800
 8003ca8:	00010007 	.word	0x00010007

08003cac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	6839      	ldr	r1, [r7, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f001 f998 	bl	8004ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a3e      	ldr	r2, [pc, #248]	; (8003dc4 <HAL_TIM_PWM_Stop+0x118>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d013      	beq.n	8003cf6 <HAL_TIM_PWM_Stop+0x4a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a3d      	ldr	r2, [pc, #244]	; (8003dc8 <HAL_TIM_PWM_Stop+0x11c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00e      	beq.n	8003cf6 <HAL_TIM_PWM_Stop+0x4a>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a3b      	ldr	r2, [pc, #236]	; (8003dcc <HAL_TIM_PWM_Stop+0x120>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d009      	beq.n	8003cf6 <HAL_TIM_PWM_Stop+0x4a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a3a      	ldr	r2, [pc, #232]	; (8003dd0 <HAL_TIM_PWM_Stop+0x124>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <HAL_TIM_PWM_Stop+0x4a>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a38      	ldr	r2, [pc, #224]	; (8003dd4 <HAL_TIM_PWM_Stop+0x128>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d101      	bne.n	8003cfa <HAL_TIM_PWM_Stop+0x4e>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <HAL_TIM_PWM_Stop+0x50>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d017      	beq.n	8003d30 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6a1a      	ldr	r2, [r3, #32]
 8003d06:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10f      	bne.n	8003d30 <HAL_TIM_PWM_Stop+0x84>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6a1a      	ldr	r2, [r3, #32]
 8003d16:	f244 4344 	movw	r3, #17476	; 0x4444
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d107      	bne.n	8003d30 <HAL_TIM_PWM_Stop+0x84>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6a1a      	ldr	r2, [r3, #32]
 8003d36:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10f      	bne.n	8003d60 <HAL_TIM_PWM_Stop+0xb4>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6a1a      	ldr	r2, [r3, #32]
 8003d46:	f244 4344 	movw	r3, #17476	; 0x4444
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d107      	bne.n	8003d60 <HAL_TIM_PWM_Stop+0xb4>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d104      	bne.n	8003d70 <HAL_TIM_PWM_Stop+0xc4>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d6e:	e023      	b.n	8003db8 <HAL_TIM_PWM_Stop+0x10c>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d104      	bne.n	8003d80 <HAL_TIM_PWM_Stop+0xd4>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d7e:	e01b      	b.n	8003db8 <HAL_TIM_PWM_Stop+0x10c>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d104      	bne.n	8003d90 <HAL_TIM_PWM_Stop+0xe4>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d8e:	e013      	b.n	8003db8 <HAL_TIM_PWM_Stop+0x10c>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d104      	bne.n	8003da0 <HAL_TIM_PWM_Stop+0xf4>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d9e:	e00b      	b.n	8003db8 <HAL_TIM_PWM_Stop+0x10c>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d104      	bne.n	8003db0 <HAL_TIM_PWM_Stop+0x104>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dae:	e003      	b.n	8003db8 <HAL_TIM_PWM_Stop+0x10c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40013400 	.word	0x40013400
 8003dcc:	40014000 	.word	0x40014000
 8003dd0:	40014400 	.word	0x40014400
 8003dd4:	40014800 	.word	0x40014800

08003dd8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e097      	b.n	8003f1c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d106      	bne.n	8003e06 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7fd ff71 	bl	8001ce8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003e1c:	f023 0307 	bic.w	r3, r3, #7
 8003e20:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f000 fcbf 	bl	80047b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5a:	f023 0303 	bic.w	r3, r3, #3
 8003e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e78:	f023 030c 	bic.w	r3, r3, #12
 8003e7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	4313      	orrs	r3, r2
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	011a      	lsls	r2, r3, #4
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	031b      	lsls	r3, r3, #12
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003eb6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003ebe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f34:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f3c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f44:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f4c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d110      	bne.n	8003f76 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d102      	bne.n	8003f60 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f5a:	7b7b      	ldrb	r3, [r7, #13]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d001      	beq.n	8003f64 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e069      	b.n	8004038 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f74:	e031      	b.n	8003fda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d110      	bne.n	8003f9e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f7c:	7bbb      	ldrb	r3, [r7, #14]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d102      	bne.n	8003f88 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f82:	7b3b      	ldrb	r3, [r7, #12]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d001      	beq.n	8003f8c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e055      	b.n	8004038 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f9c:	e01d      	b.n	8003fda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d108      	bne.n	8003fb6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fa4:	7bbb      	ldrb	r3, [r7, #14]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d105      	bne.n	8003fb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003faa:	7b7b      	ldrb	r3, [r7, #13]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d102      	bne.n	8003fb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fb0:	7b3b      	ldrb	r3, [r7, #12]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d001      	beq.n	8003fba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e03e      	b.n	8004038 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_TIM_Encoder_Start+0xc4>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d008      	beq.n	8003ff8 <HAL_TIM_Encoder_Start+0xd4>
 8003fe6:	e00f      	b.n	8004008 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2201      	movs	r2, #1
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 ffff 	bl	8004ff4 <TIM_CCxChannelCmd>
      break;
 8003ff6:	e016      	b.n	8004026 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	2104      	movs	r1, #4
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fff7 	bl	8004ff4 <TIM_CCxChannelCmd>
      break;
 8004006:	e00e      	b.n	8004026 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2201      	movs	r2, #1
 800400e:	2100      	movs	r1, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f000 ffef 	bl	8004ff4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2201      	movs	r2, #1
 800401c:	2104      	movs	r1, #4
 800401e:	4618      	mov	r0, r3
 8004020:	f000 ffe8 	bl	8004ff4 <TIM_CCxChannelCmd>
      break;
 8004024:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0201 	orr.w	r2, r2, #1
 8004034:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d122      	bne.n	800409c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b02      	cmp	r3, #2
 8004062:	d11b      	bne.n	800409c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0202 	mvn.w	r2, #2
 800406c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fb76 	bl	8004774 <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fb68 	bl	8004760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fb79 	bl	8004788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d122      	bne.n	80040f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d11b      	bne.n	80040f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0204 	mvn.w	r2, #4
 80040c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fb4c 	bl	8004774 <HAL_TIM_IC_CaptureCallback>
 80040dc:	e005      	b.n	80040ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fb3e 	bl	8004760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fb4f 	bl	8004788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d122      	bne.n	8004144 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b08      	cmp	r3, #8
 800410a:	d11b      	bne.n	8004144 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0208 	mvn.w	r2, #8
 8004114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2204      	movs	r2, #4
 800411a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fb22 	bl	8004774 <HAL_TIM_IC_CaptureCallback>
 8004130:	e005      	b.n	800413e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fb14 	bl	8004760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fb25 	bl	8004788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b10      	cmp	r3, #16
 8004150:	d122      	bne.n	8004198 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b10      	cmp	r3, #16
 800415e:	d11b      	bne.n	8004198 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0210 	mvn.w	r2, #16
 8004168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2208      	movs	r2, #8
 800416e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 faf8 	bl	8004774 <HAL_TIM_IC_CaptureCallback>
 8004184:	e005      	b.n	8004192 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 faea 	bl	8004760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fafb 	bl	8004788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d10e      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d107      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0201 	mvn.w	r2, #1
 80041bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fac4 	bl	800474c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	2b80      	cmp	r3, #128	; 0x80
 80041d0:	d10e      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041dc:	2b80      	cmp	r3, #128	; 0x80
 80041de:	d107      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f001 f966 	bl	80054bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fe:	d10e      	bne.n	800421e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	2b80      	cmp	r3, #128	; 0x80
 800420c:	d107      	bne.n	800421e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f001 f959 	bl	80054d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b40      	cmp	r3, #64	; 0x40
 800422a:	d10e      	bne.n	800424a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d107      	bne.n	800424a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 faa9 	bl	800479c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	2b20      	cmp	r3, #32
 8004256:	d10e      	bne.n	8004276 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b20      	cmp	r3, #32
 8004264:	d107      	bne.n	8004276 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f06f 0220 	mvn.w	r2, #32
 800426e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f001 f919 	bl	80054a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004284:	d10f      	bne.n	80042a6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004294:	d107      	bne.n	80042a6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800429e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f001 f91f 	bl	80054e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042b4:	d10f      	bne.n	80042d6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042c4:	d107      	bne.n	80042d6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80042ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f001 f911 	bl	80054f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042e4:	d10f      	bne.n	8004306 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f4:	d107      	bne.n	8004306 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80042fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f001 f903 	bl	800550c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004310:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004314:	d10f      	bne.n	8004336 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004320:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004324:	d107      	bne.n	8004336 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800432e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f001 f8f5 	bl	8005520 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004336:	bf00      	nop
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004356:	2302      	movs	r3, #2
 8004358:	e0fd      	b.n	8004556 <HAL_TIM_PWM_ConfigChannel+0x216>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b14      	cmp	r3, #20
 8004366:	f200 80f0 	bhi.w	800454a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800436a:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	080043c5 	.word	0x080043c5
 8004374:	0800454b 	.word	0x0800454b
 8004378:	0800454b 	.word	0x0800454b
 800437c:	0800454b 	.word	0x0800454b
 8004380:	08004405 	.word	0x08004405
 8004384:	0800454b 	.word	0x0800454b
 8004388:	0800454b 	.word	0x0800454b
 800438c:	0800454b 	.word	0x0800454b
 8004390:	08004447 	.word	0x08004447
 8004394:	0800454b 	.word	0x0800454b
 8004398:	0800454b 	.word	0x0800454b
 800439c:	0800454b 	.word	0x0800454b
 80043a0:	08004487 	.word	0x08004487
 80043a4:	0800454b 	.word	0x0800454b
 80043a8:	0800454b 	.word	0x0800454b
 80043ac:	0800454b 	.word	0x0800454b
 80043b0:	080044c9 	.word	0x080044c9
 80043b4:	0800454b 	.word	0x0800454b
 80043b8:	0800454b 	.word	0x0800454b
 80043bc:	0800454b 	.word	0x0800454b
 80043c0:	08004509 	.word	0x08004509
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fa80 	bl	80048d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0208 	orr.w	r2, r2, #8
 80043de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0204 	bic.w	r2, r2, #4
 80043ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6999      	ldr	r1, [r3, #24]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	619a      	str	r2, [r3, #24]
      break;
 8004402:	e0a3      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	4618      	mov	r0, r3
 800440c:	f000 faf0 	bl	80049f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800441e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6999      	ldr	r1, [r3, #24]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	021a      	lsls	r2, r3, #8
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	619a      	str	r2, [r3, #24]
      break;
 8004444:	e082      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fb59 	bl	8004b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0208 	orr.w	r2, r2, #8
 8004460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0204 	bic.w	r2, r2, #4
 8004470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69d9      	ldr	r1, [r3, #28]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	61da      	str	r2, [r3, #28]
      break;
 8004484:	e062      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fbc1 	bl	8004c14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69d9      	ldr	r1, [r3, #28]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	021a      	lsls	r2, r3, #8
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	61da      	str	r2, [r3, #28]
      break;
 80044c6:	e041      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fc2a 	bl	8004d28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0208 	orr.w	r2, r2, #8
 80044e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0204 	bic.w	r2, r2, #4
 80044f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004506:	e021      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fc6e 	bl	8004df0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004522:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004532:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	021a      	lsls	r2, r3, #8
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004548:	e000      	b.n	800454c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800454a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop

08004560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_TIM_ConfigClockSource+0x18>
 8004574:	2302      	movs	r3, #2
 8004576:	e0dd      	b.n	8004734 <HAL_TIM_ConfigClockSource+0x1d4>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004596:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800459a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a62      	ldr	r2, [pc, #392]	; (800473c <HAL_TIM_ConfigClockSource+0x1dc>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	f000 80a9 	beq.w	800470a <HAL_TIM_ConfigClockSource+0x1aa>
 80045b8:	4a60      	ldr	r2, [pc, #384]	; (800473c <HAL_TIM_ConfigClockSource+0x1dc>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	f200 80ae 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x1bc>
 80045c0:	4a5f      	ldr	r2, [pc, #380]	; (8004740 <HAL_TIM_ConfigClockSource+0x1e0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	f000 80a1 	beq.w	800470a <HAL_TIM_ConfigClockSource+0x1aa>
 80045c8:	4a5d      	ldr	r2, [pc, #372]	; (8004740 <HAL_TIM_ConfigClockSource+0x1e0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	f200 80a6 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x1bc>
 80045d0:	4a5c      	ldr	r2, [pc, #368]	; (8004744 <HAL_TIM_ConfigClockSource+0x1e4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	f000 8099 	beq.w	800470a <HAL_TIM_ConfigClockSource+0x1aa>
 80045d8:	4a5a      	ldr	r2, [pc, #360]	; (8004744 <HAL_TIM_ConfigClockSource+0x1e4>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	f200 809e 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x1bc>
 80045e0:	4a59      	ldr	r2, [pc, #356]	; (8004748 <HAL_TIM_ConfigClockSource+0x1e8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	f000 8091 	beq.w	800470a <HAL_TIM_ConfigClockSource+0x1aa>
 80045e8:	4a57      	ldr	r2, [pc, #348]	; (8004748 <HAL_TIM_ConfigClockSource+0x1e8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	f200 8096 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x1bc>
 80045f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045f4:	f000 8089 	beq.w	800470a <HAL_TIM_ConfigClockSource+0x1aa>
 80045f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045fc:	f200 808e 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x1bc>
 8004600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004604:	d03e      	beq.n	8004684 <HAL_TIM_ConfigClockSource+0x124>
 8004606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800460a:	f200 8087 	bhi.w	800471c <HAL_TIM_ConfigClockSource+0x1bc>
 800460e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004612:	f000 8085 	beq.w	8004720 <HAL_TIM_ConfigClockSource+0x1c0>
 8004616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461a:	d87f      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x1bc>
 800461c:	2b70      	cmp	r3, #112	; 0x70
 800461e:	d01a      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0xf6>
 8004620:	2b70      	cmp	r3, #112	; 0x70
 8004622:	d87b      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x1bc>
 8004624:	2b60      	cmp	r3, #96	; 0x60
 8004626:	d050      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x16a>
 8004628:	2b60      	cmp	r3, #96	; 0x60
 800462a:	d877      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x1bc>
 800462c:	2b50      	cmp	r3, #80	; 0x50
 800462e:	d03c      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x14a>
 8004630:	2b50      	cmp	r3, #80	; 0x50
 8004632:	d873      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x1bc>
 8004634:	2b40      	cmp	r3, #64	; 0x40
 8004636:	d058      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0x18a>
 8004638:	2b40      	cmp	r3, #64	; 0x40
 800463a:	d86f      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x1bc>
 800463c:	2b30      	cmp	r3, #48	; 0x30
 800463e:	d064      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x1aa>
 8004640:	2b30      	cmp	r3, #48	; 0x30
 8004642:	d86b      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x1bc>
 8004644:	2b20      	cmp	r3, #32
 8004646:	d060      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x1aa>
 8004648:	2b20      	cmp	r3, #32
 800464a:	d867      	bhi.n	800471c <HAL_TIM_ConfigClockSource+0x1bc>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d05c      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x1aa>
 8004650:	2b10      	cmp	r3, #16
 8004652:	d05a      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004654:	e062      	b.n	800471c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6899      	ldr	r1, [r3, #8]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f000 fca5 	bl	8004fb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004678:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	609a      	str	r2, [r3, #8]
      break;
 8004682:	e04e      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	6899      	ldr	r1, [r3, #8]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f000 fc8e 	bl	8004fb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046a6:	609a      	str	r2, [r3, #8]
      break;
 80046a8:	e03b      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6859      	ldr	r1, [r3, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f000 fc00 	bl	8004ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2150      	movs	r1, #80	; 0x50
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fc59 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 80046c8:	e02b      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6859      	ldr	r1, [r3, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	461a      	mov	r2, r3
 80046d8:	f000 fc1f 	bl	8004f1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2160      	movs	r1, #96	; 0x60
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fc49 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 80046e8:	e01b      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6859      	ldr	r1, [r3, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	461a      	mov	r2, r3
 80046f8:	f000 fbe0 	bl	8004ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2140      	movs	r1, #64	; 0x40
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fc39 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 8004708:	e00b      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4619      	mov	r1, r3
 8004714:	4610      	mov	r0, r2
 8004716:	f000 fc30 	bl	8004f7a <TIM_ITRx_SetConfig>
        break;
 800471a:	e002      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800471c:	bf00      	nop
 800471e:	e000      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8004720:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	00100070 	.word	0x00100070
 8004740:	00100040 	.word	0x00100040
 8004744:	00100030 	.word	0x00100030
 8004748:	00100020 	.word	0x00100020

0800474c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a3c      	ldr	r2, [pc, #240]	; (80048b4 <TIM_Base_SetConfig+0x104>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00f      	beq.n	80047e8 <TIM_Base_SetConfig+0x38>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ce:	d00b      	beq.n	80047e8 <TIM_Base_SetConfig+0x38>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a39      	ldr	r2, [pc, #228]	; (80048b8 <TIM_Base_SetConfig+0x108>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d007      	beq.n	80047e8 <TIM_Base_SetConfig+0x38>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a38      	ldr	r2, [pc, #224]	; (80048bc <TIM_Base_SetConfig+0x10c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d003      	beq.n	80047e8 <TIM_Base_SetConfig+0x38>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a37      	ldr	r2, [pc, #220]	; (80048c0 <TIM_Base_SetConfig+0x110>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d108      	bne.n	80047fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a2d      	ldr	r2, [pc, #180]	; (80048b4 <TIM_Base_SetConfig+0x104>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d01b      	beq.n	800483a <TIM_Base_SetConfig+0x8a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004808:	d017      	beq.n	800483a <TIM_Base_SetConfig+0x8a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a2a      	ldr	r2, [pc, #168]	; (80048b8 <TIM_Base_SetConfig+0x108>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <TIM_Base_SetConfig+0x8a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a29      	ldr	r2, [pc, #164]	; (80048bc <TIM_Base_SetConfig+0x10c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00f      	beq.n	800483a <TIM_Base_SetConfig+0x8a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a28      	ldr	r2, [pc, #160]	; (80048c0 <TIM_Base_SetConfig+0x110>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00b      	beq.n	800483a <TIM_Base_SetConfig+0x8a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a27      	ldr	r2, [pc, #156]	; (80048c4 <TIM_Base_SetConfig+0x114>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d007      	beq.n	800483a <TIM_Base_SetConfig+0x8a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a26      	ldr	r2, [pc, #152]	; (80048c8 <TIM_Base_SetConfig+0x118>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d003      	beq.n	800483a <TIM_Base_SetConfig+0x8a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a25      	ldr	r2, [pc, #148]	; (80048cc <TIM_Base_SetConfig+0x11c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d108      	bne.n	800484c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a10      	ldr	r2, [pc, #64]	; (80048b4 <TIM_Base_SetConfig+0x104>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00f      	beq.n	8004898 <TIM_Base_SetConfig+0xe8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a11      	ldr	r2, [pc, #68]	; (80048c0 <TIM_Base_SetConfig+0x110>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00b      	beq.n	8004898 <TIM_Base_SetConfig+0xe8>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a10      	ldr	r2, [pc, #64]	; (80048c4 <TIM_Base_SetConfig+0x114>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d007      	beq.n	8004898 <TIM_Base_SetConfig+0xe8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a0f      	ldr	r2, [pc, #60]	; (80048c8 <TIM_Base_SetConfig+0x118>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_Base_SetConfig+0xe8>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a0e      	ldr	r2, [pc, #56]	; (80048cc <TIM_Base_SetConfig+0x11c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d103      	bne.n	80048a0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	615a      	str	r2, [r3, #20]
}
 80048a6:	bf00      	nop
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40000400 	.word	0x40000400
 80048bc:	40000800 	.word	0x40000800
 80048c0:	40013400 	.word	0x40013400
 80048c4:	40014000 	.word	0x40014000
 80048c8:	40014400 	.word	0x40014400
 80048cc:	40014800 	.word	0x40014800

080048d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f023 0201 	bic.w	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0303 	bic.w	r3, r3, #3
 800490a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 0302 	bic.w	r3, r3, #2
 800491c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a2c      	ldr	r2, [pc, #176]	; (80049dc <TIM_OC1_SetConfig+0x10c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00f      	beq.n	8004950 <TIM_OC1_SetConfig+0x80>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a2b      	ldr	r2, [pc, #172]	; (80049e0 <TIM_OC1_SetConfig+0x110>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00b      	beq.n	8004950 <TIM_OC1_SetConfig+0x80>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a2a      	ldr	r2, [pc, #168]	; (80049e4 <TIM_OC1_SetConfig+0x114>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d007      	beq.n	8004950 <TIM_OC1_SetConfig+0x80>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a29      	ldr	r2, [pc, #164]	; (80049e8 <TIM_OC1_SetConfig+0x118>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d003      	beq.n	8004950 <TIM_OC1_SetConfig+0x80>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a28      	ldr	r2, [pc, #160]	; (80049ec <TIM_OC1_SetConfig+0x11c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d10c      	bne.n	800496a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f023 0308 	bic.w	r3, r3, #8
 8004956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f023 0304 	bic.w	r3, r3, #4
 8004968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a1b      	ldr	r2, [pc, #108]	; (80049dc <TIM_OC1_SetConfig+0x10c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00f      	beq.n	8004992 <TIM_OC1_SetConfig+0xc2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a1a      	ldr	r2, [pc, #104]	; (80049e0 <TIM_OC1_SetConfig+0x110>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00b      	beq.n	8004992 <TIM_OC1_SetConfig+0xc2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a19      	ldr	r2, [pc, #100]	; (80049e4 <TIM_OC1_SetConfig+0x114>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d007      	beq.n	8004992 <TIM_OC1_SetConfig+0xc2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <TIM_OC1_SetConfig+0x118>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_OC1_SetConfig+0xc2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a17      	ldr	r2, [pc, #92]	; (80049ec <TIM_OC1_SetConfig+0x11c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d111      	bne.n	80049b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	621a      	str	r2, [r3, #32]
}
 80049d0:	bf00      	nop
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	40012c00 	.word	0x40012c00
 80049e0:	40013400 	.word	0x40013400
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40014400 	.word	0x40014400
 80049ec:	40014800 	.word	0x40014800

080049f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0210 	bic.w	r2, r3, #16
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f023 0320 	bic.w	r3, r3, #32
 8004a3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a28      	ldr	r2, [pc, #160]	; (8004af0 <TIM_OC2_SetConfig+0x100>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d003      	beq.n	8004a5c <TIM_OC2_SetConfig+0x6c>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a27      	ldr	r2, [pc, #156]	; (8004af4 <TIM_OC2_SetConfig+0x104>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d10d      	bne.n	8004a78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <TIM_OC2_SetConfig+0x100>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00f      	beq.n	8004aa0 <TIM_OC2_SetConfig+0xb0>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a1c      	ldr	r2, [pc, #112]	; (8004af4 <TIM_OC2_SetConfig+0x104>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00b      	beq.n	8004aa0 <TIM_OC2_SetConfig+0xb0>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a1b      	ldr	r2, [pc, #108]	; (8004af8 <TIM_OC2_SetConfig+0x108>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d007      	beq.n	8004aa0 <TIM_OC2_SetConfig+0xb0>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a1a      	ldr	r2, [pc, #104]	; (8004afc <TIM_OC2_SetConfig+0x10c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <TIM_OC2_SetConfig+0xb0>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a19      	ldr	r2, [pc, #100]	; (8004b00 <TIM_OC2_SetConfig+0x110>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d113      	bne.n	8004ac8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	621a      	str	r2, [r3, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40012c00 	.word	0x40012c00
 8004af4:	40013400 	.word	0x40013400
 8004af8:	40014000 	.word	0x40014000
 8004afc:	40014400 	.word	0x40014400
 8004b00:	40014800 	.word	0x40014800

08004b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0303 	bic.w	r3, r3, #3
 8004b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a27      	ldr	r2, [pc, #156]	; (8004c00 <TIM_OC3_SetConfig+0xfc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d003      	beq.n	8004b6e <TIM_OC3_SetConfig+0x6a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a26      	ldr	r2, [pc, #152]	; (8004c04 <TIM_OC3_SetConfig+0x100>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d10d      	bne.n	8004b8a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a1c      	ldr	r2, [pc, #112]	; (8004c00 <TIM_OC3_SetConfig+0xfc>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00f      	beq.n	8004bb2 <TIM_OC3_SetConfig+0xae>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a1b      	ldr	r2, [pc, #108]	; (8004c04 <TIM_OC3_SetConfig+0x100>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00b      	beq.n	8004bb2 <TIM_OC3_SetConfig+0xae>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a1a      	ldr	r2, [pc, #104]	; (8004c08 <TIM_OC3_SetConfig+0x104>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d007      	beq.n	8004bb2 <TIM_OC3_SetConfig+0xae>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <TIM_OC3_SetConfig+0x108>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_OC3_SetConfig+0xae>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <TIM_OC3_SetConfig+0x10c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d113      	bne.n	8004bda <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	621a      	str	r2, [r3, #32]
}
 8004bf4:	bf00      	nop
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	40012c00 	.word	0x40012c00
 8004c04:	40013400 	.word	0x40013400
 8004c08:	40014000 	.word	0x40014000
 8004c0c:	40014400 	.word	0x40014400
 8004c10:	40014800 	.word	0x40014800

08004c14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	021b      	lsls	r3, r3, #8
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	031b      	lsls	r3, r3, #12
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a28      	ldr	r2, [pc, #160]	; (8004d14 <TIM_OC4_SetConfig+0x100>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d003      	beq.n	8004c80 <TIM_OC4_SetConfig+0x6c>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <TIM_OC4_SetConfig+0x104>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d10d      	bne.n	8004c9c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	031b      	lsls	r3, r3, #12
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <TIM_OC4_SetConfig+0x100>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00f      	beq.n	8004cc4 <TIM_OC4_SetConfig+0xb0>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <TIM_OC4_SetConfig+0x104>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00b      	beq.n	8004cc4 <TIM_OC4_SetConfig+0xb0>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a1b      	ldr	r2, [pc, #108]	; (8004d1c <TIM_OC4_SetConfig+0x108>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d007      	beq.n	8004cc4 <TIM_OC4_SetConfig+0xb0>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a1a      	ldr	r2, [pc, #104]	; (8004d20 <TIM_OC4_SetConfig+0x10c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_OC4_SetConfig+0xb0>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a19      	ldr	r2, [pc, #100]	; (8004d24 <TIM_OC4_SetConfig+0x110>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d113      	bne.n	8004cec <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cd2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	019b      	lsls	r3, r3, #6
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	019b      	lsls	r3, r3, #6
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40013400 	.word	0x40013400
 8004d1c:	40014000 	.word	0x40014000
 8004d20:	40014400 	.word	0x40014400
 8004d24:	40014800 	.word	0x40014800

08004d28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	041b      	lsls	r3, r3, #16
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <TIM_OC5_SetConfig+0xb4>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00f      	beq.n	8004da2 <TIM_OC5_SetConfig+0x7a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a16      	ldr	r2, [pc, #88]	; (8004de0 <TIM_OC5_SetConfig+0xb8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00b      	beq.n	8004da2 <TIM_OC5_SetConfig+0x7a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a15      	ldr	r2, [pc, #84]	; (8004de4 <TIM_OC5_SetConfig+0xbc>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d007      	beq.n	8004da2 <TIM_OC5_SetConfig+0x7a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <TIM_OC5_SetConfig+0xc0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d003      	beq.n	8004da2 <TIM_OC5_SetConfig+0x7a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a13      	ldr	r2, [pc, #76]	; (8004dec <TIM_OC5_SetConfig+0xc4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d109      	bne.n	8004db6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	621a      	str	r2, [r3, #32]
}
 8004dd0:	bf00      	nop
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	40012c00 	.word	0x40012c00
 8004de0:	40013400 	.word	0x40013400
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40014400 	.word	0x40014400
 8004dec:	40014800 	.word	0x40014800

08004df0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	021b      	lsls	r3, r3, #8
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	051b      	lsls	r3, r3, #20
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a18      	ldr	r2, [pc, #96]	; (8004ea8 <TIM_OC6_SetConfig+0xb8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00f      	beq.n	8004e6c <TIM_OC6_SetConfig+0x7c>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a17      	ldr	r2, [pc, #92]	; (8004eac <TIM_OC6_SetConfig+0xbc>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00b      	beq.n	8004e6c <TIM_OC6_SetConfig+0x7c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a16      	ldr	r2, [pc, #88]	; (8004eb0 <TIM_OC6_SetConfig+0xc0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d007      	beq.n	8004e6c <TIM_OC6_SetConfig+0x7c>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a15      	ldr	r2, [pc, #84]	; (8004eb4 <TIM_OC6_SetConfig+0xc4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d003      	beq.n	8004e6c <TIM_OC6_SetConfig+0x7c>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a14      	ldr	r2, [pc, #80]	; (8004eb8 <TIM_OC6_SetConfig+0xc8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d109      	bne.n	8004e80 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	029b      	lsls	r3, r3, #10
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	621a      	str	r2, [r3, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40013400 	.word	0x40013400
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40014400 	.word	0x40014400
 8004eb8:	40014800 	.word	0x40014800

08004ebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f023 0201 	bic.w	r2, r3, #1
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 030a 	bic.w	r3, r3, #10
 8004ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b087      	sub	sp, #28
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	f023 0210 	bic.w	r2, r3, #16
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	031b      	lsls	r3, r3, #12
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f043 0307 	orr.w	r3, r3, #7
 8004fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	609a      	str	r2, [r3, #8]
}
 8004fa8:	bf00      	nop
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	021a      	lsls	r2, r3, #8
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	609a      	str	r2, [r3, #8]
}
 8004fe8:	bf00      	nop
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f003 031f 	and.w	r3, r3, #31
 8005006:	2201      	movs	r2, #1
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a1a      	ldr	r2, [r3, #32]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	43db      	mvns	r3, r3
 8005016:	401a      	ands	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a1a      	ldr	r2, [r3, #32]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	fa01 f303 	lsl.w	r3, r1, r3
 800502c:	431a      	orrs	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d109      	bne.n	8005064 <HAL_TIMEx_PWMN_Start+0x24>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b01      	cmp	r3, #1
 800505a:	bf14      	ite	ne
 800505c:	2301      	movne	r3, #1
 800505e:	2300      	moveq	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	e022      	b.n	80050aa <HAL_TIMEx_PWMN_Start+0x6a>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b04      	cmp	r3, #4
 8005068:	d109      	bne.n	800507e <HAL_TIMEx_PWMN_Start+0x3e>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b01      	cmp	r3, #1
 8005074:	bf14      	ite	ne
 8005076:	2301      	movne	r3, #1
 8005078:	2300      	moveq	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	e015      	b.n	80050aa <HAL_TIMEx_PWMN_Start+0x6a>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d109      	bne.n	8005098 <HAL_TIMEx_PWMN_Start+0x58>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	bf14      	ite	ne
 8005090:	2301      	movne	r3, #1
 8005092:	2300      	moveq	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	e008      	b.n	80050aa <HAL_TIMEx_PWMN_Start+0x6a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	bf14      	ite	ne
 80050a4:	2301      	movne	r3, #1
 80050a6:	2300      	moveq	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e069      	b.n	8005186 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d104      	bne.n	80050c2 <HAL_TIMEx_PWMN_Start+0x82>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c0:	e013      	b.n	80050ea <HAL_TIMEx_PWMN_Start+0xaa>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d104      	bne.n	80050d2 <HAL_TIMEx_PWMN_Start+0x92>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050d0:	e00b      	b.n	80050ea <HAL_TIMEx_PWMN_Start+0xaa>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d104      	bne.n	80050e2 <HAL_TIMEx_PWMN_Start+0xa2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050e0:	e003      	b.n	80050ea <HAL_TIMEx_PWMN_Start+0xaa>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2202      	movs	r2, #2
 80050e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2204      	movs	r2, #4
 80050f0:	6839      	ldr	r1, [r7, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fa1e 	bl	8005534 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005106:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a20      	ldr	r2, [pc, #128]	; (8005190 <HAL_TIMEx_PWMN_Start+0x150>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d018      	beq.n	8005144 <HAL_TIMEx_PWMN_Start+0x104>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511a:	d013      	beq.n	8005144 <HAL_TIMEx_PWMN_Start+0x104>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a1c      	ldr	r2, [pc, #112]	; (8005194 <HAL_TIMEx_PWMN_Start+0x154>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00e      	beq.n	8005144 <HAL_TIMEx_PWMN_Start+0x104>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1b      	ldr	r2, [pc, #108]	; (8005198 <HAL_TIMEx_PWMN_Start+0x158>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d009      	beq.n	8005144 <HAL_TIMEx_PWMN_Start+0x104>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a19      	ldr	r2, [pc, #100]	; (800519c <HAL_TIMEx_PWMN_Start+0x15c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d004      	beq.n	8005144 <HAL_TIMEx_PWMN_Start+0x104>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <HAL_TIMEx_PWMN_Start+0x160>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d115      	bne.n	8005170 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	4b16      	ldr	r3, [pc, #88]	; (80051a4 <HAL_TIMEx_PWMN_Start+0x164>)
 800514c:	4013      	ands	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b06      	cmp	r3, #6
 8005154:	d015      	beq.n	8005182 <HAL_TIMEx_PWMN_Start+0x142>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515c:	d011      	beq.n	8005182 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0201 	orr.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516e:	e008      	b.n	8005182 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e000      	b.n	8005184 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005182:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40012c00 	.word	0x40012c00
 8005194:	40000400 	.word	0x40000400
 8005198:	40000800 	.word	0x40000800
 800519c:	40013400 	.word	0x40013400
 80051a0:	40014000 	.word	0x40014000
 80051a4:	00010007 	.word	0x00010007

080051a8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2200      	movs	r2, #0
 80051b8:	6839      	ldr	r1, [r7, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 f9ba 	bl	8005534 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6a1a      	ldr	r2, [r3, #32]
 80051c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80051ca:	4013      	ands	r3, r2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10f      	bne.n	80051f0 <HAL_TIMEx_PWMN_Stop+0x48>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6a1a      	ldr	r2, [r3, #32]
 80051d6:	f244 4344 	movw	r3, #17476	; 0x4444
 80051da:	4013      	ands	r3, r2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d107      	bne.n	80051f0 <HAL_TIMEx_PWMN_Stop+0x48>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6a1a      	ldr	r2, [r3, #32]
 80051f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10f      	bne.n	8005220 <HAL_TIMEx_PWMN_Stop+0x78>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6a1a      	ldr	r2, [r3, #32]
 8005206:	f244 4344 	movw	r3, #17476	; 0x4444
 800520a:	4013      	ands	r3, r2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d107      	bne.n	8005220 <HAL_TIMEx_PWMN_Stop+0x78>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0201 	bic.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d104      	bne.n	8005230 <HAL_TIMEx_PWMN_Stop+0x88>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800522e:	e013      	b.n	8005258 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b04      	cmp	r3, #4
 8005234:	d104      	bne.n	8005240 <HAL_TIMEx_PWMN_Stop+0x98>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800523e:	e00b      	b.n	8005258 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b08      	cmp	r3, #8
 8005244:	d104      	bne.n	8005250 <HAL_TIMEx_PWMN_Stop+0xa8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800524e:	e003      	b.n	8005258 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005278:	2302      	movs	r3, #2
 800527a:	e065      	b.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a2c      	ldr	r2, [pc, #176]	; (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d004      	beq.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a2b      	ldr	r2, [pc, #172]	; (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d108      	bne.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80052c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1b      	ldr	r2, [pc, #108]	; (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d018      	beq.n	800531c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f2:	d013      	beq.n	800531c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a18      	ldr	r2, [pc, #96]	; (800535c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00e      	beq.n	800531c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a17      	ldr	r2, [pc, #92]	; (8005360 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d009      	beq.n	800531c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a12      	ldr	r2, [pc, #72]	; (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d004      	beq.n	800531c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a13      	ldr	r2, [pc, #76]	; (8005364 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d10c      	bne.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005322:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	4313      	orrs	r3, r2
 800532c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	40012c00 	.word	0x40012c00
 8005358:	40013400 	.word	0x40013400
 800535c:	40000400 	.word	0x40000400
 8005360:	40000800 	.word	0x40000800
 8005364:	40014000 	.word	0x40014000

08005368 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005380:	2302      	movs	r3, #2
 8005382:	e087      	b.n	8005494 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	041b      	lsls	r3, r3, #16
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a27      	ldr	r2, [pc, #156]	; (80054a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d004      	beq.n	8005412 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a25      	ldr	r2, [pc, #148]	; (80054a4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d106      	bne.n	8005420 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1e      	ldr	r2, [pc, #120]	; (80054a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1d      	ldr	r2, [pc, #116]	; (80054a4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d126      	bne.n	8005482 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	051b      	lsls	r3, r3, #20
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a0e      	ldr	r2, [pc, #56]	; (80054a0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d004      	beq.n	8005474 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a0d      	ldr	r2, [pc, #52]	; (80054a4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d106      	bne.n	8005482 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	40012c00 	.word	0x40012c00
 80054a4:	40013400 	.word	0x40013400

080054a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	2204      	movs	r2, #4
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a1a      	ldr	r2, [r3, #32]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	43db      	mvns	r3, r3
 8005556:	401a      	ands	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a1a      	ldr	r2, [r3, #32]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	fa01 f303 	lsl.w	r3, r1, r3
 800556c:	431a      	orrs	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e042      	b.n	8005616 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fc fcfc 	bl	8001fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2224      	movs	r2, #36	; 0x24
 80055ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fb5d 	bl	8005c80 <UART_SetConfig>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e022      	b.n	8005616 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fdef 	bl	80061bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0201 	orr.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fe76 	bl	8006300 <UART_CheckIdleState>
 8005614:	4603      	mov	r3, r0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b08a      	sub	sp, #40	; 0x28
 8005622:	af02      	add	r7, sp, #8
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	4613      	mov	r3, r2
 800562c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005634:	2b20      	cmp	r3, #32
 8005636:	f040 8083 	bne.w	8005740 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <HAL_UART_Transmit+0x28>
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e07b      	b.n	8005742 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_UART_Transmit+0x3a>
 8005654:	2302      	movs	r3, #2
 8005656:	e074      	b.n	8005742 <HAL_UART_Transmit+0x124>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2221      	movs	r2, #33	; 0x21
 800566c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005670:	f7fc fd6e 	bl	8002150 <HAL_GetTick>
 8005674:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	88fa      	ldrh	r2, [r7, #6]
 800567a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	88fa      	ldrh	r2, [r7, #6]
 8005682:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568e:	d108      	bne.n	80056a2 <HAL_UART_Transmit+0x84>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d104      	bne.n	80056a2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005698:	2300      	movs	r3, #0
 800569a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	e003      	b.n	80056aa <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80056b2:	e02c      	b.n	800570e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2200      	movs	r2, #0
 80056bc:	2180      	movs	r1, #128	; 0x80
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fe69 	bl	8006396 <UART_WaitOnFlagUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e039      	b.n	8005742 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10b      	bne.n	80056ec <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	3302      	adds	r3, #2
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	e007      	b.n	80056fc <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	781a      	ldrb	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	3301      	adds	r3, #1
 80056fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005702:	b29b      	uxth	r3, r3
 8005704:	3b01      	subs	r3, #1
 8005706:	b29a      	uxth	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1cc      	bne.n	80056b4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2200      	movs	r2, #0
 8005722:	2140      	movs	r1, #64	; 0x40
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fe36 	bl	8006396 <UART_WaitOnFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e006      	b.n	8005742 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	e000      	b.n	8005742 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005740:	2302      	movs	r3, #2
  }
}
 8005742:	4618      	mov	r0, r3
 8005744:	3720      	adds	r7, #32
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	4613      	mov	r3, r2
 8005758:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005760:	2b20      	cmp	r3, #32
 8005762:	d131      	bne.n	80057c8 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_UART_Receive_IT+0x24>
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e02a      	b.n	80057ca <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_UART_Receive_IT+0x36>
 800577e:	2302      	movs	r3, #2
 8005780:	e023      	b.n	80057ca <HAL_UART_Receive_IT+0x7e>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a0f      	ldr	r2, [pc, #60]	; (80057d4 <HAL_UART_Receive_IT+0x88>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d00e      	beq.n	80057b8 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80057b6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	461a      	mov	r2, r3
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 fe6a 	bl	8006498 <UART_Start_Receive_IT>
 80057c4:	4603      	mov	r3, r0
 80057c6:	e000      	b.n	80057ca <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80057c8:	2302      	movs	r3, #2
  }
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40008000 	.word	0x40008000

080057d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80057fe:	4013      	ands	r3, r2
 8005800:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d118      	bne.n	800583a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d013      	beq.n	800583a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d104      	bne.n	8005826 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d009      	beq.n	800583a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 81fb 	beq.w	8005c26 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	4798      	blx	r3
      }
      return;
 8005838:	e1f5      	b.n	8005c26 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80ef 	beq.w	8005a20 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4b73      	ldr	r3, [pc, #460]	; (8005a14 <HAL_UART_IRQHandler+0x23c>)
 8005846:	4013      	ands	r3, r2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d105      	bne.n	8005858 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	4b72      	ldr	r3, [pc, #456]	; (8005a18 <HAL_UART_IRQHandler+0x240>)
 8005850:	4013      	ands	r3, r2
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 80e4 	beq.w	8005a20 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d010      	beq.n	8005884 <HAL_UART_IRQHandler+0xac>
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2201      	movs	r2, #1
 8005872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800587a:	f043 0201 	orr.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d010      	beq.n	80058b0 <HAL_UART_IRQHandler+0xd8>
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00b      	beq.n	80058b0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2202      	movs	r2, #2
 800589e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058a6:	f043 0204 	orr.w	r2, r3, #4
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d010      	beq.n	80058dc <HAL_UART_IRQHandler+0x104>
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00b      	beq.n	80058dc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2204      	movs	r2, #4
 80058ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058d2:	f043 0202 	orr.w	r2, r3, #2
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f003 0308 	and.w	r3, r3, #8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d015      	beq.n	8005912 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d104      	bne.n	80058fa <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4b48      	ldr	r3, [pc, #288]	; (8005a14 <HAL_UART_IRQHandler+0x23c>)
 80058f4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00b      	beq.n	8005912 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2208      	movs	r2, #8
 8005900:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005908:	f043 0208 	orr.w	r2, r3, #8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005918:	2b00      	cmp	r3, #0
 800591a:	d011      	beq.n	8005940 <HAL_UART_IRQHandler+0x168>
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00c      	beq.n	8005940 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800592e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005936:	f043 0220 	orr.w	r2, r3, #32
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 816f 	beq.w	8005c2a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d011      	beq.n	800597a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d007      	beq.n	800597a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005980:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598c:	2b40      	cmp	r3, #64	; 0x40
 800598e:	d004      	beq.n	800599a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005996:	2b00      	cmp	r3, #0
 8005998:	d031      	beq.n	80059fe <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fe3a 	bl	8006614 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059aa:	2b40      	cmp	r3, #64	; 0x40
 80059ac:	d123      	bne.n	80059f6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059bc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d013      	beq.n	80059ee <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ca:	4a14      	ldr	r2, [pc, #80]	; (8005a1c <HAL_UART_IRQHandler+0x244>)
 80059cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fc fd52 	bl	800247c <HAL_DMA_Abort_IT>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d017      	beq.n	8005a0e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80059e8:	4610      	mov	r0, r2
 80059ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ec:	e00f      	b.n	8005a0e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f930 	bl	8005c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f4:	e00b      	b.n	8005a0e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f92c 	bl	8005c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059fc:	e007      	b.n	8005a0e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f928 	bl	8005c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005a0c:	e10d      	b.n	8005c2a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0e:	bf00      	nop
    return;
 8005a10:	e10b      	b.n	8005c2a <HAL_UART_IRQHandler+0x452>
 8005a12:	bf00      	nop
 8005a14:	10000001 	.word	0x10000001
 8005a18:	04000120 	.word	0x04000120
 8005a1c:	08006679 	.word	0x08006679

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	f040 80ab 	bne.w	8005b80 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80a5 	beq.w	8005b80 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 809f 	beq.w	8005b80 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2210      	movs	r2, #16
 8005a48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a54:	2b40      	cmp	r3, #64	; 0x40
 8005a56:	d155      	bne.n	8005b04 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005a62:	893b      	ldrh	r3, [r7, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 80e2 	beq.w	8005c2e <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a70:	893a      	ldrh	r2, [r7, #8]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	f080 80db 	bcs.w	8005c2e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	893a      	ldrh	r2, [r7, #8]
 8005a7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d12b      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a9e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0201 	bic.w	r2, r2, #1
 8005aae:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689a      	ldr	r2, [r3, #8]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005abe:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0210 	bic.w	r2, r2, #16
 8005adc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fc fc71 	bl	80023ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	4619      	mov	r1, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f8b3 	bl	8005c68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b02:	e094      	b.n	8005c2e <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 8087 	beq.w	8005c32 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8005b24:	897b      	ldrh	r3, [r7, #10]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 8083 	beq.w	8005c32 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b3a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6812      	ldr	r2, [r2, #0]
 8005b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0210 	bic.w	r2, r2, #16
 8005b72:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b74:	897b      	ldrh	r3, [r7, #10]
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f875 	bl	8005c68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b7e:	e058      	b.n	8005c32 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00d      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x3ce>
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d008      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f001 f876 	bl	8006c90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ba4:	e048      	b.n	8005c38 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d012      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d104      	bne.n	8005bc4 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d008      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d034      	beq.n	8005c36 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	4798      	blx	r3
    }
    return;
 8005bd4:	e02f      	b.n	8005c36 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d008      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x41a>
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fd5a 	bl	80066a4 <UART_EndTransmit_IT>
    return;
 8005bf0:	e022      	b.n	8005c38 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_UART_IRQHandler+0x436>
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f001 f856 	bl	8006cb8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c0c:	e014      	b.n	8005c38 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00f      	beq.n	8005c38 <HAL_UART_IRQHandler+0x460>
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	da0c      	bge.n	8005c38 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f001 f840 	bl	8006ca4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c24:	e008      	b.n	8005c38 <HAL_UART_IRQHandler+0x460>
      return;
 8005c26:	bf00      	nop
 8005c28:	e006      	b.n	8005c38 <HAL_UART_IRQHandler+0x460>
    return;
 8005c2a:	bf00      	nop
 8005c2c:	e004      	b.n	8005c38 <HAL_UART_IRQHandler+0x460>
      return;
 8005c2e:	bf00      	nop
 8005c30:	e002      	b.n	8005c38 <HAL_UART_IRQHandler+0x460>
      return;
 8005c32:	bf00      	nop
 8005c34:	e000      	b.n	8005c38 <HAL_UART_IRQHandler+0x460>
    return;
 8005c36:	bf00      	nop
  }
}
 8005c38:	3720      	adds	r7, #32
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop

08005c40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c80:	b5b0      	push	{r4, r5, r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4baf      	ldr	r3, [pc, #700]	; (8005f68 <UART_SetConfig+0x2e8>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	69f9      	ldr	r1, [r7, #28]
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4aa4      	ldr	r2, [pc, #656]	; (8005f6c <UART_SetConfig+0x2ec>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d004      	beq.n	8005ce8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005cf2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6812      	ldr	r2, [r2, #0]
 8005cfa:	69f9      	ldr	r1, [r7, #28]
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	f023 010f 	bic.w	r1, r3, #15
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a95      	ldr	r2, [pc, #596]	; (8005f70 <UART_SetConfig+0x2f0>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d120      	bne.n	8005d62 <UART_SetConfig+0xe2>
 8005d20:	4b94      	ldr	r3, [pc, #592]	; (8005f74 <UART_SetConfig+0x2f4>)
 8005d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d816      	bhi.n	8005d5c <UART_SetConfig+0xdc>
 8005d2e:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <UART_SetConfig+0xb4>)
 8005d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d34:	08005d45 	.word	0x08005d45
 8005d38:	08005d51 	.word	0x08005d51
 8005d3c:	08005d4b 	.word	0x08005d4b
 8005d40:	08005d57 	.word	0x08005d57
 8005d44:	2301      	movs	r3, #1
 8005d46:	76fb      	strb	r3, [r7, #27]
 8005d48:	e0bc      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	76fb      	strb	r3, [r7, #27]
 8005d4e:	e0b9      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005d50:	2304      	movs	r3, #4
 8005d52:	76fb      	strb	r3, [r7, #27]
 8005d54:	e0b6      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005d56:	2308      	movs	r3, #8
 8005d58:	76fb      	strb	r3, [r7, #27]
 8005d5a:	e0b3      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	76fb      	strb	r3, [r7, #27]
 8005d60:	e0b0      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a84      	ldr	r2, [pc, #528]	; (8005f78 <UART_SetConfig+0x2f8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d132      	bne.n	8005dd2 <UART_SetConfig+0x152>
 8005d6c:	4b81      	ldr	r3, [pc, #516]	; (8005f74 <UART_SetConfig+0x2f4>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d72:	f003 030c 	and.w	r3, r3, #12
 8005d76:	2b0c      	cmp	r3, #12
 8005d78:	d828      	bhi.n	8005dcc <UART_SetConfig+0x14c>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <UART_SetConfig+0x100>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005db5 	.word	0x08005db5
 8005d84:	08005dcd 	.word	0x08005dcd
 8005d88:	08005dcd 	.word	0x08005dcd
 8005d8c:	08005dcd 	.word	0x08005dcd
 8005d90:	08005dc1 	.word	0x08005dc1
 8005d94:	08005dcd 	.word	0x08005dcd
 8005d98:	08005dcd 	.word	0x08005dcd
 8005d9c:	08005dcd 	.word	0x08005dcd
 8005da0:	08005dbb 	.word	0x08005dbb
 8005da4:	08005dcd 	.word	0x08005dcd
 8005da8:	08005dcd 	.word	0x08005dcd
 8005dac:	08005dcd 	.word	0x08005dcd
 8005db0:	08005dc7 	.word	0x08005dc7
 8005db4:	2300      	movs	r3, #0
 8005db6:	76fb      	strb	r3, [r7, #27]
 8005db8:	e084      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	76fb      	strb	r3, [r7, #27]
 8005dbe:	e081      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005dc0:	2304      	movs	r3, #4
 8005dc2:	76fb      	strb	r3, [r7, #27]
 8005dc4:	e07e      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	76fb      	strb	r3, [r7, #27]
 8005dca:	e07b      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	76fb      	strb	r3, [r7, #27]
 8005dd0:	e078      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a69      	ldr	r2, [pc, #420]	; (8005f7c <UART_SetConfig+0x2fc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d120      	bne.n	8005e1e <UART_SetConfig+0x19e>
 8005ddc:	4b65      	ldr	r3, [pc, #404]	; (8005f74 <UART_SetConfig+0x2f4>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005de6:	2b30      	cmp	r3, #48	; 0x30
 8005de8:	d013      	beq.n	8005e12 <UART_SetConfig+0x192>
 8005dea:	2b30      	cmp	r3, #48	; 0x30
 8005dec:	d814      	bhi.n	8005e18 <UART_SetConfig+0x198>
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	d009      	beq.n	8005e06 <UART_SetConfig+0x186>
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d810      	bhi.n	8005e18 <UART_SetConfig+0x198>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <UART_SetConfig+0x180>
 8005dfa:	2b10      	cmp	r3, #16
 8005dfc:	d006      	beq.n	8005e0c <UART_SetConfig+0x18c>
 8005dfe:	e00b      	b.n	8005e18 <UART_SetConfig+0x198>
 8005e00:	2300      	movs	r3, #0
 8005e02:	76fb      	strb	r3, [r7, #27]
 8005e04:	e05e      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005e06:	2302      	movs	r3, #2
 8005e08:	76fb      	strb	r3, [r7, #27]
 8005e0a:	e05b      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	76fb      	strb	r3, [r7, #27]
 8005e10:	e058      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005e12:	2308      	movs	r3, #8
 8005e14:	76fb      	strb	r3, [r7, #27]
 8005e16:	e055      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005e18:	2310      	movs	r3, #16
 8005e1a:	76fb      	strb	r3, [r7, #27]
 8005e1c:	e052      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a57      	ldr	r2, [pc, #348]	; (8005f80 <UART_SetConfig+0x300>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d120      	bne.n	8005e6a <UART_SetConfig+0x1ea>
 8005e28:	4b52      	ldr	r3, [pc, #328]	; (8005f74 <UART_SetConfig+0x2f4>)
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e32:	2bc0      	cmp	r3, #192	; 0xc0
 8005e34:	d013      	beq.n	8005e5e <UART_SetConfig+0x1de>
 8005e36:	2bc0      	cmp	r3, #192	; 0xc0
 8005e38:	d814      	bhi.n	8005e64 <UART_SetConfig+0x1e4>
 8005e3a:	2b80      	cmp	r3, #128	; 0x80
 8005e3c:	d009      	beq.n	8005e52 <UART_SetConfig+0x1d2>
 8005e3e:	2b80      	cmp	r3, #128	; 0x80
 8005e40:	d810      	bhi.n	8005e64 <UART_SetConfig+0x1e4>
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <UART_SetConfig+0x1cc>
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	d006      	beq.n	8005e58 <UART_SetConfig+0x1d8>
 8005e4a:	e00b      	b.n	8005e64 <UART_SetConfig+0x1e4>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	76fb      	strb	r3, [r7, #27]
 8005e50:	e038      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005e52:	2302      	movs	r3, #2
 8005e54:	76fb      	strb	r3, [r7, #27]
 8005e56:	e035      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	76fb      	strb	r3, [r7, #27]
 8005e5c:	e032      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005e5e:	2308      	movs	r3, #8
 8005e60:	76fb      	strb	r3, [r7, #27]
 8005e62:	e02f      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005e64:	2310      	movs	r3, #16
 8005e66:	76fb      	strb	r3, [r7, #27]
 8005e68:	e02c      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a3f      	ldr	r2, [pc, #252]	; (8005f6c <UART_SetConfig+0x2ec>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d125      	bne.n	8005ec0 <UART_SetConfig+0x240>
 8005e74:	4b3f      	ldr	r3, [pc, #252]	; (8005f74 <UART_SetConfig+0x2f4>)
 8005e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e82:	d017      	beq.n	8005eb4 <UART_SetConfig+0x234>
 8005e84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e88:	d817      	bhi.n	8005eba <UART_SetConfig+0x23a>
 8005e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e8e:	d00b      	beq.n	8005ea8 <UART_SetConfig+0x228>
 8005e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e94:	d811      	bhi.n	8005eba <UART_SetConfig+0x23a>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <UART_SetConfig+0x222>
 8005e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e9e:	d006      	beq.n	8005eae <UART_SetConfig+0x22e>
 8005ea0:	e00b      	b.n	8005eba <UART_SetConfig+0x23a>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	76fb      	strb	r3, [r7, #27]
 8005ea6:	e00d      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	76fb      	strb	r3, [r7, #27]
 8005eac:	e00a      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005eae:	2304      	movs	r3, #4
 8005eb0:	76fb      	strb	r3, [r7, #27]
 8005eb2:	e007      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005eb4:	2308      	movs	r3, #8
 8005eb6:	76fb      	strb	r3, [r7, #27]
 8005eb8:	e004      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005eba:	2310      	movs	r3, #16
 8005ebc:	76fb      	strb	r3, [r7, #27]
 8005ebe:	e001      	b.n	8005ec4 <UART_SetConfig+0x244>
 8005ec0:	2310      	movs	r3, #16
 8005ec2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a28      	ldr	r2, [pc, #160]	; (8005f6c <UART_SetConfig+0x2ec>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	f040 809e 	bne.w	800600c <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ed0:	7efb      	ldrb	r3, [r7, #27]
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d823      	bhi.n	8005f1e <UART_SetConfig+0x29e>
 8005ed6:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <UART_SetConfig+0x25c>)
 8005ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005edc:	08005f01 	.word	0x08005f01
 8005ee0:	08005f1f 	.word	0x08005f1f
 8005ee4:	08005f09 	.word	0x08005f09
 8005ee8:	08005f1f 	.word	0x08005f1f
 8005eec:	08005f0f 	.word	0x08005f0f
 8005ef0:	08005f1f 	.word	0x08005f1f
 8005ef4:	08005f1f 	.word	0x08005f1f
 8005ef8:	08005f1f 	.word	0x08005f1f
 8005efc:	08005f17 	.word	0x08005f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f00:	f7fd fa58 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 8005f04:	6178      	str	r0, [r7, #20]
        break;
 8005f06:	e00f      	b.n	8005f28 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f08:	4b1e      	ldr	r3, [pc, #120]	; (8005f84 <UART_SetConfig+0x304>)
 8005f0a:	617b      	str	r3, [r7, #20]
        break;
 8005f0c:	e00c      	b.n	8005f28 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f0e:	f7fd f9e3 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 8005f12:	6178      	str	r0, [r7, #20]
        break;
 8005f14:	e008      	b.n	8005f28 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f1a:	617b      	str	r3, [r7, #20]
        break;
 8005f1c:	e004      	b.n	8005f28 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	76bb      	strb	r3, [r7, #26]
        break;
 8005f26:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 812e 	beq.w	800618c <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	4a14      	ldr	r2, [pc, #80]	; (8005f88 <UART_SetConfig+0x308>)
 8005f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f42:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	4413      	add	r3, r2
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d305      	bcc.n	8005f60 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d915      	bls.n	8005f8c <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	76bb      	strb	r3, [r7, #26]
 8005f64:	e112      	b.n	800618c <UART_SetConfig+0x50c>
 8005f66:	bf00      	nop
 8005f68:	cfff69f3 	.word	0xcfff69f3
 8005f6c:	40008000 	.word	0x40008000
 8005f70:	40013800 	.word	0x40013800
 8005f74:	40021000 	.word	0x40021000
 8005f78:	40004400 	.word	0x40004400
 8005f7c:	40004800 	.word	0x40004800
 8005f80:	40004c00 	.word	0x40004c00
 8005f84:	00f42400 	.word	0x00f42400
 8005f88:	08009dec 	.word	0x08009dec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f04f 0100 	mov.w	r1, #0
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	4a86      	ldr	r2, [pc, #536]	; (80061b4 <UART_SetConfig+0x534>)
 8005f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	f7fa fe28 	bl	8000bf8 <__aeabi_uldivmod>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4610      	mov	r0, r2
 8005fae:	4619      	mov	r1, r3
 8005fb0:	f04f 0200 	mov.w	r2, #0
 8005fb4:	f04f 0300 	mov.w	r3, #0
 8005fb8:	020b      	lsls	r3, r1, #8
 8005fba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fbe:	0202      	lsls	r2, r0, #8
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	6849      	ldr	r1, [r1, #4]
 8005fc4:	0849      	lsrs	r1, r1, #1
 8005fc6:	4608      	mov	r0, r1
 8005fc8:	f04f 0100 	mov.w	r1, #0
 8005fcc:	1814      	adds	r4, r2, r0
 8005fce:	eb43 0501 	adc.w	r5, r3, r1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	4620      	mov	r0, r4
 8005fde:	4629      	mov	r1, r5
 8005fe0:	f7fa fe0a 	bl	8000bf8 <__aeabi_uldivmod>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4613      	mov	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ff2:	d308      	bcc.n	8006006 <UART_SetConfig+0x386>
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ffa:	d204      	bcs.n	8006006 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	60da      	str	r2, [r3, #12]
 8006004:	e0c2      	b.n	800618c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	76bb      	strb	r3, [r7, #26]
 800600a:	e0bf      	b.n	800618c <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006014:	d165      	bne.n	80060e2 <UART_SetConfig+0x462>
  {
    switch (clocksource)
 8006016:	7efb      	ldrb	r3, [r7, #27]
 8006018:	2b08      	cmp	r3, #8
 800601a:	d828      	bhi.n	800606e <UART_SetConfig+0x3ee>
 800601c:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <UART_SetConfig+0x3a4>)
 800601e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006022:	bf00      	nop
 8006024:	08006049 	.word	0x08006049
 8006028:	08006051 	.word	0x08006051
 800602c:	08006059 	.word	0x08006059
 8006030:	0800606f 	.word	0x0800606f
 8006034:	0800605f 	.word	0x0800605f
 8006038:	0800606f 	.word	0x0800606f
 800603c:	0800606f 	.word	0x0800606f
 8006040:	0800606f 	.word	0x0800606f
 8006044:	08006067 	.word	0x08006067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006048:	f7fd f9b4 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 800604c:	6178      	str	r0, [r7, #20]
        break;
 800604e:	e013      	b.n	8006078 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006050:	f7fd f9c6 	bl	80033e0 <HAL_RCC_GetPCLK2Freq>
 8006054:	6178      	str	r0, [r7, #20]
        break;
 8006056:	e00f      	b.n	8006078 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006058:	4b57      	ldr	r3, [pc, #348]	; (80061b8 <UART_SetConfig+0x538>)
 800605a:	617b      	str	r3, [r7, #20]
        break;
 800605c:	e00c      	b.n	8006078 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800605e:	f7fd f93b 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 8006062:	6178      	str	r0, [r7, #20]
        break;
 8006064:	e008      	b.n	8006078 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800606a:	617b      	str	r3, [r7, #20]
        break;
 800606c:	e004      	b.n	8006078 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	76bb      	strb	r3, [r7, #26]
        break;
 8006076:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 8086 	beq.w	800618c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	4a4b      	ldr	r2, [pc, #300]	; (80061b4 <UART_SetConfig+0x534>)
 8006086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800608a:	461a      	mov	r2, r3
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006092:	005a      	lsls	r2, r3, #1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	085b      	lsrs	r3, r3, #1
 800609a:	441a      	add	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2b0f      	cmp	r3, #15
 80060ac:	d916      	bls.n	80060dc <UART_SetConfig+0x45c>
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b4:	d212      	bcs.n	80060dc <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	f023 030f 	bic.w	r3, r3, #15
 80060be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	085b      	lsrs	r3, r3, #1
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	f003 0307 	and.w	r3, r3, #7
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	89fb      	ldrh	r3, [r7, #14]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	89fa      	ldrh	r2, [r7, #14]
 80060d8:	60da      	str	r2, [r3, #12]
 80060da:	e057      	b.n	800618c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	76bb      	strb	r3, [r7, #26]
 80060e0:	e054      	b.n	800618c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060e2:	7efb      	ldrb	r3, [r7, #27]
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d828      	bhi.n	800613a <UART_SetConfig+0x4ba>
 80060e8:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <UART_SetConfig+0x470>)
 80060ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ee:	bf00      	nop
 80060f0:	08006115 	.word	0x08006115
 80060f4:	0800611d 	.word	0x0800611d
 80060f8:	08006125 	.word	0x08006125
 80060fc:	0800613b 	.word	0x0800613b
 8006100:	0800612b 	.word	0x0800612b
 8006104:	0800613b 	.word	0x0800613b
 8006108:	0800613b 	.word	0x0800613b
 800610c:	0800613b 	.word	0x0800613b
 8006110:	08006133 	.word	0x08006133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006114:	f7fd f94e 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 8006118:	6178      	str	r0, [r7, #20]
        break;
 800611a:	e013      	b.n	8006144 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800611c:	f7fd f960 	bl	80033e0 <HAL_RCC_GetPCLK2Freq>
 8006120:	6178      	str	r0, [r7, #20]
        break;
 8006122:	e00f      	b.n	8006144 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006124:	4b24      	ldr	r3, [pc, #144]	; (80061b8 <UART_SetConfig+0x538>)
 8006126:	617b      	str	r3, [r7, #20]
        break;
 8006128:	e00c      	b.n	8006144 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800612a:	f7fd f8d5 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 800612e:	6178      	str	r0, [r7, #20]
        break;
 8006130:	e008      	b.n	8006144 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006136:	617b      	str	r3, [r7, #20]
        break;
 8006138:	e004      	b.n	8006144 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	76bb      	strb	r3, [r7, #26]
        break;
 8006142:	bf00      	nop
    }

    if (pclk != 0U)
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d020      	beq.n	800618c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	4a19      	ldr	r2, [pc, #100]	; (80061b4 <UART_SetConfig+0x534>)
 8006150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006154:	461a      	mov	r2, r3
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	fbb3 f2f2 	udiv	r2, r3, r2
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	085b      	lsrs	r3, r3, #1
 8006162:	441a      	add	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	fbb2 f3f3 	udiv	r3, r2, r3
 800616c:	b29b      	uxth	r3, r3
 800616e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2b0f      	cmp	r3, #15
 8006174:	d908      	bls.n	8006188 <UART_SetConfig+0x508>
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800617c:	d204      	bcs.n	8006188 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	60da      	str	r2, [r3, #12]
 8006186:	e001      	b.n	800618c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80061a8:	7ebb      	ldrb	r3, [r7, #26]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3720      	adds	r7, #32
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bdb0      	pop	{r4, r5, r7, pc}
 80061b2:	bf00      	nop
 80061b4:	08009dec 	.word	0x08009dec
 80061b8:	00f42400 	.word	0x00f42400

080061bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006298:	2b00      	cmp	r3, #0
 800629a:	d01a      	beq.n	80062d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ba:	d10a      	bne.n	80062d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	605a      	str	r2, [r3, #4]
  }
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af02      	add	r7, sp, #8
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006310:	f7fb ff1e 	bl	8002150 <HAL_GetTick>
 8006314:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b08      	cmp	r3, #8
 8006322:	d10e      	bne.n	8006342 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006324:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f82f 	bl	8006396 <UART_WaitOnFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e025      	b.n	800638e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b04      	cmp	r3, #4
 800634e:	d10e      	bne.n	800636e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006350:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f819 	bl	8006396 <UART_WaitOnFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e00f      	b.n	800638e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2220      	movs	r2, #32
 8006372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2220      	movs	r2, #32
 800637a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	60f8      	str	r0, [r7, #12]
 800639e:	60b9      	str	r1, [r7, #8]
 80063a0:	603b      	str	r3, [r7, #0]
 80063a2:	4613      	mov	r3, r2
 80063a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a6:	e062      	b.n	800646e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d05e      	beq.n	800646e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b0:	f7fb fece 	bl	8002150 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d302      	bcc.n	80063c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d11d      	bne.n	8006402 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e045      	b.n	800648e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	d02e      	beq.n	800646e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800641a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800641e:	d126      	bne.n	800646e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006428:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006438:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0201 	bic.w	r2, r2, #1
 8006448:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2220      	movs	r2, #32
 8006456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e00f      	b.n	800648e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4013      	ands	r3, r2
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	429a      	cmp	r2, r3
 800647c:	bf0c      	ite	eq
 800647e:	2301      	moveq	r3, #1
 8006480:	2300      	movne	r3, #0
 8006482:	b2db      	uxtb	r3, r3
 8006484:	461a      	mov	r2, r3
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	429a      	cmp	r2, r3
 800648a:	d08d      	beq.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	4613      	mov	r3, r2
 80064a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	88fa      	ldrh	r2, [r7, #6]
 80064b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	88fa      	ldrh	r2, [r7, #6]
 80064b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ca:	d10e      	bne.n	80064ea <UART_Start_Receive_IT+0x52>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d105      	bne.n	80064e0 <UART_Start_Receive_IT+0x48>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80064da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064de:	e02d      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	22ff      	movs	r2, #255	; 0xff
 80064e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064e8:	e028      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10d      	bne.n	800650e <UART_Start_Receive_IT+0x76>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d104      	bne.n	8006504 <UART_Start_Receive_IT+0x6c>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	22ff      	movs	r2, #255	; 0xff
 80064fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006502:	e01b      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	227f      	movs	r2, #127	; 0x7f
 8006508:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800650c:	e016      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006516:	d10d      	bne.n	8006534 <UART_Start_Receive_IT+0x9c>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d104      	bne.n	800652a <UART_Start_Receive_IT+0x92>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	227f      	movs	r2, #127	; 0x7f
 8006524:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006528:	e008      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	223f      	movs	r2, #63	; 0x3f
 800652e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006532:	e003      	b.n	800653c <UART_Start_Receive_IT+0xa4>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2222      	movs	r2, #34	; 0x22
 8006548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689a      	ldr	r2, [r3, #8]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006564:	d12a      	bne.n	80065bc <UART_Start_Receive_IT+0x124>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800656c:	88fa      	ldrh	r2, [r7, #6]
 800656e:	429a      	cmp	r2, r3
 8006570:	d324      	bcc.n	80065bc <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657a:	d107      	bne.n	800658c <UART_Start_Receive_IT+0xf4>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d103      	bne.n	800658c <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4a1f      	ldr	r2, [pc, #124]	; (8006604 <UART_Start_Receive_IT+0x16c>)
 8006588:	671a      	str	r2, [r3, #112]	; 0x70
 800658a:	e002      	b.n	8006592 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <UART_Start_Receive_IT+0x170>)
 8006590:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065a8:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80065b8:	609a      	str	r2, [r3, #8]
 80065ba:	e01b      	b.n	80065f4 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c4:	d107      	bne.n	80065d6 <UART_Start_Receive_IT+0x13e>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d103      	bne.n	80065d6 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4a0e      	ldr	r2, [pc, #56]	; (800660c <UART_Start_Receive_IT+0x174>)
 80065d2:	671a      	str	r2, [r3, #112]	; 0x70
 80065d4:	e002      	b.n	80065dc <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4a0d      	ldr	r2, [pc, #52]	; (8006610 <UART_Start_Receive_IT+0x178>)
 80065da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80065f2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	08006a8d 	.word	0x08006a8d
 8006608:	08006889 	.word	0x08006889
 800660c:	080067b1 	.word	0x080067b1
 8006610:	080066d9 	.word	0x080066d9

08006614 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800662a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6812      	ldr	r2, [r2, #0]
 8006636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800663a:	f023 0301 	bic.w	r3, r3, #1
 800663e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006644:	2b01      	cmp	r3, #1
 8006646:	d107      	bne.n	8006658 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0210 	bic.w	r2, r2, #16
 8006656:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2220      	movs	r2, #32
 800665c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f7ff fadc 	bl	8005c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800669c:	bf00      	nop
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ba:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2220      	movs	r2, #32
 80066c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff fab8 	bl	8005c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80066e6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ee:	2b22      	cmp	r3, #34	; 0x22
 80066f0:	d152      	bne.n	8006798 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066fa:	89bb      	ldrh	r3, [r7, #12]
 80066fc:	b2d9      	uxtb	r1, r3
 80066fe:	89fb      	ldrh	r3, [r7, #14]
 8006700:	b2da      	uxtb	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006706:	400a      	ands	r2, r1
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b01      	subs	r3, #1
 8006720:	b29a      	uxth	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d139      	bne.n	80067a8 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006742:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0201 	bic.w	r2, r2, #1
 8006752:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2220      	movs	r2, #32
 8006758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006766:	2b01      	cmp	r3, #1
 8006768:	d10f      	bne.n	800678a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0210 	bic.w	r2, r2, #16
 8006778:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff fa70 	bl	8005c68 <HAL_UARTEx_RxEventCallback>
 8006788:	e002      	b.n	8006790 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fa ff44 	bl	8001618 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006796:	e007      	b.n	80067a8 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0208 	orr.w	r2, r2, #8
 80067a6:	619a      	str	r2, [r3, #24]
}
 80067a8:	bf00      	nop
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067be:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c6:	2b22      	cmp	r3, #34	; 0x22
 80067c8:	d152      	bne.n	8006870 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80067d8:	89ba      	ldrh	r2, [r7, #12]
 80067da:	89fb      	ldrh	r3, [r7, #14]
 80067dc:	4013      	ands	r3, r2
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e8:	1c9a      	adds	r2, r3, #2
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006806:	b29b      	uxth	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	d139      	bne.n	8006880 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800681a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0201 	bic.w	r2, r2, #1
 800682a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2220      	movs	r2, #32
 8006830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800683e:	2b01      	cmp	r3, #1
 8006840:	d10f      	bne.n	8006862 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0210 	bic.w	r2, r2, #16
 8006850:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7ff fa04 	bl	8005c68 <HAL_UARTEx_RxEventCallback>
 8006860:	e002      	b.n	8006868 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fa fed8 	bl	8001618 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800686e:	e007      	b.n	8006880 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0208 	orr.w	r2, r2, #8
 800687e:	619a      	str	r2, [r3, #24]
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b088      	sub	sp, #32
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006896:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b6:	2b22      	cmp	r3, #34	; 0x22
 80068b8:	f040 80da 	bne.w	8006a70 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80068c2:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068c4:	e0aa      	b.n	8006a1c <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068ce:	89bb      	ldrh	r3, [r7, #12]
 80068d0:	b2d9      	uxtb	r1, r3
 80068d2:	8b7b      	ldrh	r3, [r7, #26]
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068da:	400a      	ands	r2, r1
 80068dc:	b2d2      	uxtb	r2, r2
 80068de:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	2b00      	cmp	r3, #0
 800690c:	d04d      	beq.n	80069aa <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	d010      	beq.n	800693a <UART_RxISR_8BIT_FIFOEN+0xb2>
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00b      	beq.n	800693a <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2201      	movs	r2, #1
 8006928:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006930:	f043 0201 	orr.w	r2, r3, #1
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d010      	beq.n	8006966 <UART_RxISR_8BIT_FIFOEN+0xde>
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00b      	beq.n	8006966 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2202      	movs	r2, #2
 8006954:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800695c:	f043 0204 	orr.w	r2, r3, #4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d010      	beq.n	8006992 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00b      	beq.n	8006992 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2204      	movs	r2, #4
 8006980:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006988:	f043 0202 	orr.w	r2, r3, #2
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d006      	beq.n	80069aa <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff f959 	bl	8005c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d132      	bne.n	8006a1c <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069c4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6812      	ldr	r2, [r2, #0]
 80069d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069d4:	f023 0301 	bic.w	r3, r3, #1
 80069d8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2220      	movs	r2, #32
 80069de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d10f      	bne.n	8006a10 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0210 	bic.w	r2, r2, #16
 80069fe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff f92d 	bl	8005c68 <HAL_UARTEx_RxEventCallback>
 8006a0e:	e002      	b.n	8006a16 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7fa fe01 	bl	8001618 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a1c:	89fb      	ldrh	r3, [r7, #14]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <UART_RxISR_8BIT_FIFOEN+0x1a6>
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f47f af4c 	bne.w	80068c6 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a34:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a36:	897b      	ldrh	r3, [r7, #10]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d021      	beq.n	8006a80 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a42:	897a      	ldrh	r2, [r7, #10]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d21b      	bcs.n	8006a80 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006a56:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a0b      	ldr	r2, [pc, #44]	; (8006a88 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8006a5c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f042 0220 	orr.w	r2, r2, #32
 8006a6c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a6e:	e007      	b.n	8006a80 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	699a      	ldr	r2, [r3, #24]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0208 	orr.w	r2, r2, #8
 8006a7e:	619a      	str	r2, [r3, #24]
}
 8006a80:	bf00      	nop
 8006a82:	3720      	adds	r7, #32
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	080066d9 	.word	0x080066d9

08006a8c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08a      	sub	sp, #40	; 0x28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a9a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aba:	2b22      	cmp	r3, #34	; 0x22
 8006abc:	f040 80da 	bne.w	8006c74 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ac6:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ac8:	e0aa      	b.n	8006c20 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad0:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad6:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006ad8:	8aba      	ldrh	r2, [r7, #20]
 8006ada:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006adc:	4013      	ands	r3, r2
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae8:	1c9a      	adds	r2, r3, #2
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d04d      	beq.n	8006bae <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d010      	beq.n	8006b3e <UART_RxISR_16BIT_FIFOEN+0xb2>
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00b      	beq.n	8006b3e <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b34:	f043 0201 	orr.w	r2, r3, #1
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	f003 0302 	and.w	r3, r3, #2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d010      	beq.n	8006b6a <UART_RxISR_16BIT_FIFOEN+0xde>
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00b      	beq.n	8006b6a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2202      	movs	r2, #2
 8006b58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b60:	f043 0204 	orr.w	r2, r3, #4
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	f003 0304 	and.w	r3, r3, #4
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d010      	beq.n	8006b96 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00b      	beq.n	8006b96 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2204      	movs	r2, #4
 8006b84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8c:	f043 0202 	orr.w	r2, r3, #2
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d006      	beq.n	8006bae <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff f857 	bl	8005c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d132      	bne.n	8006c20 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bc8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6812      	ldr	r2, [r2, #0]
 8006bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2220      	movs	r2, #32
 8006be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d10f      	bne.n	8006c14 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0210 	bic.w	r2, r2, #16
 8006c02:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff f82b 	bl	8005c68 <HAL_UARTEx_RxEventCallback>
 8006c12:	e002      	b.n	8006c1a <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7fa fcff 	bl	8001618 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c20:	8afb      	ldrh	r3, [r7, #22]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d005      	beq.n	8006c32 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f47f af4c 	bne.w	8006aca <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c38:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006c3a:	89fb      	ldrh	r3, [r7, #14]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d021      	beq.n	8006c84 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c46:	89fa      	ldrh	r2, [r7, #14]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d21b      	bcs.n	8006c84 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006c5a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a0b      	ldr	r2, [pc, #44]	; (8006c8c <UART_RxISR_16BIT_FIFOEN+0x200>)
 8006c60:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0220 	orr.w	r2, r2, #32
 8006c70:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c72:	e007      	b.n	8006c84 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0208 	orr.w	r2, r2, #8
 8006c82:	619a      	str	r2, [r3, #24]
}
 8006c84:	bf00      	nop
 8006c86:	3728      	adds	r7, #40	; 0x28
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	080067b1 	.word	0x080067b1

08006c90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <HAL_UARTEx_DisableFifoMode+0x16>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e027      	b.n	8006d32 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2224      	movs	r2, #36	; 0x24
 8006cee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0201 	bic.w	r2, r2, #1
 8006d08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b084      	sub	sp, #16
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d101      	bne.n	8006d56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d52:	2302      	movs	r3, #2
 8006d54:	e02d      	b.n	8006db2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2224      	movs	r2, #36	; 0x24
 8006d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0201 	bic.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f850 	bl	8006e38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d101      	bne.n	8006dd2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	e02d      	b.n	8006e2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2224      	movs	r2, #36	; 0x24
 8006dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f022 0201 	bic.w	r2, r2, #1
 8006df8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f812 	bl	8006e38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d108      	bne.n	8006e5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e58:	e031      	b.n	8006ebe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e5a:	2308      	movs	r3, #8
 8006e5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e5e:	2308      	movs	r3, #8
 8006e60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	0e5b      	lsrs	r3, r3, #25
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	0f5b      	lsrs	r3, r3, #29
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	7b3a      	ldrb	r2, [r7, #12]
 8006e86:	4911      	ldr	r1, [pc, #68]	; (8006ecc <UARTEx_SetNbDataToProcess+0x94>)
 8006e88:	5c8a      	ldrb	r2, [r1, r2]
 8006e8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e8e:	7b3a      	ldrb	r2, [r7, #12]
 8006e90:	490f      	ldr	r1, [pc, #60]	; (8006ed0 <UARTEx_SetNbDataToProcess+0x98>)
 8006e92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e94:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
 8006ea2:	7b7a      	ldrb	r2, [r7, #13]
 8006ea4:	4909      	ldr	r1, [pc, #36]	; (8006ecc <UARTEx_SetNbDataToProcess+0x94>)
 8006ea6:	5c8a      	ldrb	r2, [r1, r2]
 8006ea8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006eac:	7b7a      	ldrb	r2, [r7, #13]
 8006eae:	4908      	ldr	r1, [pc, #32]	; (8006ed0 <UARTEx_SetNbDataToProcess+0x98>)
 8006eb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006eb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ebe:	bf00      	nop
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	08009e04 	.word	0x08009e04
 8006ed0:	08009e0c 	.word	0x08009e0c

08006ed4 <atoi>:
 8006ed4:	220a      	movs	r2, #10
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	f000 bdc0 	b.w	8007a5c <strtol>

08006edc <__errno>:
 8006edc:	4b01      	ldr	r3, [pc, #4]	; (8006ee4 <__errno+0x8>)
 8006ede:	6818      	ldr	r0, [r3, #0]
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	20000010 	.word	0x20000010

08006ee8 <__libc_init_array>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	4d0d      	ldr	r5, [pc, #52]	; (8006f20 <__libc_init_array+0x38>)
 8006eec:	4c0d      	ldr	r4, [pc, #52]	; (8006f24 <__libc_init_array+0x3c>)
 8006eee:	1b64      	subs	r4, r4, r5
 8006ef0:	10a4      	asrs	r4, r4, #2
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	42a6      	cmp	r6, r4
 8006ef6:	d109      	bne.n	8006f0c <__libc_init_array+0x24>
 8006ef8:	4d0b      	ldr	r5, [pc, #44]	; (8006f28 <__libc_init_array+0x40>)
 8006efa:	4c0c      	ldr	r4, [pc, #48]	; (8006f2c <__libc_init_array+0x44>)
 8006efc:	f002 fe1e 	bl	8009b3c <_init>
 8006f00:	1b64      	subs	r4, r4, r5
 8006f02:	10a4      	asrs	r4, r4, #2
 8006f04:	2600      	movs	r6, #0
 8006f06:	42a6      	cmp	r6, r4
 8006f08:	d105      	bne.n	8006f16 <__libc_init_array+0x2e>
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
 8006f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f10:	4798      	blx	r3
 8006f12:	3601      	adds	r6, #1
 8006f14:	e7ee      	b.n	8006ef4 <__libc_init_array+0xc>
 8006f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f1a:	4798      	blx	r3
 8006f1c:	3601      	adds	r6, #1
 8006f1e:	e7f2      	b.n	8006f06 <__libc_init_array+0x1e>
 8006f20:	0800a204 	.word	0x0800a204
 8006f24:	0800a204 	.word	0x0800a204
 8006f28:	0800a204 	.word	0x0800a204
 8006f2c:	0800a208 	.word	0x0800a208

08006f30 <memset>:
 8006f30:	4402      	add	r2, r0
 8006f32:	4603      	mov	r3, r0
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d100      	bne.n	8006f3a <memset+0xa>
 8006f38:	4770      	bx	lr
 8006f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f3e:	e7f9      	b.n	8006f34 <memset+0x4>

08006f40 <__cvt>:
 8006f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f44:	ec55 4b10 	vmov	r4, r5, d0
 8006f48:	2d00      	cmp	r5, #0
 8006f4a:	460e      	mov	r6, r1
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	462b      	mov	r3, r5
 8006f50:	bfbb      	ittet	lt
 8006f52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f56:	461d      	movlt	r5, r3
 8006f58:	2300      	movge	r3, #0
 8006f5a:	232d      	movlt	r3, #45	; 0x2d
 8006f5c:	700b      	strb	r3, [r1, #0]
 8006f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f64:	4691      	mov	r9, r2
 8006f66:	f023 0820 	bic.w	r8, r3, #32
 8006f6a:	bfbc      	itt	lt
 8006f6c:	4622      	movlt	r2, r4
 8006f6e:	4614      	movlt	r4, r2
 8006f70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f74:	d005      	beq.n	8006f82 <__cvt+0x42>
 8006f76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f7a:	d100      	bne.n	8006f7e <__cvt+0x3e>
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	2102      	movs	r1, #2
 8006f80:	e000      	b.n	8006f84 <__cvt+0x44>
 8006f82:	2103      	movs	r1, #3
 8006f84:	ab03      	add	r3, sp, #12
 8006f86:	9301      	str	r3, [sp, #4]
 8006f88:	ab02      	add	r3, sp, #8
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	ec45 4b10 	vmov	d0, r4, r5
 8006f90:	4653      	mov	r3, sl
 8006f92:	4632      	mov	r2, r6
 8006f94:	f000 feb8 	bl	8007d08 <_dtoa_r>
 8006f98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f9c:	4607      	mov	r7, r0
 8006f9e:	d102      	bne.n	8006fa6 <__cvt+0x66>
 8006fa0:	f019 0f01 	tst.w	r9, #1
 8006fa4:	d022      	beq.n	8006fec <__cvt+0xac>
 8006fa6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006faa:	eb07 0906 	add.w	r9, r7, r6
 8006fae:	d110      	bne.n	8006fd2 <__cvt+0x92>
 8006fb0:	783b      	ldrb	r3, [r7, #0]
 8006fb2:	2b30      	cmp	r3, #48	; 0x30
 8006fb4:	d10a      	bne.n	8006fcc <__cvt+0x8c>
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4620      	mov	r0, r4
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	f7f9 fdab 	bl	8000b18 <__aeabi_dcmpeq>
 8006fc2:	b918      	cbnz	r0, 8006fcc <__cvt+0x8c>
 8006fc4:	f1c6 0601 	rsb	r6, r6, #1
 8006fc8:	f8ca 6000 	str.w	r6, [sl]
 8006fcc:	f8da 3000 	ldr.w	r3, [sl]
 8006fd0:	4499      	add	r9, r3
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f7f9 fd9d 	bl	8000b18 <__aeabi_dcmpeq>
 8006fde:	b108      	cbz	r0, 8006fe4 <__cvt+0xa4>
 8006fe0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fe4:	2230      	movs	r2, #48	; 0x30
 8006fe6:	9b03      	ldr	r3, [sp, #12]
 8006fe8:	454b      	cmp	r3, r9
 8006fea:	d307      	bcc.n	8006ffc <__cvt+0xbc>
 8006fec:	9b03      	ldr	r3, [sp, #12]
 8006fee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ff0:	1bdb      	subs	r3, r3, r7
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	b004      	add	sp, #16
 8006ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffc:	1c59      	adds	r1, r3, #1
 8006ffe:	9103      	str	r1, [sp, #12]
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	e7f0      	b.n	8006fe6 <__cvt+0xa6>

08007004 <__exponent>:
 8007004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007006:	4603      	mov	r3, r0
 8007008:	2900      	cmp	r1, #0
 800700a:	bfb8      	it	lt
 800700c:	4249      	neglt	r1, r1
 800700e:	f803 2b02 	strb.w	r2, [r3], #2
 8007012:	bfb4      	ite	lt
 8007014:	222d      	movlt	r2, #45	; 0x2d
 8007016:	222b      	movge	r2, #43	; 0x2b
 8007018:	2909      	cmp	r1, #9
 800701a:	7042      	strb	r2, [r0, #1]
 800701c:	dd2a      	ble.n	8007074 <__exponent+0x70>
 800701e:	f10d 0407 	add.w	r4, sp, #7
 8007022:	46a4      	mov	ip, r4
 8007024:	270a      	movs	r7, #10
 8007026:	46a6      	mov	lr, r4
 8007028:	460a      	mov	r2, r1
 800702a:	fb91 f6f7 	sdiv	r6, r1, r7
 800702e:	fb07 1516 	mls	r5, r7, r6, r1
 8007032:	3530      	adds	r5, #48	; 0x30
 8007034:	2a63      	cmp	r2, #99	; 0x63
 8007036:	f104 34ff 	add.w	r4, r4, #4294967295
 800703a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800703e:	4631      	mov	r1, r6
 8007040:	dcf1      	bgt.n	8007026 <__exponent+0x22>
 8007042:	3130      	adds	r1, #48	; 0x30
 8007044:	f1ae 0502 	sub.w	r5, lr, #2
 8007048:	f804 1c01 	strb.w	r1, [r4, #-1]
 800704c:	1c44      	adds	r4, r0, #1
 800704e:	4629      	mov	r1, r5
 8007050:	4561      	cmp	r1, ip
 8007052:	d30a      	bcc.n	800706a <__exponent+0x66>
 8007054:	f10d 0209 	add.w	r2, sp, #9
 8007058:	eba2 020e 	sub.w	r2, r2, lr
 800705c:	4565      	cmp	r5, ip
 800705e:	bf88      	it	hi
 8007060:	2200      	movhi	r2, #0
 8007062:	4413      	add	r3, r2
 8007064:	1a18      	subs	r0, r3, r0
 8007066:	b003      	add	sp, #12
 8007068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800706a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800706e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007072:	e7ed      	b.n	8007050 <__exponent+0x4c>
 8007074:	2330      	movs	r3, #48	; 0x30
 8007076:	3130      	adds	r1, #48	; 0x30
 8007078:	7083      	strb	r3, [r0, #2]
 800707a:	70c1      	strb	r1, [r0, #3]
 800707c:	1d03      	adds	r3, r0, #4
 800707e:	e7f1      	b.n	8007064 <__exponent+0x60>

08007080 <_printf_float>:
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	ed2d 8b02 	vpush	{d8}
 8007088:	b08d      	sub	sp, #52	; 0x34
 800708a:	460c      	mov	r4, r1
 800708c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007090:	4616      	mov	r6, r2
 8007092:	461f      	mov	r7, r3
 8007094:	4605      	mov	r5, r0
 8007096:	f001 fddb 	bl	8008c50 <_localeconv_r>
 800709a:	f8d0 a000 	ldr.w	sl, [r0]
 800709e:	4650      	mov	r0, sl
 80070a0:	f7f9 f8be 	bl	8000220 <strlen>
 80070a4:	2300      	movs	r3, #0
 80070a6:	930a      	str	r3, [sp, #40]	; 0x28
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	9305      	str	r3, [sp, #20]
 80070ac:	f8d8 3000 	ldr.w	r3, [r8]
 80070b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80070b4:	3307      	adds	r3, #7
 80070b6:	f023 0307 	bic.w	r3, r3, #7
 80070ba:	f103 0208 	add.w	r2, r3, #8
 80070be:	f8c8 2000 	str.w	r2, [r8]
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80070ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070d2:	9307      	str	r3, [sp, #28]
 80070d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80070d8:	ee08 0a10 	vmov	s16, r0
 80070dc:	4b9f      	ldr	r3, [pc, #636]	; (800735c <_printf_float+0x2dc>)
 80070de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070e2:	f04f 32ff 	mov.w	r2, #4294967295
 80070e6:	f7f9 fd49 	bl	8000b7c <__aeabi_dcmpun>
 80070ea:	bb88      	cbnz	r0, 8007150 <_printf_float+0xd0>
 80070ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070f0:	4b9a      	ldr	r3, [pc, #616]	; (800735c <_printf_float+0x2dc>)
 80070f2:	f04f 32ff 	mov.w	r2, #4294967295
 80070f6:	f7f9 fd23 	bl	8000b40 <__aeabi_dcmple>
 80070fa:	bb48      	cbnz	r0, 8007150 <_printf_float+0xd0>
 80070fc:	2200      	movs	r2, #0
 80070fe:	2300      	movs	r3, #0
 8007100:	4640      	mov	r0, r8
 8007102:	4649      	mov	r1, r9
 8007104:	f7f9 fd12 	bl	8000b2c <__aeabi_dcmplt>
 8007108:	b110      	cbz	r0, 8007110 <_printf_float+0x90>
 800710a:	232d      	movs	r3, #45	; 0x2d
 800710c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007110:	4b93      	ldr	r3, [pc, #588]	; (8007360 <_printf_float+0x2e0>)
 8007112:	4894      	ldr	r0, [pc, #592]	; (8007364 <_printf_float+0x2e4>)
 8007114:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007118:	bf94      	ite	ls
 800711a:	4698      	movls	r8, r3
 800711c:	4680      	movhi	r8, r0
 800711e:	2303      	movs	r3, #3
 8007120:	6123      	str	r3, [r4, #16]
 8007122:	9b05      	ldr	r3, [sp, #20]
 8007124:	f023 0204 	bic.w	r2, r3, #4
 8007128:	6022      	str	r2, [r4, #0]
 800712a:	f04f 0900 	mov.w	r9, #0
 800712e:	9700      	str	r7, [sp, #0]
 8007130:	4633      	mov	r3, r6
 8007132:	aa0b      	add	r2, sp, #44	; 0x2c
 8007134:	4621      	mov	r1, r4
 8007136:	4628      	mov	r0, r5
 8007138:	f000 f9d8 	bl	80074ec <_printf_common>
 800713c:	3001      	adds	r0, #1
 800713e:	f040 8090 	bne.w	8007262 <_printf_float+0x1e2>
 8007142:	f04f 30ff 	mov.w	r0, #4294967295
 8007146:	b00d      	add	sp, #52	; 0x34
 8007148:	ecbd 8b02 	vpop	{d8}
 800714c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007150:	4642      	mov	r2, r8
 8007152:	464b      	mov	r3, r9
 8007154:	4640      	mov	r0, r8
 8007156:	4649      	mov	r1, r9
 8007158:	f7f9 fd10 	bl	8000b7c <__aeabi_dcmpun>
 800715c:	b140      	cbz	r0, 8007170 <_printf_float+0xf0>
 800715e:	464b      	mov	r3, r9
 8007160:	2b00      	cmp	r3, #0
 8007162:	bfbc      	itt	lt
 8007164:	232d      	movlt	r3, #45	; 0x2d
 8007166:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800716a:	487f      	ldr	r0, [pc, #508]	; (8007368 <_printf_float+0x2e8>)
 800716c:	4b7f      	ldr	r3, [pc, #508]	; (800736c <_printf_float+0x2ec>)
 800716e:	e7d1      	b.n	8007114 <_printf_float+0x94>
 8007170:	6863      	ldr	r3, [r4, #4]
 8007172:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007176:	9206      	str	r2, [sp, #24]
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	d13f      	bne.n	80071fc <_printf_float+0x17c>
 800717c:	2306      	movs	r3, #6
 800717e:	6063      	str	r3, [r4, #4]
 8007180:	9b05      	ldr	r3, [sp, #20]
 8007182:	6861      	ldr	r1, [r4, #4]
 8007184:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007188:	2300      	movs	r3, #0
 800718a:	9303      	str	r3, [sp, #12]
 800718c:	ab0a      	add	r3, sp, #40	; 0x28
 800718e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007192:	ab09      	add	r3, sp, #36	; 0x24
 8007194:	ec49 8b10 	vmov	d0, r8, r9
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	6022      	str	r2, [r4, #0]
 800719c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80071a0:	4628      	mov	r0, r5
 80071a2:	f7ff fecd 	bl	8006f40 <__cvt>
 80071a6:	9b06      	ldr	r3, [sp, #24]
 80071a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071aa:	2b47      	cmp	r3, #71	; 0x47
 80071ac:	4680      	mov	r8, r0
 80071ae:	d108      	bne.n	80071c2 <_printf_float+0x142>
 80071b0:	1cc8      	adds	r0, r1, #3
 80071b2:	db02      	blt.n	80071ba <_printf_float+0x13a>
 80071b4:	6863      	ldr	r3, [r4, #4]
 80071b6:	4299      	cmp	r1, r3
 80071b8:	dd41      	ble.n	800723e <_printf_float+0x1be>
 80071ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80071be:	fa5f fb8b 	uxtb.w	fp, fp
 80071c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071c6:	d820      	bhi.n	800720a <_printf_float+0x18a>
 80071c8:	3901      	subs	r1, #1
 80071ca:	465a      	mov	r2, fp
 80071cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071d0:	9109      	str	r1, [sp, #36]	; 0x24
 80071d2:	f7ff ff17 	bl	8007004 <__exponent>
 80071d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071d8:	1813      	adds	r3, r2, r0
 80071da:	2a01      	cmp	r2, #1
 80071dc:	4681      	mov	r9, r0
 80071de:	6123      	str	r3, [r4, #16]
 80071e0:	dc02      	bgt.n	80071e8 <_printf_float+0x168>
 80071e2:	6822      	ldr	r2, [r4, #0]
 80071e4:	07d2      	lsls	r2, r2, #31
 80071e6:	d501      	bpl.n	80071ec <_printf_float+0x16c>
 80071e8:	3301      	adds	r3, #1
 80071ea:	6123      	str	r3, [r4, #16]
 80071ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d09c      	beq.n	800712e <_printf_float+0xae>
 80071f4:	232d      	movs	r3, #45	; 0x2d
 80071f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071fa:	e798      	b.n	800712e <_printf_float+0xae>
 80071fc:	9a06      	ldr	r2, [sp, #24]
 80071fe:	2a47      	cmp	r2, #71	; 0x47
 8007200:	d1be      	bne.n	8007180 <_printf_float+0x100>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1bc      	bne.n	8007180 <_printf_float+0x100>
 8007206:	2301      	movs	r3, #1
 8007208:	e7b9      	b.n	800717e <_printf_float+0xfe>
 800720a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800720e:	d118      	bne.n	8007242 <_printf_float+0x1c2>
 8007210:	2900      	cmp	r1, #0
 8007212:	6863      	ldr	r3, [r4, #4]
 8007214:	dd0b      	ble.n	800722e <_printf_float+0x1ae>
 8007216:	6121      	str	r1, [r4, #16]
 8007218:	b913      	cbnz	r3, 8007220 <_printf_float+0x1a0>
 800721a:	6822      	ldr	r2, [r4, #0]
 800721c:	07d0      	lsls	r0, r2, #31
 800721e:	d502      	bpl.n	8007226 <_printf_float+0x1a6>
 8007220:	3301      	adds	r3, #1
 8007222:	440b      	add	r3, r1
 8007224:	6123      	str	r3, [r4, #16]
 8007226:	65a1      	str	r1, [r4, #88]	; 0x58
 8007228:	f04f 0900 	mov.w	r9, #0
 800722c:	e7de      	b.n	80071ec <_printf_float+0x16c>
 800722e:	b913      	cbnz	r3, 8007236 <_printf_float+0x1b6>
 8007230:	6822      	ldr	r2, [r4, #0]
 8007232:	07d2      	lsls	r2, r2, #31
 8007234:	d501      	bpl.n	800723a <_printf_float+0x1ba>
 8007236:	3302      	adds	r3, #2
 8007238:	e7f4      	b.n	8007224 <_printf_float+0x1a4>
 800723a:	2301      	movs	r3, #1
 800723c:	e7f2      	b.n	8007224 <_printf_float+0x1a4>
 800723e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007244:	4299      	cmp	r1, r3
 8007246:	db05      	blt.n	8007254 <_printf_float+0x1d4>
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	6121      	str	r1, [r4, #16]
 800724c:	07d8      	lsls	r0, r3, #31
 800724e:	d5ea      	bpl.n	8007226 <_printf_float+0x1a6>
 8007250:	1c4b      	adds	r3, r1, #1
 8007252:	e7e7      	b.n	8007224 <_printf_float+0x1a4>
 8007254:	2900      	cmp	r1, #0
 8007256:	bfd4      	ite	le
 8007258:	f1c1 0202 	rsble	r2, r1, #2
 800725c:	2201      	movgt	r2, #1
 800725e:	4413      	add	r3, r2
 8007260:	e7e0      	b.n	8007224 <_printf_float+0x1a4>
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	055a      	lsls	r2, r3, #21
 8007266:	d407      	bmi.n	8007278 <_printf_float+0x1f8>
 8007268:	6923      	ldr	r3, [r4, #16]
 800726a:	4642      	mov	r2, r8
 800726c:	4631      	mov	r1, r6
 800726e:	4628      	mov	r0, r5
 8007270:	47b8      	blx	r7
 8007272:	3001      	adds	r0, #1
 8007274:	d12c      	bne.n	80072d0 <_printf_float+0x250>
 8007276:	e764      	b.n	8007142 <_printf_float+0xc2>
 8007278:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800727c:	f240 80e0 	bls.w	8007440 <_printf_float+0x3c0>
 8007280:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007284:	2200      	movs	r2, #0
 8007286:	2300      	movs	r3, #0
 8007288:	f7f9 fc46 	bl	8000b18 <__aeabi_dcmpeq>
 800728c:	2800      	cmp	r0, #0
 800728e:	d034      	beq.n	80072fa <_printf_float+0x27a>
 8007290:	4a37      	ldr	r2, [pc, #220]	; (8007370 <_printf_float+0x2f0>)
 8007292:	2301      	movs	r3, #1
 8007294:	4631      	mov	r1, r6
 8007296:	4628      	mov	r0, r5
 8007298:	47b8      	blx	r7
 800729a:	3001      	adds	r0, #1
 800729c:	f43f af51 	beq.w	8007142 <_printf_float+0xc2>
 80072a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072a4:	429a      	cmp	r2, r3
 80072a6:	db02      	blt.n	80072ae <_printf_float+0x22e>
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	07d8      	lsls	r0, r3, #31
 80072ac:	d510      	bpl.n	80072d0 <_printf_float+0x250>
 80072ae:	ee18 3a10 	vmov	r3, s16
 80072b2:	4652      	mov	r2, sl
 80072b4:	4631      	mov	r1, r6
 80072b6:	4628      	mov	r0, r5
 80072b8:	47b8      	blx	r7
 80072ba:	3001      	adds	r0, #1
 80072bc:	f43f af41 	beq.w	8007142 <_printf_float+0xc2>
 80072c0:	f04f 0800 	mov.w	r8, #0
 80072c4:	f104 091a 	add.w	r9, r4, #26
 80072c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ca:	3b01      	subs	r3, #1
 80072cc:	4543      	cmp	r3, r8
 80072ce:	dc09      	bgt.n	80072e4 <_printf_float+0x264>
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	079b      	lsls	r3, r3, #30
 80072d4:	f100 8105 	bmi.w	80074e2 <_printf_float+0x462>
 80072d8:	68e0      	ldr	r0, [r4, #12]
 80072da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072dc:	4298      	cmp	r0, r3
 80072de:	bfb8      	it	lt
 80072e0:	4618      	movlt	r0, r3
 80072e2:	e730      	b.n	8007146 <_printf_float+0xc6>
 80072e4:	2301      	movs	r3, #1
 80072e6:	464a      	mov	r2, r9
 80072e8:	4631      	mov	r1, r6
 80072ea:	4628      	mov	r0, r5
 80072ec:	47b8      	blx	r7
 80072ee:	3001      	adds	r0, #1
 80072f0:	f43f af27 	beq.w	8007142 <_printf_float+0xc2>
 80072f4:	f108 0801 	add.w	r8, r8, #1
 80072f8:	e7e6      	b.n	80072c8 <_printf_float+0x248>
 80072fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	dc39      	bgt.n	8007374 <_printf_float+0x2f4>
 8007300:	4a1b      	ldr	r2, [pc, #108]	; (8007370 <_printf_float+0x2f0>)
 8007302:	2301      	movs	r3, #1
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	47b8      	blx	r7
 800730a:	3001      	adds	r0, #1
 800730c:	f43f af19 	beq.w	8007142 <_printf_float+0xc2>
 8007310:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007314:	4313      	orrs	r3, r2
 8007316:	d102      	bne.n	800731e <_printf_float+0x29e>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	07d9      	lsls	r1, r3, #31
 800731c:	d5d8      	bpl.n	80072d0 <_printf_float+0x250>
 800731e:	ee18 3a10 	vmov	r3, s16
 8007322:	4652      	mov	r2, sl
 8007324:	4631      	mov	r1, r6
 8007326:	4628      	mov	r0, r5
 8007328:	47b8      	blx	r7
 800732a:	3001      	adds	r0, #1
 800732c:	f43f af09 	beq.w	8007142 <_printf_float+0xc2>
 8007330:	f04f 0900 	mov.w	r9, #0
 8007334:	f104 0a1a 	add.w	sl, r4, #26
 8007338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800733a:	425b      	negs	r3, r3
 800733c:	454b      	cmp	r3, r9
 800733e:	dc01      	bgt.n	8007344 <_printf_float+0x2c4>
 8007340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007342:	e792      	b.n	800726a <_printf_float+0x1ea>
 8007344:	2301      	movs	r3, #1
 8007346:	4652      	mov	r2, sl
 8007348:	4631      	mov	r1, r6
 800734a:	4628      	mov	r0, r5
 800734c:	47b8      	blx	r7
 800734e:	3001      	adds	r0, #1
 8007350:	f43f aef7 	beq.w	8007142 <_printf_float+0xc2>
 8007354:	f109 0901 	add.w	r9, r9, #1
 8007358:	e7ee      	b.n	8007338 <_printf_float+0x2b8>
 800735a:	bf00      	nop
 800735c:	7fefffff 	.word	0x7fefffff
 8007360:	08009e18 	.word	0x08009e18
 8007364:	08009e1c 	.word	0x08009e1c
 8007368:	08009e24 	.word	0x08009e24
 800736c:	08009e20 	.word	0x08009e20
 8007370:	08009e28 	.word	0x08009e28
 8007374:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007376:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007378:	429a      	cmp	r2, r3
 800737a:	bfa8      	it	ge
 800737c:	461a      	movge	r2, r3
 800737e:	2a00      	cmp	r2, #0
 8007380:	4691      	mov	r9, r2
 8007382:	dc37      	bgt.n	80073f4 <_printf_float+0x374>
 8007384:	f04f 0b00 	mov.w	fp, #0
 8007388:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800738c:	f104 021a 	add.w	r2, r4, #26
 8007390:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007392:	9305      	str	r3, [sp, #20]
 8007394:	eba3 0309 	sub.w	r3, r3, r9
 8007398:	455b      	cmp	r3, fp
 800739a:	dc33      	bgt.n	8007404 <_printf_float+0x384>
 800739c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073a0:	429a      	cmp	r2, r3
 80073a2:	db3b      	blt.n	800741c <_printf_float+0x39c>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	07da      	lsls	r2, r3, #31
 80073a8:	d438      	bmi.n	800741c <_printf_float+0x39c>
 80073aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ac:	9b05      	ldr	r3, [sp, #20]
 80073ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	eba2 0901 	sub.w	r9, r2, r1
 80073b6:	4599      	cmp	r9, r3
 80073b8:	bfa8      	it	ge
 80073ba:	4699      	movge	r9, r3
 80073bc:	f1b9 0f00 	cmp.w	r9, #0
 80073c0:	dc35      	bgt.n	800742e <_printf_float+0x3ae>
 80073c2:	f04f 0800 	mov.w	r8, #0
 80073c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073ca:	f104 0a1a 	add.w	sl, r4, #26
 80073ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073d2:	1a9b      	subs	r3, r3, r2
 80073d4:	eba3 0309 	sub.w	r3, r3, r9
 80073d8:	4543      	cmp	r3, r8
 80073da:	f77f af79 	ble.w	80072d0 <_printf_float+0x250>
 80073de:	2301      	movs	r3, #1
 80073e0:	4652      	mov	r2, sl
 80073e2:	4631      	mov	r1, r6
 80073e4:	4628      	mov	r0, r5
 80073e6:	47b8      	blx	r7
 80073e8:	3001      	adds	r0, #1
 80073ea:	f43f aeaa 	beq.w	8007142 <_printf_float+0xc2>
 80073ee:	f108 0801 	add.w	r8, r8, #1
 80073f2:	e7ec      	b.n	80073ce <_printf_float+0x34e>
 80073f4:	4613      	mov	r3, r2
 80073f6:	4631      	mov	r1, r6
 80073f8:	4642      	mov	r2, r8
 80073fa:	4628      	mov	r0, r5
 80073fc:	47b8      	blx	r7
 80073fe:	3001      	adds	r0, #1
 8007400:	d1c0      	bne.n	8007384 <_printf_float+0x304>
 8007402:	e69e      	b.n	8007142 <_printf_float+0xc2>
 8007404:	2301      	movs	r3, #1
 8007406:	4631      	mov	r1, r6
 8007408:	4628      	mov	r0, r5
 800740a:	9205      	str	r2, [sp, #20]
 800740c:	47b8      	blx	r7
 800740e:	3001      	adds	r0, #1
 8007410:	f43f ae97 	beq.w	8007142 <_printf_float+0xc2>
 8007414:	9a05      	ldr	r2, [sp, #20]
 8007416:	f10b 0b01 	add.w	fp, fp, #1
 800741a:	e7b9      	b.n	8007390 <_printf_float+0x310>
 800741c:	ee18 3a10 	vmov	r3, s16
 8007420:	4652      	mov	r2, sl
 8007422:	4631      	mov	r1, r6
 8007424:	4628      	mov	r0, r5
 8007426:	47b8      	blx	r7
 8007428:	3001      	adds	r0, #1
 800742a:	d1be      	bne.n	80073aa <_printf_float+0x32a>
 800742c:	e689      	b.n	8007142 <_printf_float+0xc2>
 800742e:	9a05      	ldr	r2, [sp, #20]
 8007430:	464b      	mov	r3, r9
 8007432:	4442      	add	r2, r8
 8007434:	4631      	mov	r1, r6
 8007436:	4628      	mov	r0, r5
 8007438:	47b8      	blx	r7
 800743a:	3001      	adds	r0, #1
 800743c:	d1c1      	bne.n	80073c2 <_printf_float+0x342>
 800743e:	e680      	b.n	8007142 <_printf_float+0xc2>
 8007440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007442:	2a01      	cmp	r2, #1
 8007444:	dc01      	bgt.n	800744a <_printf_float+0x3ca>
 8007446:	07db      	lsls	r3, r3, #31
 8007448:	d538      	bpl.n	80074bc <_printf_float+0x43c>
 800744a:	2301      	movs	r3, #1
 800744c:	4642      	mov	r2, r8
 800744e:	4631      	mov	r1, r6
 8007450:	4628      	mov	r0, r5
 8007452:	47b8      	blx	r7
 8007454:	3001      	adds	r0, #1
 8007456:	f43f ae74 	beq.w	8007142 <_printf_float+0xc2>
 800745a:	ee18 3a10 	vmov	r3, s16
 800745e:	4652      	mov	r2, sl
 8007460:	4631      	mov	r1, r6
 8007462:	4628      	mov	r0, r5
 8007464:	47b8      	blx	r7
 8007466:	3001      	adds	r0, #1
 8007468:	f43f ae6b 	beq.w	8007142 <_printf_float+0xc2>
 800746c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007470:	2200      	movs	r2, #0
 8007472:	2300      	movs	r3, #0
 8007474:	f7f9 fb50 	bl	8000b18 <__aeabi_dcmpeq>
 8007478:	b9d8      	cbnz	r0, 80074b2 <_printf_float+0x432>
 800747a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800747c:	f108 0201 	add.w	r2, r8, #1
 8007480:	3b01      	subs	r3, #1
 8007482:	4631      	mov	r1, r6
 8007484:	4628      	mov	r0, r5
 8007486:	47b8      	blx	r7
 8007488:	3001      	adds	r0, #1
 800748a:	d10e      	bne.n	80074aa <_printf_float+0x42a>
 800748c:	e659      	b.n	8007142 <_printf_float+0xc2>
 800748e:	2301      	movs	r3, #1
 8007490:	4652      	mov	r2, sl
 8007492:	4631      	mov	r1, r6
 8007494:	4628      	mov	r0, r5
 8007496:	47b8      	blx	r7
 8007498:	3001      	adds	r0, #1
 800749a:	f43f ae52 	beq.w	8007142 <_printf_float+0xc2>
 800749e:	f108 0801 	add.w	r8, r8, #1
 80074a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a4:	3b01      	subs	r3, #1
 80074a6:	4543      	cmp	r3, r8
 80074a8:	dcf1      	bgt.n	800748e <_printf_float+0x40e>
 80074aa:	464b      	mov	r3, r9
 80074ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074b0:	e6dc      	b.n	800726c <_printf_float+0x1ec>
 80074b2:	f04f 0800 	mov.w	r8, #0
 80074b6:	f104 0a1a 	add.w	sl, r4, #26
 80074ba:	e7f2      	b.n	80074a2 <_printf_float+0x422>
 80074bc:	2301      	movs	r3, #1
 80074be:	4642      	mov	r2, r8
 80074c0:	e7df      	b.n	8007482 <_printf_float+0x402>
 80074c2:	2301      	movs	r3, #1
 80074c4:	464a      	mov	r2, r9
 80074c6:	4631      	mov	r1, r6
 80074c8:	4628      	mov	r0, r5
 80074ca:	47b8      	blx	r7
 80074cc:	3001      	adds	r0, #1
 80074ce:	f43f ae38 	beq.w	8007142 <_printf_float+0xc2>
 80074d2:	f108 0801 	add.w	r8, r8, #1
 80074d6:	68e3      	ldr	r3, [r4, #12]
 80074d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074da:	1a5b      	subs	r3, r3, r1
 80074dc:	4543      	cmp	r3, r8
 80074de:	dcf0      	bgt.n	80074c2 <_printf_float+0x442>
 80074e0:	e6fa      	b.n	80072d8 <_printf_float+0x258>
 80074e2:	f04f 0800 	mov.w	r8, #0
 80074e6:	f104 0919 	add.w	r9, r4, #25
 80074ea:	e7f4      	b.n	80074d6 <_printf_float+0x456>

080074ec <_printf_common>:
 80074ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f0:	4616      	mov	r6, r2
 80074f2:	4699      	mov	r9, r3
 80074f4:	688a      	ldr	r2, [r1, #8]
 80074f6:	690b      	ldr	r3, [r1, #16]
 80074f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074fc:	4293      	cmp	r3, r2
 80074fe:	bfb8      	it	lt
 8007500:	4613      	movlt	r3, r2
 8007502:	6033      	str	r3, [r6, #0]
 8007504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007508:	4607      	mov	r7, r0
 800750a:	460c      	mov	r4, r1
 800750c:	b10a      	cbz	r2, 8007512 <_printf_common+0x26>
 800750e:	3301      	adds	r3, #1
 8007510:	6033      	str	r3, [r6, #0]
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	0699      	lsls	r1, r3, #26
 8007516:	bf42      	ittt	mi
 8007518:	6833      	ldrmi	r3, [r6, #0]
 800751a:	3302      	addmi	r3, #2
 800751c:	6033      	strmi	r3, [r6, #0]
 800751e:	6825      	ldr	r5, [r4, #0]
 8007520:	f015 0506 	ands.w	r5, r5, #6
 8007524:	d106      	bne.n	8007534 <_printf_common+0x48>
 8007526:	f104 0a19 	add.w	sl, r4, #25
 800752a:	68e3      	ldr	r3, [r4, #12]
 800752c:	6832      	ldr	r2, [r6, #0]
 800752e:	1a9b      	subs	r3, r3, r2
 8007530:	42ab      	cmp	r3, r5
 8007532:	dc26      	bgt.n	8007582 <_printf_common+0x96>
 8007534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007538:	1e13      	subs	r3, r2, #0
 800753a:	6822      	ldr	r2, [r4, #0]
 800753c:	bf18      	it	ne
 800753e:	2301      	movne	r3, #1
 8007540:	0692      	lsls	r2, r2, #26
 8007542:	d42b      	bmi.n	800759c <_printf_common+0xb0>
 8007544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007548:	4649      	mov	r1, r9
 800754a:	4638      	mov	r0, r7
 800754c:	47c0      	blx	r8
 800754e:	3001      	adds	r0, #1
 8007550:	d01e      	beq.n	8007590 <_printf_common+0xa4>
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	68e5      	ldr	r5, [r4, #12]
 8007556:	6832      	ldr	r2, [r6, #0]
 8007558:	f003 0306 	and.w	r3, r3, #6
 800755c:	2b04      	cmp	r3, #4
 800755e:	bf08      	it	eq
 8007560:	1aad      	subeq	r5, r5, r2
 8007562:	68a3      	ldr	r3, [r4, #8]
 8007564:	6922      	ldr	r2, [r4, #16]
 8007566:	bf0c      	ite	eq
 8007568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800756c:	2500      	movne	r5, #0
 800756e:	4293      	cmp	r3, r2
 8007570:	bfc4      	itt	gt
 8007572:	1a9b      	subgt	r3, r3, r2
 8007574:	18ed      	addgt	r5, r5, r3
 8007576:	2600      	movs	r6, #0
 8007578:	341a      	adds	r4, #26
 800757a:	42b5      	cmp	r5, r6
 800757c:	d11a      	bne.n	80075b4 <_printf_common+0xc8>
 800757e:	2000      	movs	r0, #0
 8007580:	e008      	b.n	8007594 <_printf_common+0xa8>
 8007582:	2301      	movs	r3, #1
 8007584:	4652      	mov	r2, sl
 8007586:	4649      	mov	r1, r9
 8007588:	4638      	mov	r0, r7
 800758a:	47c0      	blx	r8
 800758c:	3001      	adds	r0, #1
 800758e:	d103      	bne.n	8007598 <_printf_common+0xac>
 8007590:	f04f 30ff 	mov.w	r0, #4294967295
 8007594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007598:	3501      	adds	r5, #1
 800759a:	e7c6      	b.n	800752a <_printf_common+0x3e>
 800759c:	18e1      	adds	r1, r4, r3
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	2030      	movs	r0, #48	; 0x30
 80075a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075a6:	4422      	add	r2, r4
 80075a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075b0:	3302      	adds	r3, #2
 80075b2:	e7c7      	b.n	8007544 <_printf_common+0x58>
 80075b4:	2301      	movs	r3, #1
 80075b6:	4622      	mov	r2, r4
 80075b8:	4649      	mov	r1, r9
 80075ba:	4638      	mov	r0, r7
 80075bc:	47c0      	blx	r8
 80075be:	3001      	adds	r0, #1
 80075c0:	d0e6      	beq.n	8007590 <_printf_common+0xa4>
 80075c2:	3601      	adds	r6, #1
 80075c4:	e7d9      	b.n	800757a <_printf_common+0x8e>
	...

080075c8 <_printf_i>:
 80075c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075cc:	460c      	mov	r4, r1
 80075ce:	4691      	mov	r9, r2
 80075d0:	7e27      	ldrb	r7, [r4, #24]
 80075d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80075d4:	2f78      	cmp	r7, #120	; 0x78
 80075d6:	4680      	mov	r8, r0
 80075d8:	469a      	mov	sl, r3
 80075da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075de:	d807      	bhi.n	80075f0 <_printf_i+0x28>
 80075e0:	2f62      	cmp	r7, #98	; 0x62
 80075e2:	d80a      	bhi.n	80075fa <_printf_i+0x32>
 80075e4:	2f00      	cmp	r7, #0
 80075e6:	f000 80d8 	beq.w	800779a <_printf_i+0x1d2>
 80075ea:	2f58      	cmp	r7, #88	; 0x58
 80075ec:	f000 80a3 	beq.w	8007736 <_printf_i+0x16e>
 80075f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075f8:	e03a      	b.n	8007670 <_printf_i+0xa8>
 80075fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075fe:	2b15      	cmp	r3, #21
 8007600:	d8f6      	bhi.n	80075f0 <_printf_i+0x28>
 8007602:	a001      	add	r0, pc, #4	; (adr r0, 8007608 <_printf_i+0x40>)
 8007604:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007608:	08007661 	.word	0x08007661
 800760c:	08007675 	.word	0x08007675
 8007610:	080075f1 	.word	0x080075f1
 8007614:	080075f1 	.word	0x080075f1
 8007618:	080075f1 	.word	0x080075f1
 800761c:	080075f1 	.word	0x080075f1
 8007620:	08007675 	.word	0x08007675
 8007624:	080075f1 	.word	0x080075f1
 8007628:	080075f1 	.word	0x080075f1
 800762c:	080075f1 	.word	0x080075f1
 8007630:	080075f1 	.word	0x080075f1
 8007634:	08007781 	.word	0x08007781
 8007638:	080076a5 	.word	0x080076a5
 800763c:	08007763 	.word	0x08007763
 8007640:	080075f1 	.word	0x080075f1
 8007644:	080075f1 	.word	0x080075f1
 8007648:	080077a3 	.word	0x080077a3
 800764c:	080075f1 	.word	0x080075f1
 8007650:	080076a5 	.word	0x080076a5
 8007654:	080075f1 	.word	0x080075f1
 8007658:	080075f1 	.word	0x080075f1
 800765c:	0800776b 	.word	0x0800776b
 8007660:	680b      	ldr	r3, [r1, #0]
 8007662:	1d1a      	adds	r2, r3, #4
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	600a      	str	r2, [r1, #0]
 8007668:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800766c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007670:	2301      	movs	r3, #1
 8007672:	e0a3      	b.n	80077bc <_printf_i+0x1f4>
 8007674:	6825      	ldr	r5, [r4, #0]
 8007676:	6808      	ldr	r0, [r1, #0]
 8007678:	062e      	lsls	r6, r5, #24
 800767a:	f100 0304 	add.w	r3, r0, #4
 800767e:	d50a      	bpl.n	8007696 <_printf_i+0xce>
 8007680:	6805      	ldr	r5, [r0, #0]
 8007682:	600b      	str	r3, [r1, #0]
 8007684:	2d00      	cmp	r5, #0
 8007686:	da03      	bge.n	8007690 <_printf_i+0xc8>
 8007688:	232d      	movs	r3, #45	; 0x2d
 800768a:	426d      	negs	r5, r5
 800768c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007690:	485e      	ldr	r0, [pc, #376]	; (800780c <_printf_i+0x244>)
 8007692:	230a      	movs	r3, #10
 8007694:	e019      	b.n	80076ca <_printf_i+0x102>
 8007696:	f015 0f40 	tst.w	r5, #64	; 0x40
 800769a:	6805      	ldr	r5, [r0, #0]
 800769c:	600b      	str	r3, [r1, #0]
 800769e:	bf18      	it	ne
 80076a0:	b22d      	sxthne	r5, r5
 80076a2:	e7ef      	b.n	8007684 <_printf_i+0xbc>
 80076a4:	680b      	ldr	r3, [r1, #0]
 80076a6:	6825      	ldr	r5, [r4, #0]
 80076a8:	1d18      	adds	r0, r3, #4
 80076aa:	6008      	str	r0, [r1, #0]
 80076ac:	0628      	lsls	r0, r5, #24
 80076ae:	d501      	bpl.n	80076b4 <_printf_i+0xec>
 80076b0:	681d      	ldr	r5, [r3, #0]
 80076b2:	e002      	b.n	80076ba <_printf_i+0xf2>
 80076b4:	0669      	lsls	r1, r5, #25
 80076b6:	d5fb      	bpl.n	80076b0 <_printf_i+0xe8>
 80076b8:	881d      	ldrh	r5, [r3, #0]
 80076ba:	4854      	ldr	r0, [pc, #336]	; (800780c <_printf_i+0x244>)
 80076bc:	2f6f      	cmp	r7, #111	; 0x6f
 80076be:	bf0c      	ite	eq
 80076c0:	2308      	moveq	r3, #8
 80076c2:	230a      	movne	r3, #10
 80076c4:	2100      	movs	r1, #0
 80076c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076ca:	6866      	ldr	r6, [r4, #4]
 80076cc:	60a6      	str	r6, [r4, #8]
 80076ce:	2e00      	cmp	r6, #0
 80076d0:	bfa2      	ittt	ge
 80076d2:	6821      	ldrge	r1, [r4, #0]
 80076d4:	f021 0104 	bicge.w	r1, r1, #4
 80076d8:	6021      	strge	r1, [r4, #0]
 80076da:	b90d      	cbnz	r5, 80076e0 <_printf_i+0x118>
 80076dc:	2e00      	cmp	r6, #0
 80076de:	d04d      	beq.n	800777c <_printf_i+0x1b4>
 80076e0:	4616      	mov	r6, r2
 80076e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80076e6:	fb03 5711 	mls	r7, r3, r1, r5
 80076ea:	5dc7      	ldrb	r7, [r0, r7]
 80076ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076f0:	462f      	mov	r7, r5
 80076f2:	42bb      	cmp	r3, r7
 80076f4:	460d      	mov	r5, r1
 80076f6:	d9f4      	bls.n	80076e2 <_printf_i+0x11a>
 80076f8:	2b08      	cmp	r3, #8
 80076fa:	d10b      	bne.n	8007714 <_printf_i+0x14c>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	07df      	lsls	r7, r3, #31
 8007700:	d508      	bpl.n	8007714 <_printf_i+0x14c>
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	6861      	ldr	r1, [r4, #4]
 8007706:	4299      	cmp	r1, r3
 8007708:	bfde      	ittt	le
 800770a:	2330      	movle	r3, #48	; 0x30
 800770c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007710:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007714:	1b92      	subs	r2, r2, r6
 8007716:	6122      	str	r2, [r4, #16]
 8007718:	f8cd a000 	str.w	sl, [sp]
 800771c:	464b      	mov	r3, r9
 800771e:	aa03      	add	r2, sp, #12
 8007720:	4621      	mov	r1, r4
 8007722:	4640      	mov	r0, r8
 8007724:	f7ff fee2 	bl	80074ec <_printf_common>
 8007728:	3001      	adds	r0, #1
 800772a:	d14c      	bne.n	80077c6 <_printf_i+0x1fe>
 800772c:	f04f 30ff 	mov.w	r0, #4294967295
 8007730:	b004      	add	sp, #16
 8007732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007736:	4835      	ldr	r0, [pc, #212]	; (800780c <_printf_i+0x244>)
 8007738:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	680e      	ldr	r6, [r1, #0]
 8007740:	061f      	lsls	r7, r3, #24
 8007742:	f856 5b04 	ldr.w	r5, [r6], #4
 8007746:	600e      	str	r6, [r1, #0]
 8007748:	d514      	bpl.n	8007774 <_printf_i+0x1ac>
 800774a:	07d9      	lsls	r1, r3, #31
 800774c:	bf44      	itt	mi
 800774e:	f043 0320 	orrmi.w	r3, r3, #32
 8007752:	6023      	strmi	r3, [r4, #0]
 8007754:	b91d      	cbnz	r5, 800775e <_printf_i+0x196>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	f023 0320 	bic.w	r3, r3, #32
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	2310      	movs	r3, #16
 8007760:	e7b0      	b.n	80076c4 <_printf_i+0xfc>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	f043 0320 	orr.w	r3, r3, #32
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	2378      	movs	r3, #120	; 0x78
 800776c:	4828      	ldr	r0, [pc, #160]	; (8007810 <_printf_i+0x248>)
 800776e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007772:	e7e3      	b.n	800773c <_printf_i+0x174>
 8007774:	065e      	lsls	r6, r3, #25
 8007776:	bf48      	it	mi
 8007778:	b2ad      	uxthmi	r5, r5
 800777a:	e7e6      	b.n	800774a <_printf_i+0x182>
 800777c:	4616      	mov	r6, r2
 800777e:	e7bb      	b.n	80076f8 <_printf_i+0x130>
 8007780:	680b      	ldr	r3, [r1, #0]
 8007782:	6826      	ldr	r6, [r4, #0]
 8007784:	6960      	ldr	r0, [r4, #20]
 8007786:	1d1d      	adds	r5, r3, #4
 8007788:	600d      	str	r5, [r1, #0]
 800778a:	0635      	lsls	r5, r6, #24
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	d501      	bpl.n	8007794 <_printf_i+0x1cc>
 8007790:	6018      	str	r0, [r3, #0]
 8007792:	e002      	b.n	800779a <_printf_i+0x1d2>
 8007794:	0671      	lsls	r1, r6, #25
 8007796:	d5fb      	bpl.n	8007790 <_printf_i+0x1c8>
 8007798:	8018      	strh	r0, [r3, #0]
 800779a:	2300      	movs	r3, #0
 800779c:	6123      	str	r3, [r4, #16]
 800779e:	4616      	mov	r6, r2
 80077a0:	e7ba      	b.n	8007718 <_printf_i+0x150>
 80077a2:	680b      	ldr	r3, [r1, #0]
 80077a4:	1d1a      	adds	r2, r3, #4
 80077a6:	600a      	str	r2, [r1, #0]
 80077a8:	681e      	ldr	r6, [r3, #0]
 80077aa:	6862      	ldr	r2, [r4, #4]
 80077ac:	2100      	movs	r1, #0
 80077ae:	4630      	mov	r0, r6
 80077b0:	f7f8 fd3e 	bl	8000230 <memchr>
 80077b4:	b108      	cbz	r0, 80077ba <_printf_i+0x1f2>
 80077b6:	1b80      	subs	r0, r0, r6
 80077b8:	6060      	str	r0, [r4, #4]
 80077ba:	6863      	ldr	r3, [r4, #4]
 80077bc:	6123      	str	r3, [r4, #16]
 80077be:	2300      	movs	r3, #0
 80077c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077c4:	e7a8      	b.n	8007718 <_printf_i+0x150>
 80077c6:	6923      	ldr	r3, [r4, #16]
 80077c8:	4632      	mov	r2, r6
 80077ca:	4649      	mov	r1, r9
 80077cc:	4640      	mov	r0, r8
 80077ce:	47d0      	blx	sl
 80077d0:	3001      	adds	r0, #1
 80077d2:	d0ab      	beq.n	800772c <_printf_i+0x164>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	079b      	lsls	r3, r3, #30
 80077d8:	d413      	bmi.n	8007802 <_printf_i+0x23a>
 80077da:	68e0      	ldr	r0, [r4, #12]
 80077dc:	9b03      	ldr	r3, [sp, #12]
 80077de:	4298      	cmp	r0, r3
 80077e0:	bfb8      	it	lt
 80077e2:	4618      	movlt	r0, r3
 80077e4:	e7a4      	b.n	8007730 <_printf_i+0x168>
 80077e6:	2301      	movs	r3, #1
 80077e8:	4632      	mov	r2, r6
 80077ea:	4649      	mov	r1, r9
 80077ec:	4640      	mov	r0, r8
 80077ee:	47d0      	blx	sl
 80077f0:	3001      	adds	r0, #1
 80077f2:	d09b      	beq.n	800772c <_printf_i+0x164>
 80077f4:	3501      	adds	r5, #1
 80077f6:	68e3      	ldr	r3, [r4, #12]
 80077f8:	9903      	ldr	r1, [sp, #12]
 80077fa:	1a5b      	subs	r3, r3, r1
 80077fc:	42ab      	cmp	r3, r5
 80077fe:	dcf2      	bgt.n	80077e6 <_printf_i+0x21e>
 8007800:	e7eb      	b.n	80077da <_printf_i+0x212>
 8007802:	2500      	movs	r5, #0
 8007804:	f104 0619 	add.w	r6, r4, #25
 8007808:	e7f5      	b.n	80077f6 <_printf_i+0x22e>
 800780a:	bf00      	nop
 800780c:	08009e2a 	.word	0x08009e2a
 8007810:	08009e3b 	.word	0x08009e3b

08007814 <iprintf>:
 8007814:	b40f      	push	{r0, r1, r2, r3}
 8007816:	4b0a      	ldr	r3, [pc, #40]	; (8007840 <iprintf+0x2c>)
 8007818:	b513      	push	{r0, r1, r4, lr}
 800781a:	681c      	ldr	r4, [r3, #0]
 800781c:	b124      	cbz	r4, 8007828 <iprintf+0x14>
 800781e:	69a3      	ldr	r3, [r4, #24]
 8007820:	b913      	cbnz	r3, 8007828 <iprintf+0x14>
 8007822:	4620      	mov	r0, r4
 8007824:	f001 f976 	bl	8008b14 <__sinit>
 8007828:	ab05      	add	r3, sp, #20
 800782a:	9a04      	ldr	r2, [sp, #16]
 800782c:	68a1      	ldr	r1, [r4, #8]
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	4620      	mov	r0, r4
 8007832:	f001 fef1 	bl	8009618 <_vfiprintf_r>
 8007836:	b002      	add	sp, #8
 8007838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800783c:	b004      	add	sp, #16
 800783e:	4770      	bx	lr
 8007840:	20000010 	.word	0x20000010

08007844 <_puts_r>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	460e      	mov	r6, r1
 8007848:	4605      	mov	r5, r0
 800784a:	b118      	cbz	r0, 8007854 <_puts_r+0x10>
 800784c:	6983      	ldr	r3, [r0, #24]
 800784e:	b90b      	cbnz	r3, 8007854 <_puts_r+0x10>
 8007850:	f001 f960 	bl	8008b14 <__sinit>
 8007854:	69ab      	ldr	r3, [r5, #24]
 8007856:	68ac      	ldr	r4, [r5, #8]
 8007858:	b913      	cbnz	r3, 8007860 <_puts_r+0x1c>
 800785a:	4628      	mov	r0, r5
 800785c:	f001 f95a 	bl	8008b14 <__sinit>
 8007860:	4b2c      	ldr	r3, [pc, #176]	; (8007914 <_puts_r+0xd0>)
 8007862:	429c      	cmp	r4, r3
 8007864:	d120      	bne.n	80078a8 <_puts_r+0x64>
 8007866:	686c      	ldr	r4, [r5, #4]
 8007868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800786a:	07db      	lsls	r3, r3, #31
 800786c:	d405      	bmi.n	800787a <_puts_r+0x36>
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	0598      	lsls	r0, r3, #22
 8007872:	d402      	bmi.n	800787a <_puts_r+0x36>
 8007874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007876:	f001 f9f0 	bl	8008c5a <__retarget_lock_acquire_recursive>
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	0719      	lsls	r1, r3, #28
 800787e:	d51d      	bpl.n	80078bc <_puts_r+0x78>
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	b1db      	cbz	r3, 80078bc <_puts_r+0x78>
 8007884:	3e01      	subs	r6, #1
 8007886:	68a3      	ldr	r3, [r4, #8]
 8007888:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800788c:	3b01      	subs	r3, #1
 800788e:	60a3      	str	r3, [r4, #8]
 8007890:	bb39      	cbnz	r1, 80078e2 <_puts_r+0x9e>
 8007892:	2b00      	cmp	r3, #0
 8007894:	da38      	bge.n	8007908 <_puts_r+0xc4>
 8007896:	4622      	mov	r2, r4
 8007898:	210a      	movs	r1, #10
 800789a:	4628      	mov	r0, r5
 800789c:	f000 f8e8 	bl	8007a70 <__swbuf_r>
 80078a0:	3001      	adds	r0, #1
 80078a2:	d011      	beq.n	80078c8 <_puts_r+0x84>
 80078a4:	250a      	movs	r5, #10
 80078a6:	e011      	b.n	80078cc <_puts_r+0x88>
 80078a8:	4b1b      	ldr	r3, [pc, #108]	; (8007918 <_puts_r+0xd4>)
 80078aa:	429c      	cmp	r4, r3
 80078ac:	d101      	bne.n	80078b2 <_puts_r+0x6e>
 80078ae:	68ac      	ldr	r4, [r5, #8]
 80078b0:	e7da      	b.n	8007868 <_puts_r+0x24>
 80078b2:	4b1a      	ldr	r3, [pc, #104]	; (800791c <_puts_r+0xd8>)
 80078b4:	429c      	cmp	r4, r3
 80078b6:	bf08      	it	eq
 80078b8:	68ec      	ldreq	r4, [r5, #12]
 80078ba:	e7d5      	b.n	8007868 <_puts_r+0x24>
 80078bc:	4621      	mov	r1, r4
 80078be:	4628      	mov	r0, r5
 80078c0:	f000 f928 	bl	8007b14 <__swsetup_r>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d0dd      	beq.n	8007884 <_puts_r+0x40>
 80078c8:	f04f 35ff 	mov.w	r5, #4294967295
 80078cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078ce:	07da      	lsls	r2, r3, #31
 80078d0:	d405      	bmi.n	80078de <_puts_r+0x9a>
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	059b      	lsls	r3, r3, #22
 80078d6:	d402      	bmi.n	80078de <_puts_r+0x9a>
 80078d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078da:	f001 f9bf 	bl	8008c5c <__retarget_lock_release_recursive>
 80078de:	4628      	mov	r0, r5
 80078e0:	bd70      	pop	{r4, r5, r6, pc}
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	da04      	bge.n	80078f0 <_puts_r+0xac>
 80078e6:	69a2      	ldr	r2, [r4, #24]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	dc06      	bgt.n	80078fa <_puts_r+0xb6>
 80078ec:	290a      	cmp	r1, #10
 80078ee:	d004      	beq.n	80078fa <_puts_r+0xb6>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	6022      	str	r2, [r4, #0]
 80078f6:	7019      	strb	r1, [r3, #0]
 80078f8:	e7c5      	b.n	8007886 <_puts_r+0x42>
 80078fa:	4622      	mov	r2, r4
 80078fc:	4628      	mov	r0, r5
 80078fe:	f000 f8b7 	bl	8007a70 <__swbuf_r>
 8007902:	3001      	adds	r0, #1
 8007904:	d1bf      	bne.n	8007886 <_puts_r+0x42>
 8007906:	e7df      	b.n	80078c8 <_puts_r+0x84>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	250a      	movs	r5, #10
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	6022      	str	r2, [r4, #0]
 8007910:	701d      	strb	r5, [r3, #0]
 8007912:	e7db      	b.n	80078cc <_puts_r+0x88>
 8007914:	0800a004 	.word	0x0800a004
 8007918:	0800a024 	.word	0x0800a024
 800791c:	08009fe4 	.word	0x08009fe4

08007920 <puts>:
 8007920:	4b02      	ldr	r3, [pc, #8]	; (800792c <puts+0xc>)
 8007922:	4601      	mov	r1, r0
 8007924:	6818      	ldr	r0, [r3, #0]
 8007926:	f7ff bf8d 	b.w	8007844 <_puts_r>
 800792a:	bf00      	nop
 800792c:	20000010 	.word	0x20000010

08007930 <strncmp>:
 8007930:	b510      	push	{r4, lr}
 8007932:	b16a      	cbz	r2, 8007950 <strncmp+0x20>
 8007934:	3901      	subs	r1, #1
 8007936:	1884      	adds	r4, r0, r2
 8007938:	f810 3b01 	ldrb.w	r3, [r0], #1
 800793c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007940:	4293      	cmp	r3, r2
 8007942:	d103      	bne.n	800794c <strncmp+0x1c>
 8007944:	42a0      	cmp	r0, r4
 8007946:	d001      	beq.n	800794c <strncmp+0x1c>
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1f5      	bne.n	8007938 <strncmp+0x8>
 800794c:	1a98      	subs	r0, r3, r2
 800794e:	bd10      	pop	{r4, pc}
 8007950:	4610      	mov	r0, r2
 8007952:	e7fc      	b.n	800794e <strncmp+0x1e>

08007954 <_strtol_l.isra.0>:
 8007954:	2b01      	cmp	r3, #1
 8007956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800795a:	d001      	beq.n	8007960 <_strtol_l.isra.0+0xc>
 800795c:	2b24      	cmp	r3, #36	; 0x24
 800795e:	d906      	bls.n	800796e <_strtol_l.isra.0+0x1a>
 8007960:	f7ff fabc 	bl	8006edc <__errno>
 8007964:	2316      	movs	r3, #22
 8007966:	6003      	str	r3, [r0, #0]
 8007968:	2000      	movs	r0, #0
 800796a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796e:	4f3a      	ldr	r7, [pc, #232]	; (8007a58 <_strtol_l.isra.0+0x104>)
 8007970:	468e      	mov	lr, r1
 8007972:	4676      	mov	r6, lr
 8007974:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007978:	5de5      	ldrb	r5, [r4, r7]
 800797a:	f015 0508 	ands.w	r5, r5, #8
 800797e:	d1f8      	bne.n	8007972 <_strtol_l.isra.0+0x1e>
 8007980:	2c2d      	cmp	r4, #45	; 0x2d
 8007982:	d134      	bne.n	80079ee <_strtol_l.isra.0+0x9a>
 8007984:	f89e 4000 	ldrb.w	r4, [lr]
 8007988:	f04f 0801 	mov.w	r8, #1
 800798c:	f106 0e02 	add.w	lr, r6, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d05c      	beq.n	8007a4e <_strtol_l.isra.0+0xfa>
 8007994:	2b10      	cmp	r3, #16
 8007996:	d10c      	bne.n	80079b2 <_strtol_l.isra.0+0x5e>
 8007998:	2c30      	cmp	r4, #48	; 0x30
 800799a:	d10a      	bne.n	80079b2 <_strtol_l.isra.0+0x5e>
 800799c:	f89e 4000 	ldrb.w	r4, [lr]
 80079a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80079a4:	2c58      	cmp	r4, #88	; 0x58
 80079a6:	d14d      	bne.n	8007a44 <_strtol_l.isra.0+0xf0>
 80079a8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80079ac:	2310      	movs	r3, #16
 80079ae:	f10e 0e02 	add.w	lr, lr, #2
 80079b2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80079b6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80079ba:	2600      	movs	r6, #0
 80079bc:	fbbc f9f3 	udiv	r9, ip, r3
 80079c0:	4635      	mov	r5, r6
 80079c2:	fb03 ca19 	mls	sl, r3, r9, ip
 80079c6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80079ca:	2f09      	cmp	r7, #9
 80079cc:	d818      	bhi.n	8007a00 <_strtol_l.isra.0+0xac>
 80079ce:	463c      	mov	r4, r7
 80079d0:	42a3      	cmp	r3, r4
 80079d2:	dd24      	ble.n	8007a1e <_strtol_l.isra.0+0xca>
 80079d4:	2e00      	cmp	r6, #0
 80079d6:	db1f      	blt.n	8007a18 <_strtol_l.isra.0+0xc4>
 80079d8:	45a9      	cmp	r9, r5
 80079da:	d31d      	bcc.n	8007a18 <_strtol_l.isra.0+0xc4>
 80079dc:	d101      	bne.n	80079e2 <_strtol_l.isra.0+0x8e>
 80079de:	45a2      	cmp	sl, r4
 80079e0:	db1a      	blt.n	8007a18 <_strtol_l.isra.0+0xc4>
 80079e2:	fb05 4503 	mla	r5, r5, r3, r4
 80079e6:	2601      	movs	r6, #1
 80079e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80079ec:	e7eb      	b.n	80079c6 <_strtol_l.isra.0+0x72>
 80079ee:	2c2b      	cmp	r4, #43	; 0x2b
 80079f0:	bf08      	it	eq
 80079f2:	f89e 4000 	ldrbeq.w	r4, [lr]
 80079f6:	46a8      	mov	r8, r5
 80079f8:	bf08      	it	eq
 80079fa:	f106 0e02 	addeq.w	lr, r6, #2
 80079fe:	e7c7      	b.n	8007990 <_strtol_l.isra.0+0x3c>
 8007a00:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007a04:	2f19      	cmp	r7, #25
 8007a06:	d801      	bhi.n	8007a0c <_strtol_l.isra.0+0xb8>
 8007a08:	3c37      	subs	r4, #55	; 0x37
 8007a0a:	e7e1      	b.n	80079d0 <_strtol_l.isra.0+0x7c>
 8007a0c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007a10:	2f19      	cmp	r7, #25
 8007a12:	d804      	bhi.n	8007a1e <_strtol_l.isra.0+0xca>
 8007a14:	3c57      	subs	r4, #87	; 0x57
 8007a16:	e7db      	b.n	80079d0 <_strtol_l.isra.0+0x7c>
 8007a18:	f04f 36ff 	mov.w	r6, #4294967295
 8007a1c:	e7e4      	b.n	80079e8 <_strtol_l.isra.0+0x94>
 8007a1e:	2e00      	cmp	r6, #0
 8007a20:	da05      	bge.n	8007a2e <_strtol_l.isra.0+0xda>
 8007a22:	2322      	movs	r3, #34	; 0x22
 8007a24:	6003      	str	r3, [r0, #0]
 8007a26:	4665      	mov	r5, ip
 8007a28:	b942      	cbnz	r2, 8007a3c <_strtol_l.isra.0+0xe8>
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	e79d      	b.n	800796a <_strtol_l.isra.0+0x16>
 8007a2e:	f1b8 0f00 	cmp.w	r8, #0
 8007a32:	d000      	beq.n	8007a36 <_strtol_l.isra.0+0xe2>
 8007a34:	426d      	negs	r5, r5
 8007a36:	2a00      	cmp	r2, #0
 8007a38:	d0f7      	beq.n	8007a2a <_strtol_l.isra.0+0xd6>
 8007a3a:	b10e      	cbz	r6, 8007a40 <_strtol_l.isra.0+0xec>
 8007a3c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007a40:	6011      	str	r1, [r2, #0]
 8007a42:	e7f2      	b.n	8007a2a <_strtol_l.isra.0+0xd6>
 8007a44:	2430      	movs	r4, #48	; 0x30
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1b3      	bne.n	80079b2 <_strtol_l.isra.0+0x5e>
 8007a4a:	2308      	movs	r3, #8
 8007a4c:	e7b1      	b.n	80079b2 <_strtol_l.isra.0+0x5e>
 8007a4e:	2c30      	cmp	r4, #48	; 0x30
 8007a50:	d0a4      	beq.n	800799c <_strtol_l.isra.0+0x48>
 8007a52:	230a      	movs	r3, #10
 8007a54:	e7ad      	b.n	80079b2 <_strtol_l.isra.0+0x5e>
 8007a56:	bf00      	nop
 8007a58:	08009e4d 	.word	0x08009e4d

08007a5c <strtol>:
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	460a      	mov	r2, r1
 8007a60:	4601      	mov	r1, r0
 8007a62:	4802      	ldr	r0, [pc, #8]	; (8007a6c <strtol+0x10>)
 8007a64:	6800      	ldr	r0, [r0, #0]
 8007a66:	f7ff bf75 	b.w	8007954 <_strtol_l.isra.0>
 8007a6a:	bf00      	nop
 8007a6c:	20000010 	.word	0x20000010

08007a70 <__swbuf_r>:
 8007a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a72:	460e      	mov	r6, r1
 8007a74:	4614      	mov	r4, r2
 8007a76:	4605      	mov	r5, r0
 8007a78:	b118      	cbz	r0, 8007a82 <__swbuf_r+0x12>
 8007a7a:	6983      	ldr	r3, [r0, #24]
 8007a7c:	b90b      	cbnz	r3, 8007a82 <__swbuf_r+0x12>
 8007a7e:	f001 f849 	bl	8008b14 <__sinit>
 8007a82:	4b21      	ldr	r3, [pc, #132]	; (8007b08 <__swbuf_r+0x98>)
 8007a84:	429c      	cmp	r4, r3
 8007a86:	d12b      	bne.n	8007ae0 <__swbuf_r+0x70>
 8007a88:	686c      	ldr	r4, [r5, #4]
 8007a8a:	69a3      	ldr	r3, [r4, #24]
 8007a8c:	60a3      	str	r3, [r4, #8]
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	071a      	lsls	r2, r3, #28
 8007a92:	d52f      	bpl.n	8007af4 <__swbuf_r+0x84>
 8007a94:	6923      	ldr	r3, [r4, #16]
 8007a96:	b36b      	cbz	r3, 8007af4 <__swbuf_r+0x84>
 8007a98:	6923      	ldr	r3, [r4, #16]
 8007a9a:	6820      	ldr	r0, [r4, #0]
 8007a9c:	1ac0      	subs	r0, r0, r3
 8007a9e:	6963      	ldr	r3, [r4, #20]
 8007aa0:	b2f6      	uxtb	r6, r6
 8007aa2:	4283      	cmp	r3, r0
 8007aa4:	4637      	mov	r7, r6
 8007aa6:	dc04      	bgt.n	8007ab2 <__swbuf_r+0x42>
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f000 ff9e 	bl	80089ec <_fflush_r>
 8007ab0:	bb30      	cbnz	r0, 8007b00 <__swbuf_r+0x90>
 8007ab2:	68a3      	ldr	r3, [r4, #8]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	60a3      	str	r3, [r4, #8]
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	6022      	str	r2, [r4, #0]
 8007abe:	701e      	strb	r6, [r3, #0]
 8007ac0:	6963      	ldr	r3, [r4, #20]
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	4283      	cmp	r3, r0
 8007ac6:	d004      	beq.n	8007ad2 <__swbuf_r+0x62>
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	07db      	lsls	r3, r3, #31
 8007acc:	d506      	bpl.n	8007adc <__swbuf_r+0x6c>
 8007ace:	2e0a      	cmp	r6, #10
 8007ad0:	d104      	bne.n	8007adc <__swbuf_r+0x6c>
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f000 ff89 	bl	80089ec <_fflush_r>
 8007ada:	b988      	cbnz	r0, 8007b00 <__swbuf_r+0x90>
 8007adc:	4638      	mov	r0, r7
 8007ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ae0:	4b0a      	ldr	r3, [pc, #40]	; (8007b0c <__swbuf_r+0x9c>)
 8007ae2:	429c      	cmp	r4, r3
 8007ae4:	d101      	bne.n	8007aea <__swbuf_r+0x7a>
 8007ae6:	68ac      	ldr	r4, [r5, #8]
 8007ae8:	e7cf      	b.n	8007a8a <__swbuf_r+0x1a>
 8007aea:	4b09      	ldr	r3, [pc, #36]	; (8007b10 <__swbuf_r+0xa0>)
 8007aec:	429c      	cmp	r4, r3
 8007aee:	bf08      	it	eq
 8007af0:	68ec      	ldreq	r4, [r5, #12]
 8007af2:	e7ca      	b.n	8007a8a <__swbuf_r+0x1a>
 8007af4:	4621      	mov	r1, r4
 8007af6:	4628      	mov	r0, r5
 8007af8:	f000 f80c 	bl	8007b14 <__swsetup_r>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d0cb      	beq.n	8007a98 <__swbuf_r+0x28>
 8007b00:	f04f 37ff 	mov.w	r7, #4294967295
 8007b04:	e7ea      	b.n	8007adc <__swbuf_r+0x6c>
 8007b06:	bf00      	nop
 8007b08:	0800a004 	.word	0x0800a004
 8007b0c:	0800a024 	.word	0x0800a024
 8007b10:	08009fe4 	.word	0x08009fe4

08007b14 <__swsetup_r>:
 8007b14:	4b32      	ldr	r3, [pc, #200]	; (8007be0 <__swsetup_r+0xcc>)
 8007b16:	b570      	push	{r4, r5, r6, lr}
 8007b18:	681d      	ldr	r5, [r3, #0]
 8007b1a:	4606      	mov	r6, r0
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	b125      	cbz	r5, 8007b2a <__swsetup_r+0x16>
 8007b20:	69ab      	ldr	r3, [r5, #24]
 8007b22:	b913      	cbnz	r3, 8007b2a <__swsetup_r+0x16>
 8007b24:	4628      	mov	r0, r5
 8007b26:	f000 fff5 	bl	8008b14 <__sinit>
 8007b2a:	4b2e      	ldr	r3, [pc, #184]	; (8007be4 <__swsetup_r+0xd0>)
 8007b2c:	429c      	cmp	r4, r3
 8007b2e:	d10f      	bne.n	8007b50 <__swsetup_r+0x3c>
 8007b30:	686c      	ldr	r4, [r5, #4]
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b38:	0719      	lsls	r1, r3, #28
 8007b3a:	d42c      	bmi.n	8007b96 <__swsetup_r+0x82>
 8007b3c:	06dd      	lsls	r5, r3, #27
 8007b3e:	d411      	bmi.n	8007b64 <__swsetup_r+0x50>
 8007b40:	2309      	movs	r3, #9
 8007b42:	6033      	str	r3, [r6, #0]
 8007b44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b48:	81a3      	strh	r3, [r4, #12]
 8007b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4e:	e03e      	b.n	8007bce <__swsetup_r+0xba>
 8007b50:	4b25      	ldr	r3, [pc, #148]	; (8007be8 <__swsetup_r+0xd4>)
 8007b52:	429c      	cmp	r4, r3
 8007b54:	d101      	bne.n	8007b5a <__swsetup_r+0x46>
 8007b56:	68ac      	ldr	r4, [r5, #8]
 8007b58:	e7eb      	b.n	8007b32 <__swsetup_r+0x1e>
 8007b5a:	4b24      	ldr	r3, [pc, #144]	; (8007bec <__swsetup_r+0xd8>)
 8007b5c:	429c      	cmp	r4, r3
 8007b5e:	bf08      	it	eq
 8007b60:	68ec      	ldreq	r4, [r5, #12]
 8007b62:	e7e6      	b.n	8007b32 <__swsetup_r+0x1e>
 8007b64:	0758      	lsls	r0, r3, #29
 8007b66:	d512      	bpl.n	8007b8e <__swsetup_r+0x7a>
 8007b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b6a:	b141      	cbz	r1, 8007b7e <__swsetup_r+0x6a>
 8007b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b70:	4299      	cmp	r1, r3
 8007b72:	d002      	beq.n	8007b7a <__swsetup_r+0x66>
 8007b74:	4630      	mov	r0, r6
 8007b76:	f001 fc7b 	bl	8009470 <_free_r>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	6363      	str	r3, [r4, #52]	; 0x34
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b84:	81a3      	strh	r3, [r4, #12]
 8007b86:	2300      	movs	r3, #0
 8007b88:	6063      	str	r3, [r4, #4]
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	f043 0308 	orr.w	r3, r3, #8
 8007b94:	81a3      	strh	r3, [r4, #12]
 8007b96:	6923      	ldr	r3, [r4, #16]
 8007b98:	b94b      	cbnz	r3, 8007bae <__swsetup_r+0x9a>
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ba4:	d003      	beq.n	8007bae <__swsetup_r+0x9a>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f001 f87d 	bl	8008ca8 <__smakebuf_r>
 8007bae:	89a0      	ldrh	r0, [r4, #12]
 8007bb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bb4:	f010 0301 	ands.w	r3, r0, #1
 8007bb8:	d00a      	beq.n	8007bd0 <__swsetup_r+0xbc>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60a3      	str	r3, [r4, #8]
 8007bbe:	6963      	ldr	r3, [r4, #20]
 8007bc0:	425b      	negs	r3, r3
 8007bc2:	61a3      	str	r3, [r4, #24]
 8007bc4:	6923      	ldr	r3, [r4, #16]
 8007bc6:	b943      	cbnz	r3, 8007bda <__swsetup_r+0xc6>
 8007bc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bcc:	d1ba      	bne.n	8007b44 <__swsetup_r+0x30>
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	0781      	lsls	r1, r0, #30
 8007bd2:	bf58      	it	pl
 8007bd4:	6963      	ldrpl	r3, [r4, #20]
 8007bd6:	60a3      	str	r3, [r4, #8]
 8007bd8:	e7f4      	b.n	8007bc4 <__swsetup_r+0xb0>
 8007bda:	2000      	movs	r0, #0
 8007bdc:	e7f7      	b.n	8007bce <__swsetup_r+0xba>
 8007bde:	bf00      	nop
 8007be0:	20000010 	.word	0x20000010
 8007be4:	0800a004 	.word	0x0800a004
 8007be8:	0800a024 	.word	0x0800a024
 8007bec:	08009fe4 	.word	0x08009fe4

08007bf0 <quorem>:
 8007bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf4:	6903      	ldr	r3, [r0, #16]
 8007bf6:	690c      	ldr	r4, [r1, #16]
 8007bf8:	42a3      	cmp	r3, r4
 8007bfa:	4607      	mov	r7, r0
 8007bfc:	f2c0 8081 	blt.w	8007d02 <quorem+0x112>
 8007c00:	3c01      	subs	r4, #1
 8007c02:	f101 0814 	add.w	r8, r1, #20
 8007c06:	f100 0514 	add.w	r5, r0, #20
 8007c0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c0e:	9301      	str	r3, [sp, #4]
 8007c10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c24:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c28:	d331      	bcc.n	8007c8e <quorem+0x9e>
 8007c2a:	f04f 0e00 	mov.w	lr, #0
 8007c2e:	4640      	mov	r0, r8
 8007c30:	46ac      	mov	ip, r5
 8007c32:	46f2      	mov	sl, lr
 8007c34:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c38:	b293      	uxth	r3, r2
 8007c3a:	fb06 e303 	mla	r3, r6, r3, lr
 8007c3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	ebaa 0303 	sub.w	r3, sl, r3
 8007c48:	0c12      	lsrs	r2, r2, #16
 8007c4a:	f8dc a000 	ldr.w	sl, [ip]
 8007c4e:	fb06 e202 	mla	r2, r6, r2, lr
 8007c52:	fa13 f38a 	uxtah	r3, r3, sl
 8007c56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c5a:	fa1f fa82 	uxth.w	sl, r2
 8007c5e:	f8dc 2000 	ldr.w	r2, [ip]
 8007c62:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007c66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c70:	4581      	cmp	r9, r0
 8007c72:	f84c 3b04 	str.w	r3, [ip], #4
 8007c76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c7a:	d2db      	bcs.n	8007c34 <quorem+0x44>
 8007c7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c80:	b92b      	cbnz	r3, 8007c8e <quorem+0x9e>
 8007c82:	9b01      	ldr	r3, [sp, #4]
 8007c84:	3b04      	subs	r3, #4
 8007c86:	429d      	cmp	r5, r3
 8007c88:	461a      	mov	r2, r3
 8007c8a:	d32e      	bcc.n	8007cea <quorem+0xfa>
 8007c8c:	613c      	str	r4, [r7, #16]
 8007c8e:	4638      	mov	r0, r7
 8007c90:	f001 fade 	bl	8009250 <__mcmp>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	db24      	blt.n	8007ce2 <quorem+0xf2>
 8007c98:	3601      	adds	r6, #1
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	f04f 0c00 	mov.w	ip, #0
 8007ca0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ca4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ca8:	b293      	uxth	r3, r2
 8007caa:	ebac 0303 	sub.w	r3, ip, r3
 8007cae:	0c12      	lsrs	r2, r2, #16
 8007cb0:	fa13 f38e 	uxtah	r3, r3, lr
 8007cb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007cb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cc2:	45c1      	cmp	r9, r8
 8007cc4:	f840 3b04 	str.w	r3, [r0], #4
 8007cc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ccc:	d2e8      	bcs.n	8007ca0 <quorem+0xb0>
 8007cce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cd6:	b922      	cbnz	r2, 8007ce2 <quorem+0xf2>
 8007cd8:	3b04      	subs	r3, #4
 8007cda:	429d      	cmp	r5, r3
 8007cdc:	461a      	mov	r2, r3
 8007cde:	d30a      	bcc.n	8007cf6 <quorem+0x106>
 8007ce0:	613c      	str	r4, [r7, #16]
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	b003      	add	sp, #12
 8007ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cea:	6812      	ldr	r2, [r2, #0]
 8007cec:	3b04      	subs	r3, #4
 8007cee:	2a00      	cmp	r2, #0
 8007cf0:	d1cc      	bne.n	8007c8c <quorem+0x9c>
 8007cf2:	3c01      	subs	r4, #1
 8007cf4:	e7c7      	b.n	8007c86 <quorem+0x96>
 8007cf6:	6812      	ldr	r2, [r2, #0]
 8007cf8:	3b04      	subs	r3, #4
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	d1f0      	bne.n	8007ce0 <quorem+0xf0>
 8007cfe:	3c01      	subs	r4, #1
 8007d00:	e7eb      	b.n	8007cda <quorem+0xea>
 8007d02:	2000      	movs	r0, #0
 8007d04:	e7ee      	b.n	8007ce4 <quorem+0xf4>
	...

08007d08 <_dtoa_r>:
 8007d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	ed2d 8b02 	vpush	{d8}
 8007d10:	ec57 6b10 	vmov	r6, r7, d0
 8007d14:	b095      	sub	sp, #84	; 0x54
 8007d16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d1c:	9105      	str	r1, [sp, #20]
 8007d1e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007d22:	4604      	mov	r4, r0
 8007d24:	9209      	str	r2, [sp, #36]	; 0x24
 8007d26:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d28:	b975      	cbnz	r5, 8007d48 <_dtoa_r+0x40>
 8007d2a:	2010      	movs	r0, #16
 8007d2c:	f000 fffc 	bl	8008d28 <malloc>
 8007d30:	4602      	mov	r2, r0
 8007d32:	6260      	str	r0, [r4, #36]	; 0x24
 8007d34:	b920      	cbnz	r0, 8007d40 <_dtoa_r+0x38>
 8007d36:	4bb2      	ldr	r3, [pc, #712]	; (8008000 <_dtoa_r+0x2f8>)
 8007d38:	21ea      	movs	r1, #234	; 0xea
 8007d3a:	48b2      	ldr	r0, [pc, #712]	; (8008004 <_dtoa_r+0x2fc>)
 8007d3c:	f001 fe02 	bl	8009944 <__assert_func>
 8007d40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d44:	6005      	str	r5, [r0, #0]
 8007d46:	60c5      	str	r5, [r0, #12]
 8007d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d4a:	6819      	ldr	r1, [r3, #0]
 8007d4c:	b151      	cbz	r1, 8007d64 <_dtoa_r+0x5c>
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	604a      	str	r2, [r1, #4]
 8007d52:	2301      	movs	r3, #1
 8007d54:	4093      	lsls	r3, r2
 8007d56:	608b      	str	r3, [r1, #8]
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f001 f83b 	bl	8008dd4 <_Bfree>
 8007d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d60:	2200      	movs	r2, #0
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	1e3b      	subs	r3, r7, #0
 8007d66:	bfb9      	ittee	lt
 8007d68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d6c:	9303      	strlt	r3, [sp, #12]
 8007d6e:	2300      	movge	r3, #0
 8007d70:	f8c8 3000 	strge.w	r3, [r8]
 8007d74:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007d78:	4ba3      	ldr	r3, [pc, #652]	; (8008008 <_dtoa_r+0x300>)
 8007d7a:	bfbc      	itt	lt
 8007d7c:	2201      	movlt	r2, #1
 8007d7e:	f8c8 2000 	strlt.w	r2, [r8]
 8007d82:	ea33 0309 	bics.w	r3, r3, r9
 8007d86:	d11b      	bne.n	8007dc0 <_dtoa_r+0xb8>
 8007d88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d94:	4333      	orrs	r3, r6
 8007d96:	f000 857a 	beq.w	800888e <_dtoa_r+0xb86>
 8007d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d9c:	b963      	cbnz	r3, 8007db8 <_dtoa_r+0xb0>
 8007d9e:	4b9b      	ldr	r3, [pc, #620]	; (800800c <_dtoa_r+0x304>)
 8007da0:	e024      	b.n	8007dec <_dtoa_r+0xe4>
 8007da2:	4b9b      	ldr	r3, [pc, #620]	; (8008010 <_dtoa_r+0x308>)
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	3308      	adds	r3, #8
 8007da8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	9800      	ldr	r0, [sp, #0]
 8007dae:	b015      	add	sp, #84	; 0x54
 8007db0:	ecbd 8b02 	vpop	{d8}
 8007db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db8:	4b94      	ldr	r3, [pc, #592]	; (800800c <_dtoa_r+0x304>)
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	3303      	adds	r3, #3
 8007dbe:	e7f3      	b.n	8007da8 <_dtoa_r+0xa0>
 8007dc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	ec51 0b17 	vmov	r0, r1, d7
 8007dca:	2300      	movs	r3, #0
 8007dcc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007dd0:	f7f8 fea2 	bl	8000b18 <__aeabi_dcmpeq>
 8007dd4:	4680      	mov	r8, r0
 8007dd6:	b158      	cbz	r0, 8007df0 <_dtoa_r+0xe8>
 8007dd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dda:	2301      	movs	r3, #1
 8007ddc:	6013      	str	r3, [r2, #0]
 8007dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 8551 	beq.w	8008888 <_dtoa_r+0xb80>
 8007de6:	488b      	ldr	r0, [pc, #556]	; (8008014 <_dtoa_r+0x30c>)
 8007de8:	6018      	str	r0, [r3, #0]
 8007dea:	1e43      	subs	r3, r0, #1
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	e7dd      	b.n	8007dac <_dtoa_r+0xa4>
 8007df0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007df4:	aa12      	add	r2, sp, #72	; 0x48
 8007df6:	a913      	add	r1, sp, #76	; 0x4c
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f001 facd 	bl	8009398 <__d2b>
 8007dfe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e02:	4683      	mov	fp, r0
 8007e04:	2d00      	cmp	r5, #0
 8007e06:	d07c      	beq.n	8007f02 <_dtoa_r+0x1fa>
 8007e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e0a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007e0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e12:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007e16:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007e1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007e1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e22:	4b7d      	ldr	r3, [pc, #500]	; (8008018 <_dtoa_r+0x310>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	4630      	mov	r0, r6
 8007e28:	4639      	mov	r1, r7
 8007e2a:	f7f8 fa55 	bl	80002d8 <__aeabi_dsub>
 8007e2e:	a36e      	add	r3, pc, #440	; (adr r3, 8007fe8 <_dtoa_r+0x2e0>)
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	f7f8 fc08 	bl	8000648 <__aeabi_dmul>
 8007e38:	a36d      	add	r3, pc, #436	; (adr r3, 8007ff0 <_dtoa_r+0x2e8>)
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	f7f8 fa4d 	bl	80002dc <__adddf3>
 8007e42:	4606      	mov	r6, r0
 8007e44:	4628      	mov	r0, r5
 8007e46:	460f      	mov	r7, r1
 8007e48:	f7f8 fb94 	bl	8000574 <__aeabi_i2d>
 8007e4c:	a36a      	add	r3, pc, #424	; (adr r3, 8007ff8 <_dtoa_r+0x2f0>)
 8007e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e52:	f7f8 fbf9 	bl	8000648 <__aeabi_dmul>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	f7f8 fa3d 	bl	80002dc <__adddf3>
 8007e62:	4606      	mov	r6, r0
 8007e64:	460f      	mov	r7, r1
 8007e66:	f7f8 fe9f 	bl	8000ba8 <__aeabi_d2iz>
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	4682      	mov	sl, r0
 8007e6e:	2300      	movs	r3, #0
 8007e70:	4630      	mov	r0, r6
 8007e72:	4639      	mov	r1, r7
 8007e74:	f7f8 fe5a 	bl	8000b2c <__aeabi_dcmplt>
 8007e78:	b148      	cbz	r0, 8007e8e <_dtoa_r+0x186>
 8007e7a:	4650      	mov	r0, sl
 8007e7c:	f7f8 fb7a 	bl	8000574 <__aeabi_i2d>
 8007e80:	4632      	mov	r2, r6
 8007e82:	463b      	mov	r3, r7
 8007e84:	f7f8 fe48 	bl	8000b18 <__aeabi_dcmpeq>
 8007e88:	b908      	cbnz	r0, 8007e8e <_dtoa_r+0x186>
 8007e8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e8e:	f1ba 0f16 	cmp.w	sl, #22
 8007e92:	d854      	bhi.n	8007f3e <_dtoa_r+0x236>
 8007e94:	4b61      	ldr	r3, [pc, #388]	; (800801c <_dtoa_r+0x314>)
 8007e96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ea2:	f7f8 fe43 	bl	8000b2c <__aeabi_dcmplt>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d04b      	beq.n	8007f42 <_dtoa_r+0x23a>
 8007eaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007eae:	2300      	movs	r3, #0
 8007eb0:	930e      	str	r3, [sp, #56]	; 0x38
 8007eb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007eb4:	1b5d      	subs	r5, r3, r5
 8007eb6:	1e6b      	subs	r3, r5, #1
 8007eb8:	9304      	str	r3, [sp, #16]
 8007eba:	bf43      	ittte	mi
 8007ebc:	2300      	movmi	r3, #0
 8007ebe:	f1c5 0801 	rsbmi	r8, r5, #1
 8007ec2:	9304      	strmi	r3, [sp, #16]
 8007ec4:	f04f 0800 	movpl.w	r8, #0
 8007ec8:	f1ba 0f00 	cmp.w	sl, #0
 8007ecc:	db3b      	blt.n	8007f46 <_dtoa_r+0x23e>
 8007ece:	9b04      	ldr	r3, [sp, #16]
 8007ed0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007ed4:	4453      	add	r3, sl
 8007ed6:	9304      	str	r3, [sp, #16]
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9306      	str	r3, [sp, #24]
 8007edc:	9b05      	ldr	r3, [sp, #20]
 8007ede:	2b09      	cmp	r3, #9
 8007ee0:	d869      	bhi.n	8007fb6 <_dtoa_r+0x2ae>
 8007ee2:	2b05      	cmp	r3, #5
 8007ee4:	bfc4      	itt	gt
 8007ee6:	3b04      	subgt	r3, #4
 8007ee8:	9305      	strgt	r3, [sp, #20]
 8007eea:	9b05      	ldr	r3, [sp, #20]
 8007eec:	f1a3 0302 	sub.w	r3, r3, #2
 8007ef0:	bfcc      	ite	gt
 8007ef2:	2500      	movgt	r5, #0
 8007ef4:	2501      	movle	r5, #1
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d869      	bhi.n	8007fce <_dtoa_r+0x2c6>
 8007efa:	e8df f003 	tbb	[pc, r3]
 8007efe:	4e2c      	.short	0x4e2c
 8007f00:	5a4c      	.short	0x5a4c
 8007f02:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007f06:	441d      	add	r5, r3
 8007f08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	bfc1      	itttt	gt
 8007f10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f14:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007f18:	fa09 f303 	lslgt.w	r3, r9, r3
 8007f1c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f20:	bfda      	itte	le
 8007f22:	f1c3 0320 	rsble	r3, r3, #32
 8007f26:	fa06 f003 	lslle.w	r0, r6, r3
 8007f2a:	4318      	orrgt	r0, r3
 8007f2c:	f7f8 fb12 	bl	8000554 <__aeabi_ui2d>
 8007f30:	2301      	movs	r3, #1
 8007f32:	4606      	mov	r6, r0
 8007f34:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007f38:	3d01      	subs	r5, #1
 8007f3a:	9310      	str	r3, [sp, #64]	; 0x40
 8007f3c:	e771      	b.n	8007e22 <_dtoa_r+0x11a>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e7b6      	b.n	8007eb0 <_dtoa_r+0x1a8>
 8007f42:	900e      	str	r0, [sp, #56]	; 0x38
 8007f44:	e7b5      	b.n	8007eb2 <_dtoa_r+0x1aa>
 8007f46:	f1ca 0300 	rsb	r3, sl, #0
 8007f4a:	9306      	str	r3, [sp, #24]
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	eba8 080a 	sub.w	r8, r8, sl
 8007f52:	930d      	str	r3, [sp, #52]	; 0x34
 8007f54:	e7c2      	b.n	8007edc <_dtoa_r+0x1d4>
 8007f56:	2300      	movs	r3, #0
 8007f58:	9308      	str	r3, [sp, #32]
 8007f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dc39      	bgt.n	8007fd4 <_dtoa_r+0x2cc>
 8007f60:	f04f 0901 	mov.w	r9, #1
 8007f64:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f68:	464b      	mov	r3, r9
 8007f6a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007f6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f70:	2200      	movs	r2, #0
 8007f72:	6042      	str	r2, [r0, #4]
 8007f74:	2204      	movs	r2, #4
 8007f76:	f102 0614 	add.w	r6, r2, #20
 8007f7a:	429e      	cmp	r6, r3
 8007f7c:	6841      	ldr	r1, [r0, #4]
 8007f7e:	d92f      	bls.n	8007fe0 <_dtoa_r+0x2d8>
 8007f80:	4620      	mov	r0, r4
 8007f82:	f000 fee7 	bl	8008d54 <_Balloc>
 8007f86:	9000      	str	r0, [sp, #0]
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d14b      	bne.n	8008024 <_dtoa_r+0x31c>
 8007f8c:	4b24      	ldr	r3, [pc, #144]	; (8008020 <_dtoa_r+0x318>)
 8007f8e:	4602      	mov	r2, r0
 8007f90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f94:	e6d1      	b.n	8007d3a <_dtoa_r+0x32>
 8007f96:	2301      	movs	r3, #1
 8007f98:	e7de      	b.n	8007f58 <_dtoa_r+0x250>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	9308      	str	r3, [sp, #32]
 8007f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa0:	eb0a 0903 	add.w	r9, sl, r3
 8007fa4:	f109 0301 	add.w	r3, r9, #1
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	9301      	str	r3, [sp, #4]
 8007fac:	bfb8      	it	lt
 8007fae:	2301      	movlt	r3, #1
 8007fb0:	e7dd      	b.n	8007f6e <_dtoa_r+0x266>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e7f2      	b.n	8007f9c <_dtoa_r+0x294>
 8007fb6:	2501      	movs	r5, #1
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9305      	str	r3, [sp, #20]
 8007fbc:	9508      	str	r5, [sp, #32]
 8007fbe:	f04f 39ff 	mov.w	r9, #4294967295
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007fc8:	2312      	movs	r3, #18
 8007fca:	9209      	str	r2, [sp, #36]	; 0x24
 8007fcc:	e7cf      	b.n	8007f6e <_dtoa_r+0x266>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	9308      	str	r3, [sp, #32]
 8007fd2:	e7f4      	b.n	8007fbe <_dtoa_r+0x2b6>
 8007fd4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007fd8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007fdc:	464b      	mov	r3, r9
 8007fde:	e7c6      	b.n	8007f6e <_dtoa_r+0x266>
 8007fe0:	3101      	adds	r1, #1
 8007fe2:	6041      	str	r1, [r0, #4]
 8007fe4:	0052      	lsls	r2, r2, #1
 8007fe6:	e7c6      	b.n	8007f76 <_dtoa_r+0x26e>
 8007fe8:	636f4361 	.word	0x636f4361
 8007fec:	3fd287a7 	.word	0x3fd287a7
 8007ff0:	8b60c8b3 	.word	0x8b60c8b3
 8007ff4:	3fc68a28 	.word	0x3fc68a28
 8007ff8:	509f79fb 	.word	0x509f79fb
 8007ffc:	3fd34413 	.word	0x3fd34413
 8008000:	08009f5a 	.word	0x08009f5a
 8008004:	08009f71 	.word	0x08009f71
 8008008:	7ff00000 	.word	0x7ff00000
 800800c:	08009f56 	.word	0x08009f56
 8008010:	08009f4d 	.word	0x08009f4d
 8008014:	08009e29 	.word	0x08009e29
 8008018:	3ff80000 	.word	0x3ff80000
 800801c:	0800a0d0 	.word	0x0800a0d0
 8008020:	08009fd0 	.word	0x08009fd0
 8008024:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008026:	9a00      	ldr	r2, [sp, #0]
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	9b01      	ldr	r3, [sp, #4]
 800802c:	2b0e      	cmp	r3, #14
 800802e:	f200 80ad 	bhi.w	800818c <_dtoa_r+0x484>
 8008032:	2d00      	cmp	r5, #0
 8008034:	f000 80aa 	beq.w	800818c <_dtoa_r+0x484>
 8008038:	f1ba 0f00 	cmp.w	sl, #0
 800803c:	dd36      	ble.n	80080ac <_dtoa_r+0x3a4>
 800803e:	4ac3      	ldr	r2, [pc, #780]	; (800834c <_dtoa_r+0x644>)
 8008040:	f00a 030f 	and.w	r3, sl, #15
 8008044:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008048:	ed93 7b00 	vldr	d7, [r3]
 800804c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008050:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008054:	eeb0 8a47 	vmov.f32	s16, s14
 8008058:	eef0 8a67 	vmov.f32	s17, s15
 800805c:	d016      	beq.n	800808c <_dtoa_r+0x384>
 800805e:	4bbc      	ldr	r3, [pc, #752]	; (8008350 <_dtoa_r+0x648>)
 8008060:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008068:	f7f8 fc18 	bl	800089c <__aeabi_ddiv>
 800806c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008070:	f007 070f 	and.w	r7, r7, #15
 8008074:	2503      	movs	r5, #3
 8008076:	4eb6      	ldr	r6, [pc, #728]	; (8008350 <_dtoa_r+0x648>)
 8008078:	b957      	cbnz	r7, 8008090 <_dtoa_r+0x388>
 800807a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800807e:	ec53 2b18 	vmov	r2, r3, d8
 8008082:	f7f8 fc0b 	bl	800089c <__aeabi_ddiv>
 8008086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800808a:	e029      	b.n	80080e0 <_dtoa_r+0x3d8>
 800808c:	2502      	movs	r5, #2
 800808e:	e7f2      	b.n	8008076 <_dtoa_r+0x36e>
 8008090:	07f9      	lsls	r1, r7, #31
 8008092:	d508      	bpl.n	80080a6 <_dtoa_r+0x39e>
 8008094:	ec51 0b18 	vmov	r0, r1, d8
 8008098:	e9d6 2300 	ldrd	r2, r3, [r6]
 800809c:	f7f8 fad4 	bl	8000648 <__aeabi_dmul>
 80080a0:	ec41 0b18 	vmov	d8, r0, r1
 80080a4:	3501      	adds	r5, #1
 80080a6:	107f      	asrs	r7, r7, #1
 80080a8:	3608      	adds	r6, #8
 80080aa:	e7e5      	b.n	8008078 <_dtoa_r+0x370>
 80080ac:	f000 80a6 	beq.w	80081fc <_dtoa_r+0x4f4>
 80080b0:	f1ca 0600 	rsb	r6, sl, #0
 80080b4:	4ba5      	ldr	r3, [pc, #660]	; (800834c <_dtoa_r+0x644>)
 80080b6:	4fa6      	ldr	r7, [pc, #664]	; (8008350 <_dtoa_r+0x648>)
 80080b8:	f006 020f 	and.w	r2, r6, #15
 80080bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080c8:	f7f8 fabe 	bl	8000648 <__aeabi_dmul>
 80080cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080d0:	1136      	asrs	r6, r6, #4
 80080d2:	2300      	movs	r3, #0
 80080d4:	2502      	movs	r5, #2
 80080d6:	2e00      	cmp	r6, #0
 80080d8:	f040 8085 	bne.w	80081e6 <_dtoa_r+0x4de>
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1d2      	bne.n	8008086 <_dtoa_r+0x37e>
 80080e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 808c 	beq.w	8008200 <_dtoa_r+0x4f8>
 80080e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080ec:	4b99      	ldr	r3, [pc, #612]	; (8008354 <_dtoa_r+0x64c>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	4630      	mov	r0, r6
 80080f2:	4639      	mov	r1, r7
 80080f4:	f7f8 fd1a 	bl	8000b2c <__aeabi_dcmplt>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	f000 8081 	beq.w	8008200 <_dtoa_r+0x4f8>
 80080fe:	9b01      	ldr	r3, [sp, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d07d      	beq.n	8008200 <_dtoa_r+0x4f8>
 8008104:	f1b9 0f00 	cmp.w	r9, #0
 8008108:	dd3c      	ble.n	8008184 <_dtoa_r+0x47c>
 800810a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800810e:	9307      	str	r3, [sp, #28]
 8008110:	2200      	movs	r2, #0
 8008112:	4b91      	ldr	r3, [pc, #580]	; (8008358 <_dtoa_r+0x650>)
 8008114:	4630      	mov	r0, r6
 8008116:	4639      	mov	r1, r7
 8008118:	f7f8 fa96 	bl	8000648 <__aeabi_dmul>
 800811c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008120:	3501      	adds	r5, #1
 8008122:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008126:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800812a:	4628      	mov	r0, r5
 800812c:	f7f8 fa22 	bl	8000574 <__aeabi_i2d>
 8008130:	4632      	mov	r2, r6
 8008132:	463b      	mov	r3, r7
 8008134:	f7f8 fa88 	bl	8000648 <__aeabi_dmul>
 8008138:	4b88      	ldr	r3, [pc, #544]	; (800835c <_dtoa_r+0x654>)
 800813a:	2200      	movs	r2, #0
 800813c:	f7f8 f8ce 	bl	80002dc <__adddf3>
 8008140:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008148:	9303      	str	r3, [sp, #12]
 800814a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800814c:	2b00      	cmp	r3, #0
 800814e:	d15c      	bne.n	800820a <_dtoa_r+0x502>
 8008150:	4b83      	ldr	r3, [pc, #524]	; (8008360 <_dtoa_r+0x658>)
 8008152:	2200      	movs	r2, #0
 8008154:	4630      	mov	r0, r6
 8008156:	4639      	mov	r1, r7
 8008158:	f7f8 f8be 	bl	80002d8 <__aeabi_dsub>
 800815c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008160:	4606      	mov	r6, r0
 8008162:	460f      	mov	r7, r1
 8008164:	f7f8 fd00 	bl	8000b68 <__aeabi_dcmpgt>
 8008168:	2800      	cmp	r0, #0
 800816a:	f040 8296 	bne.w	800869a <_dtoa_r+0x992>
 800816e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008172:	4630      	mov	r0, r6
 8008174:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008178:	4639      	mov	r1, r7
 800817a:	f7f8 fcd7 	bl	8000b2c <__aeabi_dcmplt>
 800817e:	2800      	cmp	r0, #0
 8008180:	f040 8288 	bne.w	8008694 <_dtoa_r+0x98c>
 8008184:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008188:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800818c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800818e:	2b00      	cmp	r3, #0
 8008190:	f2c0 8158 	blt.w	8008444 <_dtoa_r+0x73c>
 8008194:	f1ba 0f0e 	cmp.w	sl, #14
 8008198:	f300 8154 	bgt.w	8008444 <_dtoa_r+0x73c>
 800819c:	4b6b      	ldr	r3, [pc, #428]	; (800834c <_dtoa_r+0x644>)
 800819e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80081a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f280 80e3 	bge.w	8008374 <_dtoa_r+0x66c>
 80081ae:	9b01      	ldr	r3, [sp, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f300 80df 	bgt.w	8008374 <_dtoa_r+0x66c>
 80081b6:	f040 826d 	bne.w	8008694 <_dtoa_r+0x98c>
 80081ba:	4b69      	ldr	r3, [pc, #420]	; (8008360 <_dtoa_r+0x658>)
 80081bc:	2200      	movs	r2, #0
 80081be:	4640      	mov	r0, r8
 80081c0:	4649      	mov	r1, r9
 80081c2:	f7f8 fa41 	bl	8000648 <__aeabi_dmul>
 80081c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081ca:	f7f8 fcc3 	bl	8000b54 <__aeabi_dcmpge>
 80081ce:	9e01      	ldr	r6, [sp, #4]
 80081d0:	4637      	mov	r7, r6
 80081d2:	2800      	cmp	r0, #0
 80081d4:	f040 8243 	bne.w	800865e <_dtoa_r+0x956>
 80081d8:	9d00      	ldr	r5, [sp, #0]
 80081da:	2331      	movs	r3, #49	; 0x31
 80081dc:	f805 3b01 	strb.w	r3, [r5], #1
 80081e0:	f10a 0a01 	add.w	sl, sl, #1
 80081e4:	e23f      	b.n	8008666 <_dtoa_r+0x95e>
 80081e6:	07f2      	lsls	r2, r6, #31
 80081e8:	d505      	bpl.n	80081f6 <_dtoa_r+0x4ee>
 80081ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ee:	f7f8 fa2b 	bl	8000648 <__aeabi_dmul>
 80081f2:	3501      	adds	r5, #1
 80081f4:	2301      	movs	r3, #1
 80081f6:	1076      	asrs	r6, r6, #1
 80081f8:	3708      	adds	r7, #8
 80081fa:	e76c      	b.n	80080d6 <_dtoa_r+0x3ce>
 80081fc:	2502      	movs	r5, #2
 80081fe:	e76f      	b.n	80080e0 <_dtoa_r+0x3d8>
 8008200:	9b01      	ldr	r3, [sp, #4]
 8008202:	f8cd a01c 	str.w	sl, [sp, #28]
 8008206:	930c      	str	r3, [sp, #48]	; 0x30
 8008208:	e78d      	b.n	8008126 <_dtoa_r+0x41e>
 800820a:	9900      	ldr	r1, [sp, #0]
 800820c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800820e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008210:	4b4e      	ldr	r3, [pc, #312]	; (800834c <_dtoa_r+0x644>)
 8008212:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008216:	4401      	add	r1, r0
 8008218:	9102      	str	r1, [sp, #8]
 800821a:	9908      	ldr	r1, [sp, #32]
 800821c:	eeb0 8a47 	vmov.f32	s16, s14
 8008220:	eef0 8a67 	vmov.f32	s17, s15
 8008224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008228:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800822c:	2900      	cmp	r1, #0
 800822e:	d045      	beq.n	80082bc <_dtoa_r+0x5b4>
 8008230:	494c      	ldr	r1, [pc, #304]	; (8008364 <_dtoa_r+0x65c>)
 8008232:	2000      	movs	r0, #0
 8008234:	f7f8 fb32 	bl	800089c <__aeabi_ddiv>
 8008238:	ec53 2b18 	vmov	r2, r3, d8
 800823c:	f7f8 f84c 	bl	80002d8 <__aeabi_dsub>
 8008240:	9d00      	ldr	r5, [sp, #0]
 8008242:	ec41 0b18 	vmov	d8, r0, r1
 8008246:	4639      	mov	r1, r7
 8008248:	4630      	mov	r0, r6
 800824a:	f7f8 fcad 	bl	8000ba8 <__aeabi_d2iz>
 800824e:	900c      	str	r0, [sp, #48]	; 0x30
 8008250:	f7f8 f990 	bl	8000574 <__aeabi_i2d>
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	4630      	mov	r0, r6
 800825a:	4639      	mov	r1, r7
 800825c:	f7f8 f83c 	bl	80002d8 <__aeabi_dsub>
 8008260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008262:	3330      	adds	r3, #48	; 0x30
 8008264:	f805 3b01 	strb.w	r3, [r5], #1
 8008268:	ec53 2b18 	vmov	r2, r3, d8
 800826c:	4606      	mov	r6, r0
 800826e:	460f      	mov	r7, r1
 8008270:	f7f8 fc5c 	bl	8000b2c <__aeabi_dcmplt>
 8008274:	2800      	cmp	r0, #0
 8008276:	d165      	bne.n	8008344 <_dtoa_r+0x63c>
 8008278:	4632      	mov	r2, r6
 800827a:	463b      	mov	r3, r7
 800827c:	4935      	ldr	r1, [pc, #212]	; (8008354 <_dtoa_r+0x64c>)
 800827e:	2000      	movs	r0, #0
 8008280:	f7f8 f82a 	bl	80002d8 <__aeabi_dsub>
 8008284:	ec53 2b18 	vmov	r2, r3, d8
 8008288:	f7f8 fc50 	bl	8000b2c <__aeabi_dcmplt>
 800828c:	2800      	cmp	r0, #0
 800828e:	f040 80b9 	bne.w	8008404 <_dtoa_r+0x6fc>
 8008292:	9b02      	ldr	r3, [sp, #8]
 8008294:	429d      	cmp	r5, r3
 8008296:	f43f af75 	beq.w	8008184 <_dtoa_r+0x47c>
 800829a:	4b2f      	ldr	r3, [pc, #188]	; (8008358 <_dtoa_r+0x650>)
 800829c:	ec51 0b18 	vmov	r0, r1, d8
 80082a0:	2200      	movs	r2, #0
 80082a2:	f7f8 f9d1 	bl	8000648 <__aeabi_dmul>
 80082a6:	4b2c      	ldr	r3, [pc, #176]	; (8008358 <_dtoa_r+0x650>)
 80082a8:	ec41 0b18 	vmov	d8, r0, r1
 80082ac:	2200      	movs	r2, #0
 80082ae:	4630      	mov	r0, r6
 80082b0:	4639      	mov	r1, r7
 80082b2:	f7f8 f9c9 	bl	8000648 <__aeabi_dmul>
 80082b6:	4606      	mov	r6, r0
 80082b8:	460f      	mov	r7, r1
 80082ba:	e7c4      	b.n	8008246 <_dtoa_r+0x53e>
 80082bc:	ec51 0b17 	vmov	r0, r1, d7
 80082c0:	f7f8 f9c2 	bl	8000648 <__aeabi_dmul>
 80082c4:	9b02      	ldr	r3, [sp, #8]
 80082c6:	9d00      	ldr	r5, [sp, #0]
 80082c8:	930c      	str	r3, [sp, #48]	; 0x30
 80082ca:	ec41 0b18 	vmov	d8, r0, r1
 80082ce:	4639      	mov	r1, r7
 80082d0:	4630      	mov	r0, r6
 80082d2:	f7f8 fc69 	bl	8000ba8 <__aeabi_d2iz>
 80082d6:	9011      	str	r0, [sp, #68]	; 0x44
 80082d8:	f7f8 f94c 	bl	8000574 <__aeabi_i2d>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	4630      	mov	r0, r6
 80082e2:	4639      	mov	r1, r7
 80082e4:	f7f7 fff8 	bl	80002d8 <__aeabi_dsub>
 80082e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082ea:	3330      	adds	r3, #48	; 0x30
 80082ec:	f805 3b01 	strb.w	r3, [r5], #1
 80082f0:	9b02      	ldr	r3, [sp, #8]
 80082f2:	429d      	cmp	r5, r3
 80082f4:	4606      	mov	r6, r0
 80082f6:	460f      	mov	r7, r1
 80082f8:	f04f 0200 	mov.w	r2, #0
 80082fc:	d134      	bne.n	8008368 <_dtoa_r+0x660>
 80082fe:	4b19      	ldr	r3, [pc, #100]	; (8008364 <_dtoa_r+0x65c>)
 8008300:	ec51 0b18 	vmov	r0, r1, d8
 8008304:	f7f7 ffea 	bl	80002dc <__adddf3>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4630      	mov	r0, r6
 800830e:	4639      	mov	r1, r7
 8008310:	f7f8 fc2a 	bl	8000b68 <__aeabi_dcmpgt>
 8008314:	2800      	cmp	r0, #0
 8008316:	d175      	bne.n	8008404 <_dtoa_r+0x6fc>
 8008318:	ec53 2b18 	vmov	r2, r3, d8
 800831c:	4911      	ldr	r1, [pc, #68]	; (8008364 <_dtoa_r+0x65c>)
 800831e:	2000      	movs	r0, #0
 8008320:	f7f7 ffda 	bl	80002d8 <__aeabi_dsub>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	4630      	mov	r0, r6
 800832a:	4639      	mov	r1, r7
 800832c:	f7f8 fbfe 	bl	8000b2c <__aeabi_dcmplt>
 8008330:	2800      	cmp	r0, #0
 8008332:	f43f af27 	beq.w	8008184 <_dtoa_r+0x47c>
 8008336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008338:	1e6b      	subs	r3, r5, #1
 800833a:	930c      	str	r3, [sp, #48]	; 0x30
 800833c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008340:	2b30      	cmp	r3, #48	; 0x30
 8008342:	d0f8      	beq.n	8008336 <_dtoa_r+0x62e>
 8008344:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008348:	e04a      	b.n	80083e0 <_dtoa_r+0x6d8>
 800834a:	bf00      	nop
 800834c:	0800a0d0 	.word	0x0800a0d0
 8008350:	0800a0a8 	.word	0x0800a0a8
 8008354:	3ff00000 	.word	0x3ff00000
 8008358:	40240000 	.word	0x40240000
 800835c:	401c0000 	.word	0x401c0000
 8008360:	40140000 	.word	0x40140000
 8008364:	3fe00000 	.word	0x3fe00000
 8008368:	4baf      	ldr	r3, [pc, #700]	; (8008628 <_dtoa_r+0x920>)
 800836a:	f7f8 f96d 	bl	8000648 <__aeabi_dmul>
 800836e:	4606      	mov	r6, r0
 8008370:	460f      	mov	r7, r1
 8008372:	e7ac      	b.n	80082ce <_dtoa_r+0x5c6>
 8008374:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008378:	9d00      	ldr	r5, [sp, #0]
 800837a:	4642      	mov	r2, r8
 800837c:	464b      	mov	r3, r9
 800837e:	4630      	mov	r0, r6
 8008380:	4639      	mov	r1, r7
 8008382:	f7f8 fa8b 	bl	800089c <__aeabi_ddiv>
 8008386:	f7f8 fc0f 	bl	8000ba8 <__aeabi_d2iz>
 800838a:	9002      	str	r0, [sp, #8]
 800838c:	f7f8 f8f2 	bl	8000574 <__aeabi_i2d>
 8008390:	4642      	mov	r2, r8
 8008392:	464b      	mov	r3, r9
 8008394:	f7f8 f958 	bl	8000648 <__aeabi_dmul>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	4630      	mov	r0, r6
 800839e:	4639      	mov	r1, r7
 80083a0:	f7f7 ff9a 	bl	80002d8 <__aeabi_dsub>
 80083a4:	9e02      	ldr	r6, [sp, #8]
 80083a6:	9f01      	ldr	r7, [sp, #4]
 80083a8:	3630      	adds	r6, #48	; 0x30
 80083aa:	f805 6b01 	strb.w	r6, [r5], #1
 80083ae:	9e00      	ldr	r6, [sp, #0]
 80083b0:	1bae      	subs	r6, r5, r6
 80083b2:	42b7      	cmp	r7, r6
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	d137      	bne.n	800842a <_dtoa_r+0x722>
 80083ba:	f7f7 ff8f 	bl	80002dc <__adddf3>
 80083be:	4642      	mov	r2, r8
 80083c0:	464b      	mov	r3, r9
 80083c2:	4606      	mov	r6, r0
 80083c4:	460f      	mov	r7, r1
 80083c6:	f7f8 fbcf 	bl	8000b68 <__aeabi_dcmpgt>
 80083ca:	b9c8      	cbnz	r0, 8008400 <_dtoa_r+0x6f8>
 80083cc:	4642      	mov	r2, r8
 80083ce:	464b      	mov	r3, r9
 80083d0:	4630      	mov	r0, r6
 80083d2:	4639      	mov	r1, r7
 80083d4:	f7f8 fba0 	bl	8000b18 <__aeabi_dcmpeq>
 80083d8:	b110      	cbz	r0, 80083e0 <_dtoa_r+0x6d8>
 80083da:	9b02      	ldr	r3, [sp, #8]
 80083dc:	07d9      	lsls	r1, r3, #31
 80083de:	d40f      	bmi.n	8008400 <_dtoa_r+0x6f8>
 80083e0:	4620      	mov	r0, r4
 80083e2:	4659      	mov	r1, fp
 80083e4:	f000 fcf6 	bl	8008dd4 <_Bfree>
 80083e8:	2300      	movs	r3, #0
 80083ea:	702b      	strb	r3, [r5, #0]
 80083ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083ee:	f10a 0001 	add.w	r0, sl, #1
 80083f2:	6018      	str	r0, [r3, #0]
 80083f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f43f acd8 	beq.w	8007dac <_dtoa_r+0xa4>
 80083fc:	601d      	str	r5, [r3, #0]
 80083fe:	e4d5      	b.n	8007dac <_dtoa_r+0xa4>
 8008400:	f8cd a01c 	str.w	sl, [sp, #28]
 8008404:	462b      	mov	r3, r5
 8008406:	461d      	mov	r5, r3
 8008408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800840c:	2a39      	cmp	r2, #57	; 0x39
 800840e:	d108      	bne.n	8008422 <_dtoa_r+0x71a>
 8008410:	9a00      	ldr	r2, [sp, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	d1f7      	bne.n	8008406 <_dtoa_r+0x6fe>
 8008416:	9a07      	ldr	r2, [sp, #28]
 8008418:	9900      	ldr	r1, [sp, #0]
 800841a:	3201      	adds	r2, #1
 800841c:	9207      	str	r2, [sp, #28]
 800841e:	2230      	movs	r2, #48	; 0x30
 8008420:	700a      	strb	r2, [r1, #0]
 8008422:	781a      	ldrb	r2, [r3, #0]
 8008424:	3201      	adds	r2, #1
 8008426:	701a      	strb	r2, [r3, #0]
 8008428:	e78c      	b.n	8008344 <_dtoa_r+0x63c>
 800842a:	4b7f      	ldr	r3, [pc, #508]	; (8008628 <_dtoa_r+0x920>)
 800842c:	2200      	movs	r2, #0
 800842e:	f7f8 f90b 	bl	8000648 <__aeabi_dmul>
 8008432:	2200      	movs	r2, #0
 8008434:	2300      	movs	r3, #0
 8008436:	4606      	mov	r6, r0
 8008438:	460f      	mov	r7, r1
 800843a:	f7f8 fb6d 	bl	8000b18 <__aeabi_dcmpeq>
 800843e:	2800      	cmp	r0, #0
 8008440:	d09b      	beq.n	800837a <_dtoa_r+0x672>
 8008442:	e7cd      	b.n	80083e0 <_dtoa_r+0x6d8>
 8008444:	9a08      	ldr	r2, [sp, #32]
 8008446:	2a00      	cmp	r2, #0
 8008448:	f000 80c4 	beq.w	80085d4 <_dtoa_r+0x8cc>
 800844c:	9a05      	ldr	r2, [sp, #20]
 800844e:	2a01      	cmp	r2, #1
 8008450:	f300 80a8 	bgt.w	80085a4 <_dtoa_r+0x89c>
 8008454:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008456:	2a00      	cmp	r2, #0
 8008458:	f000 80a0 	beq.w	800859c <_dtoa_r+0x894>
 800845c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008460:	9e06      	ldr	r6, [sp, #24]
 8008462:	4645      	mov	r5, r8
 8008464:	9a04      	ldr	r2, [sp, #16]
 8008466:	2101      	movs	r1, #1
 8008468:	441a      	add	r2, r3
 800846a:	4620      	mov	r0, r4
 800846c:	4498      	add	r8, r3
 800846e:	9204      	str	r2, [sp, #16]
 8008470:	f000 fd6c 	bl	8008f4c <__i2b>
 8008474:	4607      	mov	r7, r0
 8008476:	2d00      	cmp	r5, #0
 8008478:	dd0b      	ble.n	8008492 <_dtoa_r+0x78a>
 800847a:	9b04      	ldr	r3, [sp, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	dd08      	ble.n	8008492 <_dtoa_r+0x78a>
 8008480:	42ab      	cmp	r3, r5
 8008482:	9a04      	ldr	r2, [sp, #16]
 8008484:	bfa8      	it	ge
 8008486:	462b      	movge	r3, r5
 8008488:	eba8 0803 	sub.w	r8, r8, r3
 800848c:	1aed      	subs	r5, r5, r3
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	9304      	str	r3, [sp, #16]
 8008492:	9b06      	ldr	r3, [sp, #24]
 8008494:	b1fb      	cbz	r3, 80084d6 <_dtoa_r+0x7ce>
 8008496:	9b08      	ldr	r3, [sp, #32]
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 809f 	beq.w	80085dc <_dtoa_r+0x8d4>
 800849e:	2e00      	cmp	r6, #0
 80084a0:	dd11      	ble.n	80084c6 <_dtoa_r+0x7be>
 80084a2:	4639      	mov	r1, r7
 80084a4:	4632      	mov	r2, r6
 80084a6:	4620      	mov	r0, r4
 80084a8:	f000 fe0c 	bl	80090c4 <__pow5mult>
 80084ac:	465a      	mov	r2, fp
 80084ae:	4601      	mov	r1, r0
 80084b0:	4607      	mov	r7, r0
 80084b2:	4620      	mov	r0, r4
 80084b4:	f000 fd60 	bl	8008f78 <__multiply>
 80084b8:	4659      	mov	r1, fp
 80084ba:	9007      	str	r0, [sp, #28]
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 fc89 	bl	8008dd4 <_Bfree>
 80084c2:	9b07      	ldr	r3, [sp, #28]
 80084c4:	469b      	mov	fp, r3
 80084c6:	9b06      	ldr	r3, [sp, #24]
 80084c8:	1b9a      	subs	r2, r3, r6
 80084ca:	d004      	beq.n	80084d6 <_dtoa_r+0x7ce>
 80084cc:	4659      	mov	r1, fp
 80084ce:	4620      	mov	r0, r4
 80084d0:	f000 fdf8 	bl	80090c4 <__pow5mult>
 80084d4:	4683      	mov	fp, r0
 80084d6:	2101      	movs	r1, #1
 80084d8:	4620      	mov	r0, r4
 80084da:	f000 fd37 	bl	8008f4c <__i2b>
 80084de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	4606      	mov	r6, r0
 80084e4:	dd7c      	ble.n	80085e0 <_dtoa_r+0x8d8>
 80084e6:	461a      	mov	r2, r3
 80084e8:	4601      	mov	r1, r0
 80084ea:	4620      	mov	r0, r4
 80084ec:	f000 fdea 	bl	80090c4 <__pow5mult>
 80084f0:	9b05      	ldr	r3, [sp, #20]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	4606      	mov	r6, r0
 80084f6:	dd76      	ble.n	80085e6 <_dtoa_r+0x8de>
 80084f8:	2300      	movs	r3, #0
 80084fa:	9306      	str	r3, [sp, #24]
 80084fc:	6933      	ldr	r3, [r6, #16]
 80084fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008502:	6918      	ldr	r0, [r3, #16]
 8008504:	f000 fcd2 	bl	8008eac <__hi0bits>
 8008508:	f1c0 0020 	rsb	r0, r0, #32
 800850c:	9b04      	ldr	r3, [sp, #16]
 800850e:	4418      	add	r0, r3
 8008510:	f010 001f 	ands.w	r0, r0, #31
 8008514:	f000 8086 	beq.w	8008624 <_dtoa_r+0x91c>
 8008518:	f1c0 0320 	rsb	r3, r0, #32
 800851c:	2b04      	cmp	r3, #4
 800851e:	dd7f      	ble.n	8008620 <_dtoa_r+0x918>
 8008520:	f1c0 001c 	rsb	r0, r0, #28
 8008524:	9b04      	ldr	r3, [sp, #16]
 8008526:	4403      	add	r3, r0
 8008528:	4480      	add	r8, r0
 800852a:	4405      	add	r5, r0
 800852c:	9304      	str	r3, [sp, #16]
 800852e:	f1b8 0f00 	cmp.w	r8, #0
 8008532:	dd05      	ble.n	8008540 <_dtoa_r+0x838>
 8008534:	4659      	mov	r1, fp
 8008536:	4642      	mov	r2, r8
 8008538:	4620      	mov	r0, r4
 800853a:	f000 fe1d 	bl	8009178 <__lshift>
 800853e:	4683      	mov	fp, r0
 8008540:	9b04      	ldr	r3, [sp, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	dd05      	ble.n	8008552 <_dtoa_r+0x84a>
 8008546:	4631      	mov	r1, r6
 8008548:	461a      	mov	r2, r3
 800854a:	4620      	mov	r0, r4
 800854c:	f000 fe14 	bl	8009178 <__lshift>
 8008550:	4606      	mov	r6, r0
 8008552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008554:	2b00      	cmp	r3, #0
 8008556:	d069      	beq.n	800862c <_dtoa_r+0x924>
 8008558:	4631      	mov	r1, r6
 800855a:	4658      	mov	r0, fp
 800855c:	f000 fe78 	bl	8009250 <__mcmp>
 8008560:	2800      	cmp	r0, #0
 8008562:	da63      	bge.n	800862c <_dtoa_r+0x924>
 8008564:	2300      	movs	r3, #0
 8008566:	4659      	mov	r1, fp
 8008568:	220a      	movs	r2, #10
 800856a:	4620      	mov	r0, r4
 800856c:	f000 fc54 	bl	8008e18 <__multadd>
 8008570:	9b08      	ldr	r3, [sp, #32]
 8008572:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008576:	4683      	mov	fp, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 818f 	beq.w	800889c <_dtoa_r+0xb94>
 800857e:	4639      	mov	r1, r7
 8008580:	2300      	movs	r3, #0
 8008582:	220a      	movs	r2, #10
 8008584:	4620      	mov	r0, r4
 8008586:	f000 fc47 	bl	8008e18 <__multadd>
 800858a:	f1b9 0f00 	cmp.w	r9, #0
 800858e:	4607      	mov	r7, r0
 8008590:	f300 808e 	bgt.w	80086b0 <_dtoa_r+0x9a8>
 8008594:	9b05      	ldr	r3, [sp, #20]
 8008596:	2b02      	cmp	r3, #2
 8008598:	dc50      	bgt.n	800863c <_dtoa_r+0x934>
 800859a:	e089      	b.n	80086b0 <_dtoa_r+0x9a8>
 800859c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800859e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085a2:	e75d      	b.n	8008460 <_dtoa_r+0x758>
 80085a4:	9b01      	ldr	r3, [sp, #4]
 80085a6:	1e5e      	subs	r6, r3, #1
 80085a8:	9b06      	ldr	r3, [sp, #24]
 80085aa:	42b3      	cmp	r3, r6
 80085ac:	bfbf      	itttt	lt
 80085ae:	9b06      	ldrlt	r3, [sp, #24]
 80085b0:	9606      	strlt	r6, [sp, #24]
 80085b2:	1af2      	sublt	r2, r6, r3
 80085b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80085b6:	bfb6      	itet	lt
 80085b8:	189b      	addlt	r3, r3, r2
 80085ba:	1b9e      	subge	r6, r3, r6
 80085bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80085be:	9b01      	ldr	r3, [sp, #4]
 80085c0:	bfb8      	it	lt
 80085c2:	2600      	movlt	r6, #0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	bfb5      	itete	lt
 80085c8:	eba8 0503 	sublt.w	r5, r8, r3
 80085cc:	9b01      	ldrge	r3, [sp, #4]
 80085ce:	2300      	movlt	r3, #0
 80085d0:	4645      	movge	r5, r8
 80085d2:	e747      	b.n	8008464 <_dtoa_r+0x75c>
 80085d4:	9e06      	ldr	r6, [sp, #24]
 80085d6:	9f08      	ldr	r7, [sp, #32]
 80085d8:	4645      	mov	r5, r8
 80085da:	e74c      	b.n	8008476 <_dtoa_r+0x76e>
 80085dc:	9a06      	ldr	r2, [sp, #24]
 80085de:	e775      	b.n	80084cc <_dtoa_r+0x7c4>
 80085e0:	9b05      	ldr	r3, [sp, #20]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	dc18      	bgt.n	8008618 <_dtoa_r+0x910>
 80085e6:	9b02      	ldr	r3, [sp, #8]
 80085e8:	b9b3      	cbnz	r3, 8008618 <_dtoa_r+0x910>
 80085ea:	9b03      	ldr	r3, [sp, #12]
 80085ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085f0:	b9a3      	cbnz	r3, 800861c <_dtoa_r+0x914>
 80085f2:	9b03      	ldr	r3, [sp, #12]
 80085f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085f8:	0d1b      	lsrs	r3, r3, #20
 80085fa:	051b      	lsls	r3, r3, #20
 80085fc:	b12b      	cbz	r3, 800860a <_dtoa_r+0x902>
 80085fe:	9b04      	ldr	r3, [sp, #16]
 8008600:	3301      	adds	r3, #1
 8008602:	9304      	str	r3, [sp, #16]
 8008604:	f108 0801 	add.w	r8, r8, #1
 8008608:	2301      	movs	r3, #1
 800860a:	9306      	str	r3, [sp, #24]
 800860c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800860e:	2b00      	cmp	r3, #0
 8008610:	f47f af74 	bne.w	80084fc <_dtoa_r+0x7f4>
 8008614:	2001      	movs	r0, #1
 8008616:	e779      	b.n	800850c <_dtoa_r+0x804>
 8008618:	2300      	movs	r3, #0
 800861a:	e7f6      	b.n	800860a <_dtoa_r+0x902>
 800861c:	9b02      	ldr	r3, [sp, #8]
 800861e:	e7f4      	b.n	800860a <_dtoa_r+0x902>
 8008620:	d085      	beq.n	800852e <_dtoa_r+0x826>
 8008622:	4618      	mov	r0, r3
 8008624:	301c      	adds	r0, #28
 8008626:	e77d      	b.n	8008524 <_dtoa_r+0x81c>
 8008628:	40240000 	.word	0x40240000
 800862c:	9b01      	ldr	r3, [sp, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	dc38      	bgt.n	80086a4 <_dtoa_r+0x99c>
 8008632:	9b05      	ldr	r3, [sp, #20]
 8008634:	2b02      	cmp	r3, #2
 8008636:	dd35      	ble.n	80086a4 <_dtoa_r+0x99c>
 8008638:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800863c:	f1b9 0f00 	cmp.w	r9, #0
 8008640:	d10d      	bne.n	800865e <_dtoa_r+0x956>
 8008642:	4631      	mov	r1, r6
 8008644:	464b      	mov	r3, r9
 8008646:	2205      	movs	r2, #5
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fbe5 	bl	8008e18 <__multadd>
 800864e:	4601      	mov	r1, r0
 8008650:	4606      	mov	r6, r0
 8008652:	4658      	mov	r0, fp
 8008654:	f000 fdfc 	bl	8009250 <__mcmp>
 8008658:	2800      	cmp	r0, #0
 800865a:	f73f adbd 	bgt.w	80081d8 <_dtoa_r+0x4d0>
 800865e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008660:	9d00      	ldr	r5, [sp, #0]
 8008662:	ea6f 0a03 	mvn.w	sl, r3
 8008666:	f04f 0800 	mov.w	r8, #0
 800866a:	4631      	mov	r1, r6
 800866c:	4620      	mov	r0, r4
 800866e:	f000 fbb1 	bl	8008dd4 <_Bfree>
 8008672:	2f00      	cmp	r7, #0
 8008674:	f43f aeb4 	beq.w	80083e0 <_dtoa_r+0x6d8>
 8008678:	f1b8 0f00 	cmp.w	r8, #0
 800867c:	d005      	beq.n	800868a <_dtoa_r+0x982>
 800867e:	45b8      	cmp	r8, r7
 8008680:	d003      	beq.n	800868a <_dtoa_r+0x982>
 8008682:	4641      	mov	r1, r8
 8008684:	4620      	mov	r0, r4
 8008686:	f000 fba5 	bl	8008dd4 <_Bfree>
 800868a:	4639      	mov	r1, r7
 800868c:	4620      	mov	r0, r4
 800868e:	f000 fba1 	bl	8008dd4 <_Bfree>
 8008692:	e6a5      	b.n	80083e0 <_dtoa_r+0x6d8>
 8008694:	2600      	movs	r6, #0
 8008696:	4637      	mov	r7, r6
 8008698:	e7e1      	b.n	800865e <_dtoa_r+0x956>
 800869a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800869c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80086a0:	4637      	mov	r7, r6
 80086a2:	e599      	b.n	80081d8 <_dtoa_r+0x4d0>
 80086a4:	9b08      	ldr	r3, [sp, #32]
 80086a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 80fd 	beq.w	80088aa <_dtoa_r+0xba2>
 80086b0:	2d00      	cmp	r5, #0
 80086b2:	dd05      	ble.n	80086c0 <_dtoa_r+0x9b8>
 80086b4:	4639      	mov	r1, r7
 80086b6:	462a      	mov	r2, r5
 80086b8:	4620      	mov	r0, r4
 80086ba:	f000 fd5d 	bl	8009178 <__lshift>
 80086be:	4607      	mov	r7, r0
 80086c0:	9b06      	ldr	r3, [sp, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d05c      	beq.n	8008780 <_dtoa_r+0xa78>
 80086c6:	6879      	ldr	r1, [r7, #4]
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 fb43 	bl	8008d54 <_Balloc>
 80086ce:	4605      	mov	r5, r0
 80086d0:	b928      	cbnz	r0, 80086de <_dtoa_r+0x9d6>
 80086d2:	4b80      	ldr	r3, [pc, #512]	; (80088d4 <_dtoa_r+0xbcc>)
 80086d4:	4602      	mov	r2, r0
 80086d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80086da:	f7ff bb2e 	b.w	8007d3a <_dtoa_r+0x32>
 80086de:	693a      	ldr	r2, [r7, #16]
 80086e0:	3202      	adds	r2, #2
 80086e2:	0092      	lsls	r2, r2, #2
 80086e4:	f107 010c 	add.w	r1, r7, #12
 80086e8:	300c      	adds	r0, #12
 80086ea:	f000 fb25 	bl	8008d38 <memcpy>
 80086ee:	2201      	movs	r2, #1
 80086f0:	4629      	mov	r1, r5
 80086f2:	4620      	mov	r0, r4
 80086f4:	f000 fd40 	bl	8009178 <__lshift>
 80086f8:	9b00      	ldr	r3, [sp, #0]
 80086fa:	3301      	adds	r3, #1
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	9b00      	ldr	r3, [sp, #0]
 8008700:	444b      	add	r3, r9
 8008702:	9307      	str	r3, [sp, #28]
 8008704:	9b02      	ldr	r3, [sp, #8]
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	46b8      	mov	r8, r7
 800870c:	9306      	str	r3, [sp, #24]
 800870e:	4607      	mov	r7, r0
 8008710:	9b01      	ldr	r3, [sp, #4]
 8008712:	4631      	mov	r1, r6
 8008714:	3b01      	subs	r3, #1
 8008716:	4658      	mov	r0, fp
 8008718:	9302      	str	r3, [sp, #8]
 800871a:	f7ff fa69 	bl	8007bf0 <quorem>
 800871e:	4603      	mov	r3, r0
 8008720:	3330      	adds	r3, #48	; 0x30
 8008722:	9004      	str	r0, [sp, #16]
 8008724:	4641      	mov	r1, r8
 8008726:	4658      	mov	r0, fp
 8008728:	9308      	str	r3, [sp, #32]
 800872a:	f000 fd91 	bl	8009250 <__mcmp>
 800872e:	463a      	mov	r2, r7
 8008730:	4681      	mov	r9, r0
 8008732:	4631      	mov	r1, r6
 8008734:	4620      	mov	r0, r4
 8008736:	f000 fda7 	bl	8009288 <__mdiff>
 800873a:	68c2      	ldr	r2, [r0, #12]
 800873c:	9b08      	ldr	r3, [sp, #32]
 800873e:	4605      	mov	r5, r0
 8008740:	bb02      	cbnz	r2, 8008784 <_dtoa_r+0xa7c>
 8008742:	4601      	mov	r1, r0
 8008744:	4658      	mov	r0, fp
 8008746:	f000 fd83 	bl	8009250 <__mcmp>
 800874a:	9b08      	ldr	r3, [sp, #32]
 800874c:	4602      	mov	r2, r0
 800874e:	4629      	mov	r1, r5
 8008750:	4620      	mov	r0, r4
 8008752:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008756:	f000 fb3d 	bl	8008dd4 <_Bfree>
 800875a:	9b05      	ldr	r3, [sp, #20]
 800875c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800875e:	9d01      	ldr	r5, [sp, #4]
 8008760:	ea43 0102 	orr.w	r1, r3, r2
 8008764:	9b06      	ldr	r3, [sp, #24]
 8008766:	430b      	orrs	r3, r1
 8008768:	9b08      	ldr	r3, [sp, #32]
 800876a:	d10d      	bne.n	8008788 <_dtoa_r+0xa80>
 800876c:	2b39      	cmp	r3, #57	; 0x39
 800876e:	d029      	beq.n	80087c4 <_dtoa_r+0xabc>
 8008770:	f1b9 0f00 	cmp.w	r9, #0
 8008774:	dd01      	ble.n	800877a <_dtoa_r+0xa72>
 8008776:	9b04      	ldr	r3, [sp, #16]
 8008778:	3331      	adds	r3, #49	; 0x31
 800877a:	9a02      	ldr	r2, [sp, #8]
 800877c:	7013      	strb	r3, [r2, #0]
 800877e:	e774      	b.n	800866a <_dtoa_r+0x962>
 8008780:	4638      	mov	r0, r7
 8008782:	e7b9      	b.n	80086f8 <_dtoa_r+0x9f0>
 8008784:	2201      	movs	r2, #1
 8008786:	e7e2      	b.n	800874e <_dtoa_r+0xa46>
 8008788:	f1b9 0f00 	cmp.w	r9, #0
 800878c:	db06      	blt.n	800879c <_dtoa_r+0xa94>
 800878e:	9905      	ldr	r1, [sp, #20]
 8008790:	ea41 0909 	orr.w	r9, r1, r9
 8008794:	9906      	ldr	r1, [sp, #24]
 8008796:	ea59 0101 	orrs.w	r1, r9, r1
 800879a:	d120      	bne.n	80087de <_dtoa_r+0xad6>
 800879c:	2a00      	cmp	r2, #0
 800879e:	ddec      	ble.n	800877a <_dtoa_r+0xa72>
 80087a0:	4659      	mov	r1, fp
 80087a2:	2201      	movs	r2, #1
 80087a4:	4620      	mov	r0, r4
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	f000 fce6 	bl	8009178 <__lshift>
 80087ac:	4631      	mov	r1, r6
 80087ae:	4683      	mov	fp, r0
 80087b0:	f000 fd4e 	bl	8009250 <__mcmp>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	9b01      	ldr	r3, [sp, #4]
 80087b8:	dc02      	bgt.n	80087c0 <_dtoa_r+0xab8>
 80087ba:	d1de      	bne.n	800877a <_dtoa_r+0xa72>
 80087bc:	07da      	lsls	r2, r3, #31
 80087be:	d5dc      	bpl.n	800877a <_dtoa_r+0xa72>
 80087c0:	2b39      	cmp	r3, #57	; 0x39
 80087c2:	d1d8      	bne.n	8008776 <_dtoa_r+0xa6e>
 80087c4:	9a02      	ldr	r2, [sp, #8]
 80087c6:	2339      	movs	r3, #57	; 0x39
 80087c8:	7013      	strb	r3, [r2, #0]
 80087ca:	462b      	mov	r3, r5
 80087cc:	461d      	mov	r5, r3
 80087ce:	3b01      	subs	r3, #1
 80087d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80087d4:	2a39      	cmp	r2, #57	; 0x39
 80087d6:	d050      	beq.n	800887a <_dtoa_r+0xb72>
 80087d8:	3201      	adds	r2, #1
 80087da:	701a      	strb	r2, [r3, #0]
 80087dc:	e745      	b.n	800866a <_dtoa_r+0x962>
 80087de:	2a00      	cmp	r2, #0
 80087e0:	dd03      	ble.n	80087ea <_dtoa_r+0xae2>
 80087e2:	2b39      	cmp	r3, #57	; 0x39
 80087e4:	d0ee      	beq.n	80087c4 <_dtoa_r+0xabc>
 80087e6:	3301      	adds	r3, #1
 80087e8:	e7c7      	b.n	800877a <_dtoa_r+0xa72>
 80087ea:	9a01      	ldr	r2, [sp, #4]
 80087ec:	9907      	ldr	r1, [sp, #28]
 80087ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80087f2:	428a      	cmp	r2, r1
 80087f4:	d02a      	beq.n	800884c <_dtoa_r+0xb44>
 80087f6:	4659      	mov	r1, fp
 80087f8:	2300      	movs	r3, #0
 80087fa:	220a      	movs	r2, #10
 80087fc:	4620      	mov	r0, r4
 80087fe:	f000 fb0b 	bl	8008e18 <__multadd>
 8008802:	45b8      	cmp	r8, r7
 8008804:	4683      	mov	fp, r0
 8008806:	f04f 0300 	mov.w	r3, #0
 800880a:	f04f 020a 	mov.w	r2, #10
 800880e:	4641      	mov	r1, r8
 8008810:	4620      	mov	r0, r4
 8008812:	d107      	bne.n	8008824 <_dtoa_r+0xb1c>
 8008814:	f000 fb00 	bl	8008e18 <__multadd>
 8008818:	4680      	mov	r8, r0
 800881a:	4607      	mov	r7, r0
 800881c:	9b01      	ldr	r3, [sp, #4]
 800881e:	3301      	adds	r3, #1
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	e775      	b.n	8008710 <_dtoa_r+0xa08>
 8008824:	f000 faf8 	bl	8008e18 <__multadd>
 8008828:	4639      	mov	r1, r7
 800882a:	4680      	mov	r8, r0
 800882c:	2300      	movs	r3, #0
 800882e:	220a      	movs	r2, #10
 8008830:	4620      	mov	r0, r4
 8008832:	f000 faf1 	bl	8008e18 <__multadd>
 8008836:	4607      	mov	r7, r0
 8008838:	e7f0      	b.n	800881c <_dtoa_r+0xb14>
 800883a:	f1b9 0f00 	cmp.w	r9, #0
 800883e:	9a00      	ldr	r2, [sp, #0]
 8008840:	bfcc      	ite	gt
 8008842:	464d      	movgt	r5, r9
 8008844:	2501      	movle	r5, #1
 8008846:	4415      	add	r5, r2
 8008848:	f04f 0800 	mov.w	r8, #0
 800884c:	4659      	mov	r1, fp
 800884e:	2201      	movs	r2, #1
 8008850:	4620      	mov	r0, r4
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	f000 fc90 	bl	8009178 <__lshift>
 8008858:	4631      	mov	r1, r6
 800885a:	4683      	mov	fp, r0
 800885c:	f000 fcf8 	bl	8009250 <__mcmp>
 8008860:	2800      	cmp	r0, #0
 8008862:	dcb2      	bgt.n	80087ca <_dtoa_r+0xac2>
 8008864:	d102      	bne.n	800886c <_dtoa_r+0xb64>
 8008866:	9b01      	ldr	r3, [sp, #4]
 8008868:	07db      	lsls	r3, r3, #31
 800886a:	d4ae      	bmi.n	80087ca <_dtoa_r+0xac2>
 800886c:	462b      	mov	r3, r5
 800886e:	461d      	mov	r5, r3
 8008870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008874:	2a30      	cmp	r2, #48	; 0x30
 8008876:	d0fa      	beq.n	800886e <_dtoa_r+0xb66>
 8008878:	e6f7      	b.n	800866a <_dtoa_r+0x962>
 800887a:	9a00      	ldr	r2, [sp, #0]
 800887c:	429a      	cmp	r2, r3
 800887e:	d1a5      	bne.n	80087cc <_dtoa_r+0xac4>
 8008880:	f10a 0a01 	add.w	sl, sl, #1
 8008884:	2331      	movs	r3, #49	; 0x31
 8008886:	e779      	b.n	800877c <_dtoa_r+0xa74>
 8008888:	4b13      	ldr	r3, [pc, #76]	; (80088d8 <_dtoa_r+0xbd0>)
 800888a:	f7ff baaf 	b.w	8007dec <_dtoa_r+0xe4>
 800888e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008890:	2b00      	cmp	r3, #0
 8008892:	f47f aa86 	bne.w	8007da2 <_dtoa_r+0x9a>
 8008896:	4b11      	ldr	r3, [pc, #68]	; (80088dc <_dtoa_r+0xbd4>)
 8008898:	f7ff baa8 	b.w	8007dec <_dtoa_r+0xe4>
 800889c:	f1b9 0f00 	cmp.w	r9, #0
 80088a0:	dc03      	bgt.n	80088aa <_dtoa_r+0xba2>
 80088a2:	9b05      	ldr	r3, [sp, #20]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	f73f aec9 	bgt.w	800863c <_dtoa_r+0x934>
 80088aa:	9d00      	ldr	r5, [sp, #0]
 80088ac:	4631      	mov	r1, r6
 80088ae:	4658      	mov	r0, fp
 80088b0:	f7ff f99e 	bl	8007bf0 <quorem>
 80088b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80088b8:	f805 3b01 	strb.w	r3, [r5], #1
 80088bc:	9a00      	ldr	r2, [sp, #0]
 80088be:	1aaa      	subs	r2, r5, r2
 80088c0:	4591      	cmp	r9, r2
 80088c2:	ddba      	ble.n	800883a <_dtoa_r+0xb32>
 80088c4:	4659      	mov	r1, fp
 80088c6:	2300      	movs	r3, #0
 80088c8:	220a      	movs	r2, #10
 80088ca:	4620      	mov	r0, r4
 80088cc:	f000 faa4 	bl	8008e18 <__multadd>
 80088d0:	4683      	mov	fp, r0
 80088d2:	e7eb      	b.n	80088ac <_dtoa_r+0xba4>
 80088d4:	08009fd0 	.word	0x08009fd0
 80088d8:	08009e28 	.word	0x08009e28
 80088dc:	08009f4d 	.word	0x08009f4d

080088e0 <__sflush_r>:
 80088e0:	898a      	ldrh	r2, [r1, #12]
 80088e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e6:	4605      	mov	r5, r0
 80088e8:	0710      	lsls	r0, r2, #28
 80088ea:	460c      	mov	r4, r1
 80088ec:	d458      	bmi.n	80089a0 <__sflush_r+0xc0>
 80088ee:	684b      	ldr	r3, [r1, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	dc05      	bgt.n	8008900 <__sflush_r+0x20>
 80088f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dc02      	bgt.n	8008900 <__sflush_r+0x20>
 80088fa:	2000      	movs	r0, #0
 80088fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008902:	2e00      	cmp	r6, #0
 8008904:	d0f9      	beq.n	80088fa <__sflush_r+0x1a>
 8008906:	2300      	movs	r3, #0
 8008908:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800890c:	682f      	ldr	r7, [r5, #0]
 800890e:	602b      	str	r3, [r5, #0]
 8008910:	d032      	beq.n	8008978 <__sflush_r+0x98>
 8008912:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	075a      	lsls	r2, r3, #29
 8008918:	d505      	bpl.n	8008926 <__sflush_r+0x46>
 800891a:	6863      	ldr	r3, [r4, #4]
 800891c:	1ac0      	subs	r0, r0, r3
 800891e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008920:	b10b      	cbz	r3, 8008926 <__sflush_r+0x46>
 8008922:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008924:	1ac0      	subs	r0, r0, r3
 8008926:	2300      	movs	r3, #0
 8008928:	4602      	mov	r2, r0
 800892a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800892c:	6a21      	ldr	r1, [r4, #32]
 800892e:	4628      	mov	r0, r5
 8008930:	47b0      	blx	r6
 8008932:	1c43      	adds	r3, r0, #1
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	d106      	bne.n	8008946 <__sflush_r+0x66>
 8008938:	6829      	ldr	r1, [r5, #0]
 800893a:	291d      	cmp	r1, #29
 800893c:	d82c      	bhi.n	8008998 <__sflush_r+0xb8>
 800893e:	4a2a      	ldr	r2, [pc, #168]	; (80089e8 <__sflush_r+0x108>)
 8008940:	40ca      	lsrs	r2, r1
 8008942:	07d6      	lsls	r6, r2, #31
 8008944:	d528      	bpl.n	8008998 <__sflush_r+0xb8>
 8008946:	2200      	movs	r2, #0
 8008948:	6062      	str	r2, [r4, #4]
 800894a:	04d9      	lsls	r1, r3, #19
 800894c:	6922      	ldr	r2, [r4, #16]
 800894e:	6022      	str	r2, [r4, #0]
 8008950:	d504      	bpl.n	800895c <__sflush_r+0x7c>
 8008952:	1c42      	adds	r2, r0, #1
 8008954:	d101      	bne.n	800895a <__sflush_r+0x7a>
 8008956:	682b      	ldr	r3, [r5, #0]
 8008958:	b903      	cbnz	r3, 800895c <__sflush_r+0x7c>
 800895a:	6560      	str	r0, [r4, #84]	; 0x54
 800895c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800895e:	602f      	str	r7, [r5, #0]
 8008960:	2900      	cmp	r1, #0
 8008962:	d0ca      	beq.n	80088fa <__sflush_r+0x1a>
 8008964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008968:	4299      	cmp	r1, r3
 800896a:	d002      	beq.n	8008972 <__sflush_r+0x92>
 800896c:	4628      	mov	r0, r5
 800896e:	f000 fd7f 	bl	8009470 <_free_r>
 8008972:	2000      	movs	r0, #0
 8008974:	6360      	str	r0, [r4, #52]	; 0x34
 8008976:	e7c1      	b.n	80088fc <__sflush_r+0x1c>
 8008978:	6a21      	ldr	r1, [r4, #32]
 800897a:	2301      	movs	r3, #1
 800897c:	4628      	mov	r0, r5
 800897e:	47b0      	blx	r6
 8008980:	1c41      	adds	r1, r0, #1
 8008982:	d1c7      	bne.n	8008914 <__sflush_r+0x34>
 8008984:	682b      	ldr	r3, [r5, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d0c4      	beq.n	8008914 <__sflush_r+0x34>
 800898a:	2b1d      	cmp	r3, #29
 800898c:	d001      	beq.n	8008992 <__sflush_r+0xb2>
 800898e:	2b16      	cmp	r3, #22
 8008990:	d101      	bne.n	8008996 <__sflush_r+0xb6>
 8008992:	602f      	str	r7, [r5, #0]
 8008994:	e7b1      	b.n	80088fa <__sflush_r+0x1a>
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800899c:	81a3      	strh	r3, [r4, #12]
 800899e:	e7ad      	b.n	80088fc <__sflush_r+0x1c>
 80089a0:	690f      	ldr	r7, [r1, #16]
 80089a2:	2f00      	cmp	r7, #0
 80089a4:	d0a9      	beq.n	80088fa <__sflush_r+0x1a>
 80089a6:	0793      	lsls	r3, r2, #30
 80089a8:	680e      	ldr	r6, [r1, #0]
 80089aa:	bf08      	it	eq
 80089ac:	694b      	ldreq	r3, [r1, #20]
 80089ae:	600f      	str	r7, [r1, #0]
 80089b0:	bf18      	it	ne
 80089b2:	2300      	movne	r3, #0
 80089b4:	eba6 0807 	sub.w	r8, r6, r7
 80089b8:	608b      	str	r3, [r1, #8]
 80089ba:	f1b8 0f00 	cmp.w	r8, #0
 80089be:	dd9c      	ble.n	80088fa <__sflush_r+0x1a>
 80089c0:	6a21      	ldr	r1, [r4, #32]
 80089c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089c4:	4643      	mov	r3, r8
 80089c6:	463a      	mov	r2, r7
 80089c8:	4628      	mov	r0, r5
 80089ca:	47b0      	blx	r6
 80089cc:	2800      	cmp	r0, #0
 80089ce:	dc06      	bgt.n	80089de <__sflush_r+0xfe>
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089d6:	81a3      	strh	r3, [r4, #12]
 80089d8:	f04f 30ff 	mov.w	r0, #4294967295
 80089dc:	e78e      	b.n	80088fc <__sflush_r+0x1c>
 80089de:	4407      	add	r7, r0
 80089e0:	eba8 0800 	sub.w	r8, r8, r0
 80089e4:	e7e9      	b.n	80089ba <__sflush_r+0xda>
 80089e6:	bf00      	nop
 80089e8:	20400001 	.word	0x20400001

080089ec <_fflush_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	690b      	ldr	r3, [r1, #16]
 80089f0:	4605      	mov	r5, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	b913      	cbnz	r3, 80089fc <_fflush_r+0x10>
 80089f6:	2500      	movs	r5, #0
 80089f8:	4628      	mov	r0, r5
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	b118      	cbz	r0, 8008a06 <_fflush_r+0x1a>
 80089fe:	6983      	ldr	r3, [r0, #24]
 8008a00:	b90b      	cbnz	r3, 8008a06 <_fflush_r+0x1a>
 8008a02:	f000 f887 	bl	8008b14 <__sinit>
 8008a06:	4b14      	ldr	r3, [pc, #80]	; (8008a58 <_fflush_r+0x6c>)
 8008a08:	429c      	cmp	r4, r3
 8008a0a:	d11b      	bne.n	8008a44 <_fflush_r+0x58>
 8008a0c:	686c      	ldr	r4, [r5, #4]
 8008a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d0ef      	beq.n	80089f6 <_fflush_r+0xa>
 8008a16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a18:	07d0      	lsls	r0, r2, #31
 8008a1a:	d404      	bmi.n	8008a26 <_fflush_r+0x3a>
 8008a1c:	0599      	lsls	r1, r3, #22
 8008a1e:	d402      	bmi.n	8008a26 <_fflush_r+0x3a>
 8008a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a22:	f000 f91a 	bl	8008c5a <__retarget_lock_acquire_recursive>
 8008a26:	4628      	mov	r0, r5
 8008a28:	4621      	mov	r1, r4
 8008a2a:	f7ff ff59 	bl	80088e0 <__sflush_r>
 8008a2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a30:	07da      	lsls	r2, r3, #31
 8008a32:	4605      	mov	r5, r0
 8008a34:	d4e0      	bmi.n	80089f8 <_fflush_r+0xc>
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	059b      	lsls	r3, r3, #22
 8008a3a:	d4dd      	bmi.n	80089f8 <_fflush_r+0xc>
 8008a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a3e:	f000 f90d 	bl	8008c5c <__retarget_lock_release_recursive>
 8008a42:	e7d9      	b.n	80089f8 <_fflush_r+0xc>
 8008a44:	4b05      	ldr	r3, [pc, #20]	; (8008a5c <_fflush_r+0x70>)
 8008a46:	429c      	cmp	r4, r3
 8008a48:	d101      	bne.n	8008a4e <_fflush_r+0x62>
 8008a4a:	68ac      	ldr	r4, [r5, #8]
 8008a4c:	e7df      	b.n	8008a0e <_fflush_r+0x22>
 8008a4e:	4b04      	ldr	r3, [pc, #16]	; (8008a60 <_fflush_r+0x74>)
 8008a50:	429c      	cmp	r4, r3
 8008a52:	bf08      	it	eq
 8008a54:	68ec      	ldreq	r4, [r5, #12]
 8008a56:	e7da      	b.n	8008a0e <_fflush_r+0x22>
 8008a58:	0800a004 	.word	0x0800a004
 8008a5c:	0800a024 	.word	0x0800a024
 8008a60:	08009fe4 	.word	0x08009fe4

08008a64 <std>:
 8008a64:	2300      	movs	r3, #0
 8008a66:	b510      	push	{r4, lr}
 8008a68:	4604      	mov	r4, r0
 8008a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a72:	6083      	str	r3, [r0, #8]
 8008a74:	8181      	strh	r1, [r0, #12]
 8008a76:	6643      	str	r3, [r0, #100]	; 0x64
 8008a78:	81c2      	strh	r2, [r0, #14]
 8008a7a:	6183      	str	r3, [r0, #24]
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	2208      	movs	r2, #8
 8008a80:	305c      	adds	r0, #92	; 0x5c
 8008a82:	f7fe fa55 	bl	8006f30 <memset>
 8008a86:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <std+0x38>)
 8008a88:	6263      	str	r3, [r4, #36]	; 0x24
 8008a8a:	4b05      	ldr	r3, [pc, #20]	; (8008aa0 <std+0x3c>)
 8008a8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a8e:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <std+0x40>)
 8008a90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a92:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <std+0x44>)
 8008a94:	6224      	str	r4, [r4, #32]
 8008a96:	6323      	str	r3, [r4, #48]	; 0x30
 8008a98:	bd10      	pop	{r4, pc}
 8008a9a:	bf00      	nop
 8008a9c:	08009899 	.word	0x08009899
 8008aa0:	080098bb 	.word	0x080098bb
 8008aa4:	080098f3 	.word	0x080098f3
 8008aa8:	08009917 	.word	0x08009917

08008aac <_cleanup_r>:
 8008aac:	4901      	ldr	r1, [pc, #4]	; (8008ab4 <_cleanup_r+0x8>)
 8008aae:	f000 b8af 	b.w	8008c10 <_fwalk_reent>
 8008ab2:	bf00      	nop
 8008ab4:	080089ed 	.word	0x080089ed

08008ab8 <__sfmoreglue>:
 8008ab8:	b570      	push	{r4, r5, r6, lr}
 8008aba:	1e4a      	subs	r2, r1, #1
 8008abc:	2568      	movs	r5, #104	; 0x68
 8008abe:	4355      	muls	r5, r2
 8008ac0:	460e      	mov	r6, r1
 8008ac2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ac6:	f000 fd23 	bl	8009510 <_malloc_r>
 8008aca:	4604      	mov	r4, r0
 8008acc:	b140      	cbz	r0, 8008ae0 <__sfmoreglue+0x28>
 8008ace:	2100      	movs	r1, #0
 8008ad0:	e9c0 1600 	strd	r1, r6, [r0]
 8008ad4:	300c      	adds	r0, #12
 8008ad6:	60a0      	str	r0, [r4, #8]
 8008ad8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008adc:	f7fe fa28 	bl	8006f30 <memset>
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	bd70      	pop	{r4, r5, r6, pc}

08008ae4 <__sfp_lock_acquire>:
 8008ae4:	4801      	ldr	r0, [pc, #4]	; (8008aec <__sfp_lock_acquire+0x8>)
 8008ae6:	f000 b8b8 	b.w	8008c5a <__retarget_lock_acquire_recursive>
 8008aea:	bf00      	nop
 8008aec:	200004a0 	.word	0x200004a0

08008af0 <__sfp_lock_release>:
 8008af0:	4801      	ldr	r0, [pc, #4]	; (8008af8 <__sfp_lock_release+0x8>)
 8008af2:	f000 b8b3 	b.w	8008c5c <__retarget_lock_release_recursive>
 8008af6:	bf00      	nop
 8008af8:	200004a0 	.word	0x200004a0

08008afc <__sinit_lock_acquire>:
 8008afc:	4801      	ldr	r0, [pc, #4]	; (8008b04 <__sinit_lock_acquire+0x8>)
 8008afe:	f000 b8ac 	b.w	8008c5a <__retarget_lock_acquire_recursive>
 8008b02:	bf00      	nop
 8008b04:	2000049b 	.word	0x2000049b

08008b08 <__sinit_lock_release>:
 8008b08:	4801      	ldr	r0, [pc, #4]	; (8008b10 <__sinit_lock_release+0x8>)
 8008b0a:	f000 b8a7 	b.w	8008c5c <__retarget_lock_release_recursive>
 8008b0e:	bf00      	nop
 8008b10:	2000049b 	.word	0x2000049b

08008b14 <__sinit>:
 8008b14:	b510      	push	{r4, lr}
 8008b16:	4604      	mov	r4, r0
 8008b18:	f7ff fff0 	bl	8008afc <__sinit_lock_acquire>
 8008b1c:	69a3      	ldr	r3, [r4, #24]
 8008b1e:	b11b      	cbz	r3, 8008b28 <__sinit+0x14>
 8008b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b24:	f7ff bff0 	b.w	8008b08 <__sinit_lock_release>
 8008b28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b2c:	6523      	str	r3, [r4, #80]	; 0x50
 8008b2e:	4b13      	ldr	r3, [pc, #76]	; (8008b7c <__sinit+0x68>)
 8008b30:	4a13      	ldr	r2, [pc, #76]	; (8008b80 <__sinit+0x6c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b36:	42a3      	cmp	r3, r4
 8008b38:	bf04      	itt	eq
 8008b3a:	2301      	moveq	r3, #1
 8008b3c:	61a3      	streq	r3, [r4, #24]
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f000 f820 	bl	8008b84 <__sfp>
 8008b44:	6060      	str	r0, [r4, #4]
 8008b46:	4620      	mov	r0, r4
 8008b48:	f000 f81c 	bl	8008b84 <__sfp>
 8008b4c:	60a0      	str	r0, [r4, #8]
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f000 f818 	bl	8008b84 <__sfp>
 8008b54:	2200      	movs	r2, #0
 8008b56:	60e0      	str	r0, [r4, #12]
 8008b58:	2104      	movs	r1, #4
 8008b5a:	6860      	ldr	r0, [r4, #4]
 8008b5c:	f7ff ff82 	bl	8008a64 <std>
 8008b60:	68a0      	ldr	r0, [r4, #8]
 8008b62:	2201      	movs	r2, #1
 8008b64:	2109      	movs	r1, #9
 8008b66:	f7ff ff7d 	bl	8008a64 <std>
 8008b6a:	68e0      	ldr	r0, [r4, #12]
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	2112      	movs	r1, #18
 8008b70:	f7ff ff78 	bl	8008a64 <std>
 8008b74:	2301      	movs	r3, #1
 8008b76:	61a3      	str	r3, [r4, #24]
 8008b78:	e7d2      	b.n	8008b20 <__sinit+0xc>
 8008b7a:	bf00      	nop
 8008b7c:	08009e14 	.word	0x08009e14
 8008b80:	08008aad 	.word	0x08008aad

08008b84 <__sfp>:
 8008b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b86:	4607      	mov	r7, r0
 8008b88:	f7ff ffac 	bl	8008ae4 <__sfp_lock_acquire>
 8008b8c:	4b1e      	ldr	r3, [pc, #120]	; (8008c08 <__sfp+0x84>)
 8008b8e:	681e      	ldr	r6, [r3, #0]
 8008b90:	69b3      	ldr	r3, [r6, #24]
 8008b92:	b913      	cbnz	r3, 8008b9a <__sfp+0x16>
 8008b94:	4630      	mov	r0, r6
 8008b96:	f7ff ffbd 	bl	8008b14 <__sinit>
 8008b9a:	3648      	adds	r6, #72	; 0x48
 8008b9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	d503      	bpl.n	8008bac <__sfp+0x28>
 8008ba4:	6833      	ldr	r3, [r6, #0]
 8008ba6:	b30b      	cbz	r3, 8008bec <__sfp+0x68>
 8008ba8:	6836      	ldr	r6, [r6, #0]
 8008baa:	e7f7      	b.n	8008b9c <__sfp+0x18>
 8008bac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bb0:	b9d5      	cbnz	r5, 8008be8 <__sfp+0x64>
 8008bb2:	4b16      	ldr	r3, [pc, #88]	; (8008c0c <__sfp+0x88>)
 8008bb4:	60e3      	str	r3, [r4, #12]
 8008bb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bba:	6665      	str	r5, [r4, #100]	; 0x64
 8008bbc:	f000 f84c 	bl	8008c58 <__retarget_lock_init_recursive>
 8008bc0:	f7ff ff96 	bl	8008af0 <__sfp_lock_release>
 8008bc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bcc:	6025      	str	r5, [r4, #0]
 8008bce:	61a5      	str	r5, [r4, #24]
 8008bd0:	2208      	movs	r2, #8
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bd8:	f7fe f9aa 	bl	8006f30 <memset>
 8008bdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008be0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008be4:	4620      	mov	r0, r4
 8008be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008be8:	3468      	adds	r4, #104	; 0x68
 8008bea:	e7d9      	b.n	8008ba0 <__sfp+0x1c>
 8008bec:	2104      	movs	r1, #4
 8008bee:	4638      	mov	r0, r7
 8008bf0:	f7ff ff62 	bl	8008ab8 <__sfmoreglue>
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	6030      	str	r0, [r6, #0]
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d1d5      	bne.n	8008ba8 <__sfp+0x24>
 8008bfc:	f7ff ff78 	bl	8008af0 <__sfp_lock_release>
 8008c00:	230c      	movs	r3, #12
 8008c02:	603b      	str	r3, [r7, #0]
 8008c04:	e7ee      	b.n	8008be4 <__sfp+0x60>
 8008c06:	bf00      	nop
 8008c08:	08009e14 	.word	0x08009e14
 8008c0c:	ffff0001 	.word	0xffff0001

08008c10 <_fwalk_reent>:
 8008c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c14:	4606      	mov	r6, r0
 8008c16:	4688      	mov	r8, r1
 8008c18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c1c:	2700      	movs	r7, #0
 8008c1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c22:	f1b9 0901 	subs.w	r9, r9, #1
 8008c26:	d505      	bpl.n	8008c34 <_fwalk_reent+0x24>
 8008c28:	6824      	ldr	r4, [r4, #0]
 8008c2a:	2c00      	cmp	r4, #0
 8008c2c:	d1f7      	bne.n	8008c1e <_fwalk_reent+0xe>
 8008c2e:	4638      	mov	r0, r7
 8008c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c34:	89ab      	ldrh	r3, [r5, #12]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d907      	bls.n	8008c4a <_fwalk_reent+0x3a>
 8008c3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	d003      	beq.n	8008c4a <_fwalk_reent+0x3a>
 8008c42:	4629      	mov	r1, r5
 8008c44:	4630      	mov	r0, r6
 8008c46:	47c0      	blx	r8
 8008c48:	4307      	orrs	r7, r0
 8008c4a:	3568      	adds	r5, #104	; 0x68
 8008c4c:	e7e9      	b.n	8008c22 <_fwalk_reent+0x12>
	...

08008c50 <_localeconv_r>:
 8008c50:	4800      	ldr	r0, [pc, #0]	; (8008c54 <_localeconv_r+0x4>)
 8008c52:	4770      	bx	lr
 8008c54:	20000164 	.word	0x20000164

08008c58 <__retarget_lock_init_recursive>:
 8008c58:	4770      	bx	lr

08008c5a <__retarget_lock_acquire_recursive>:
 8008c5a:	4770      	bx	lr

08008c5c <__retarget_lock_release_recursive>:
 8008c5c:	4770      	bx	lr

08008c5e <__swhatbuf_r>:
 8008c5e:	b570      	push	{r4, r5, r6, lr}
 8008c60:	460e      	mov	r6, r1
 8008c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c66:	2900      	cmp	r1, #0
 8008c68:	b096      	sub	sp, #88	; 0x58
 8008c6a:	4614      	mov	r4, r2
 8008c6c:	461d      	mov	r5, r3
 8008c6e:	da07      	bge.n	8008c80 <__swhatbuf_r+0x22>
 8008c70:	2300      	movs	r3, #0
 8008c72:	602b      	str	r3, [r5, #0]
 8008c74:	89b3      	ldrh	r3, [r6, #12]
 8008c76:	061a      	lsls	r2, r3, #24
 8008c78:	d410      	bmi.n	8008c9c <__swhatbuf_r+0x3e>
 8008c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c7e:	e00e      	b.n	8008c9e <__swhatbuf_r+0x40>
 8008c80:	466a      	mov	r2, sp
 8008c82:	f000 fe9f 	bl	80099c4 <_fstat_r>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	dbf2      	blt.n	8008c70 <__swhatbuf_r+0x12>
 8008c8a:	9a01      	ldr	r2, [sp, #4]
 8008c8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c94:	425a      	negs	r2, r3
 8008c96:	415a      	adcs	r2, r3
 8008c98:	602a      	str	r2, [r5, #0]
 8008c9a:	e7ee      	b.n	8008c7a <__swhatbuf_r+0x1c>
 8008c9c:	2340      	movs	r3, #64	; 0x40
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	b016      	add	sp, #88	; 0x58
 8008ca4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ca8 <__smakebuf_r>:
 8008ca8:	898b      	ldrh	r3, [r1, #12]
 8008caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cac:	079d      	lsls	r5, r3, #30
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	d507      	bpl.n	8008cc4 <__smakebuf_r+0x1c>
 8008cb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	6123      	str	r3, [r4, #16]
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	6163      	str	r3, [r4, #20]
 8008cc0:	b002      	add	sp, #8
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	ab01      	add	r3, sp, #4
 8008cc6:	466a      	mov	r2, sp
 8008cc8:	f7ff ffc9 	bl	8008c5e <__swhatbuf_r>
 8008ccc:	9900      	ldr	r1, [sp, #0]
 8008cce:	4605      	mov	r5, r0
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	f000 fc1d 	bl	8009510 <_malloc_r>
 8008cd6:	b948      	cbnz	r0, 8008cec <__smakebuf_r+0x44>
 8008cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cdc:	059a      	lsls	r2, r3, #22
 8008cde:	d4ef      	bmi.n	8008cc0 <__smakebuf_r+0x18>
 8008ce0:	f023 0303 	bic.w	r3, r3, #3
 8008ce4:	f043 0302 	orr.w	r3, r3, #2
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	e7e3      	b.n	8008cb4 <__smakebuf_r+0xc>
 8008cec:	4b0d      	ldr	r3, [pc, #52]	; (8008d24 <__smakebuf_r+0x7c>)
 8008cee:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	6020      	str	r0, [r4, #0]
 8008cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf8:	81a3      	strh	r3, [r4, #12]
 8008cfa:	9b00      	ldr	r3, [sp, #0]
 8008cfc:	6163      	str	r3, [r4, #20]
 8008cfe:	9b01      	ldr	r3, [sp, #4]
 8008d00:	6120      	str	r0, [r4, #16]
 8008d02:	b15b      	cbz	r3, 8008d1c <__smakebuf_r+0x74>
 8008d04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d08:	4630      	mov	r0, r6
 8008d0a:	f000 fe6d 	bl	80099e8 <_isatty_r>
 8008d0e:	b128      	cbz	r0, 8008d1c <__smakebuf_r+0x74>
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	f023 0303 	bic.w	r3, r3, #3
 8008d16:	f043 0301 	orr.w	r3, r3, #1
 8008d1a:	81a3      	strh	r3, [r4, #12]
 8008d1c:	89a0      	ldrh	r0, [r4, #12]
 8008d1e:	4305      	orrs	r5, r0
 8008d20:	81a5      	strh	r5, [r4, #12]
 8008d22:	e7cd      	b.n	8008cc0 <__smakebuf_r+0x18>
 8008d24:	08008aad 	.word	0x08008aad

08008d28 <malloc>:
 8008d28:	4b02      	ldr	r3, [pc, #8]	; (8008d34 <malloc+0xc>)
 8008d2a:	4601      	mov	r1, r0
 8008d2c:	6818      	ldr	r0, [r3, #0]
 8008d2e:	f000 bbef 	b.w	8009510 <_malloc_r>
 8008d32:	bf00      	nop
 8008d34:	20000010 	.word	0x20000010

08008d38 <memcpy>:
 8008d38:	440a      	add	r2, r1
 8008d3a:	4291      	cmp	r1, r2
 8008d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d40:	d100      	bne.n	8008d44 <memcpy+0xc>
 8008d42:	4770      	bx	lr
 8008d44:	b510      	push	{r4, lr}
 8008d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d4e:	4291      	cmp	r1, r2
 8008d50:	d1f9      	bne.n	8008d46 <memcpy+0xe>
 8008d52:	bd10      	pop	{r4, pc}

08008d54 <_Balloc>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d58:	4604      	mov	r4, r0
 8008d5a:	460d      	mov	r5, r1
 8008d5c:	b976      	cbnz	r6, 8008d7c <_Balloc+0x28>
 8008d5e:	2010      	movs	r0, #16
 8008d60:	f7ff ffe2 	bl	8008d28 <malloc>
 8008d64:	4602      	mov	r2, r0
 8008d66:	6260      	str	r0, [r4, #36]	; 0x24
 8008d68:	b920      	cbnz	r0, 8008d74 <_Balloc+0x20>
 8008d6a:	4b18      	ldr	r3, [pc, #96]	; (8008dcc <_Balloc+0x78>)
 8008d6c:	4818      	ldr	r0, [pc, #96]	; (8008dd0 <_Balloc+0x7c>)
 8008d6e:	2166      	movs	r1, #102	; 0x66
 8008d70:	f000 fde8 	bl	8009944 <__assert_func>
 8008d74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d78:	6006      	str	r6, [r0, #0]
 8008d7a:	60c6      	str	r6, [r0, #12]
 8008d7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d7e:	68f3      	ldr	r3, [r6, #12]
 8008d80:	b183      	cbz	r3, 8008da4 <_Balloc+0x50>
 8008d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d8a:	b9b8      	cbnz	r0, 8008dbc <_Balloc+0x68>
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	fa01 f605 	lsl.w	r6, r1, r5
 8008d92:	1d72      	adds	r2, r6, #5
 8008d94:	0092      	lsls	r2, r2, #2
 8008d96:	4620      	mov	r0, r4
 8008d98:	f000 fb5a 	bl	8009450 <_calloc_r>
 8008d9c:	b160      	cbz	r0, 8008db8 <_Balloc+0x64>
 8008d9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008da2:	e00e      	b.n	8008dc2 <_Balloc+0x6e>
 8008da4:	2221      	movs	r2, #33	; 0x21
 8008da6:	2104      	movs	r1, #4
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 fb51 	bl	8009450 <_calloc_r>
 8008dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008db0:	60f0      	str	r0, [r6, #12]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1e4      	bne.n	8008d82 <_Balloc+0x2e>
 8008db8:	2000      	movs	r0, #0
 8008dba:	bd70      	pop	{r4, r5, r6, pc}
 8008dbc:	6802      	ldr	r2, [r0, #0]
 8008dbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008dc8:	e7f7      	b.n	8008dba <_Balloc+0x66>
 8008dca:	bf00      	nop
 8008dcc:	08009f5a 	.word	0x08009f5a
 8008dd0:	0800a044 	.word	0x0800a044

08008dd4 <_Bfree>:
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008dd8:	4605      	mov	r5, r0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	b976      	cbnz	r6, 8008dfc <_Bfree+0x28>
 8008dde:	2010      	movs	r0, #16
 8008de0:	f7ff ffa2 	bl	8008d28 <malloc>
 8008de4:	4602      	mov	r2, r0
 8008de6:	6268      	str	r0, [r5, #36]	; 0x24
 8008de8:	b920      	cbnz	r0, 8008df4 <_Bfree+0x20>
 8008dea:	4b09      	ldr	r3, [pc, #36]	; (8008e10 <_Bfree+0x3c>)
 8008dec:	4809      	ldr	r0, [pc, #36]	; (8008e14 <_Bfree+0x40>)
 8008dee:	218a      	movs	r1, #138	; 0x8a
 8008df0:	f000 fda8 	bl	8009944 <__assert_func>
 8008df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008df8:	6006      	str	r6, [r0, #0]
 8008dfa:	60c6      	str	r6, [r0, #12]
 8008dfc:	b13c      	cbz	r4, 8008e0e <_Bfree+0x3a>
 8008dfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e00:	6862      	ldr	r2, [r4, #4]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e08:	6021      	str	r1, [r4, #0]
 8008e0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e0e:	bd70      	pop	{r4, r5, r6, pc}
 8008e10:	08009f5a 	.word	0x08009f5a
 8008e14:	0800a044 	.word	0x0800a044

08008e18 <__multadd>:
 8008e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e1c:	690e      	ldr	r6, [r1, #16]
 8008e1e:	4607      	mov	r7, r0
 8008e20:	4698      	mov	r8, r3
 8008e22:	460c      	mov	r4, r1
 8008e24:	f101 0014 	add.w	r0, r1, #20
 8008e28:	2300      	movs	r3, #0
 8008e2a:	6805      	ldr	r5, [r0, #0]
 8008e2c:	b2a9      	uxth	r1, r5
 8008e2e:	fb02 8101 	mla	r1, r2, r1, r8
 8008e32:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008e36:	0c2d      	lsrs	r5, r5, #16
 8008e38:	fb02 c505 	mla	r5, r2, r5, ip
 8008e3c:	b289      	uxth	r1, r1
 8008e3e:	3301      	adds	r3, #1
 8008e40:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008e44:	429e      	cmp	r6, r3
 8008e46:	f840 1b04 	str.w	r1, [r0], #4
 8008e4a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008e4e:	dcec      	bgt.n	8008e2a <__multadd+0x12>
 8008e50:	f1b8 0f00 	cmp.w	r8, #0
 8008e54:	d022      	beq.n	8008e9c <__multadd+0x84>
 8008e56:	68a3      	ldr	r3, [r4, #8]
 8008e58:	42b3      	cmp	r3, r6
 8008e5a:	dc19      	bgt.n	8008e90 <__multadd+0x78>
 8008e5c:	6861      	ldr	r1, [r4, #4]
 8008e5e:	4638      	mov	r0, r7
 8008e60:	3101      	adds	r1, #1
 8008e62:	f7ff ff77 	bl	8008d54 <_Balloc>
 8008e66:	4605      	mov	r5, r0
 8008e68:	b928      	cbnz	r0, 8008e76 <__multadd+0x5e>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ea4 <__multadd+0x8c>)
 8008e6e:	480e      	ldr	r0, [pc, #56]	; (8008ea8 <__multadd+0x90>)
 8008e70:	21b5      	movs	r1, #181	; 0xb5
 8008e72:	f000 fd67 	bl	8009944 <__assert_func>
 8008e76:	6922      	ldr	r2, [r4, #16]
 8008e78:	3202      	adds	r2, #2
 8008e7a:	f104 010c 	add.w	r1, r4, #12
 8008e7e:	0092      	lsls	r2, r2, #2
 8008e80:	300c      	adds	r0, #12
 8008e82:	f7ff ff59 	bl	8008d38 <memcpy>
 8008e86:	4621      	mov	r1, r4
 8008e88:	4638      	mov	r0, r7
 8008e8a:	f7ff ffa3 	bl	8008dd4 <_Bfree>
 8008e8e:	462c      	mov	r4, r5
 8008e90:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008e94:	3601      	adds	r6, #1
 8008e96:	f8c3 8014 	str.w	r8, [r3, #20]
 8008e9a:	6126      	str	r6, [r4, #16]
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea2:	bf00      	nop
 8008ea4:	08009fd0 	.word	0x08009fd0
 8008ea8:	0800a044 	.word	0x0800a044

08008eac <__hi0bits>:
 8008eac:	0c03      	lsrs	r3, r0, #16
 8008eae:	041b      	lsls	r3, r3, #16
 8008eb0:	b9d3      	cbnz	r3, 8008ee8 <__hi0bits+0x3c>
 8008eb2:	0400      	lsls	r0, r0, #16
 8008eb4:	2310      	movs	r3, #16
 8008eb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008eba:	bf04      	itt	eq
 8008ebc:	0200      	lsleq	r0, r0, #8
 8008ebe:	3308      	addeq	r3, #8
 8008ec0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ec4:	bf04      	itt	eq
 8008ec6:	0100      	lsleq	r0, r0, #4
 8008ec8:	3304      	addeq	r3, #4
 8008eca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ece:	bf04      	itt	eq
 8008ed0:	0080      	lsleq	r0, r0, #2
 8008ed2:	3302      	addeq	r3, #2
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	db05      	blt.n	8008ee4 <__hi0bits+0x38>
 8008ed8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008edc:	f103 0301 	add.w	r3, r3, #1
 8008ee0:	bf08      	it	eq
 8008ee2:	2320      	moveq	r3, #32
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	4770      	bx	lr
 8008ee8:	2300      	movs	r3, #0
 8008eea:	e7e4      	b.n	8008eb6 <__hi0bits+0xa>

08008eec <__lo0bits>:
 8008eec:	6803      	ldr	r3, [r0, #0]
 8008eee:	f013 0207 	ands.w	r2, r3, #7
 8008ef2:	4601      	mov	r1, r0
 8008ef4:	d00b      	beq.n	8008f0e <__lo0bits+0x22>
 8008ef6:	07da      	lsls	r2, r3, #31
 8008ef8:	d424      	bmi.n	8008f44 <__lo0bits+0x58>
 8008efa:	0798      	lsls	r0, r3, #30
 8008efc:	bf49      	itett	mi
 8008efe:	085b      	lsrmi	r3, r3, #1
 8008f00:	089b      	lsrpl	r3, r3, #2
 8008f02:	2001      	movmi	r0, #1
 8008f04:	600b      	strmi	r3, [r1, #0]
 8008f06:	bf5c      	itt	pl
 8008f08:	600b      	strpl	r3, [r1, #0]
 8008f0a:	2002      	movpl	r0, #2
 8008f0c:	4770      	bx	lr
 8008f0e:	b298      	uxth	r0, r3
 8008f10:	b9b0      	cbnz	r0, 8008f40 <__lo0bits+0x54>
 8008f12:	0c1b      	lsrs	r3, r3, #16
 8008f14:	2010      	movs	r0, #16
 8008f16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f1a:	bf04      	itt	eq
 8008f1c:	0a1b      	lsreq	r3, r3, #8
 8008f1e:	3008      	addeq	r0, #8
 8008f20:	071a      	lsls	r2, r3, #28
 8008f22:	bf04      	itt	eq
 8008f24:	091b      	lsreq	r3, r3, #4
 8008f26:	3004      	addeq	r0, #4
 8008f28:	079a      	lsls	r2, r3, #30
 8008f2a:	bf04      	itt	eq
 8008f2c:	089b      	lsreq	r3, r3, #2
 8008f2e:	3002      	addeq	r0, #2
 8008f30:	07da      	lsls	r2, r3, #31
 8008f32:	d403      	bmi.n	8008f3c <__lo0bits+0x50>
 8008f34:	085b      	lsrs	r3, r3, #1
 8008f36:	f100 0001 	add.w	r0, r0, #1
 8008f3a:	d005      	beq.n	8008f48 <__lo0bits+0x5c>
 8008f3c:	600b      	str	r3, [r1, #0]
 8008f3e:	4770      	bx	lr
 8008f40:	4610      	mov	r0, r2
 8008f42:	e7e8      	b.n	8008f16 <__lo0bits+0x2a>
 8008f44:	2000      	movs	r0, #0
 8008f46:	4770      	bx	lr
 8008f48:	2020      	movs	r0, #32
 8008f4a:	4770      	bx	lr

08008f4c <__i2b>:
 8008f4c:	b510      	push	{r4, lr}
 8008f4e:	460c      	mov	r4, r1
 8008f50:	2101      	movs	r1, #1
 8008f52:	f7ff feff 	bl	8008d54 <_Balloc>
 8008f56:	4602      	mov	r2, r0
 8008f58:	b928      	cbnz	r0, 8008f66 <__i2b+0x1a>
 8008f5a:	4b05      	ldr	r3, [pc, #20]	; (8008f70 <__i2b+0x24>)
 8008f5c:	4805      	ldr	r0, [pc, #20]	; (8008f74 <__i2b+0x28>)
 8008f5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f62:	f000 fcef 	bl	8009944 <__assert_func>
 8008f66:	2301      	movs	r3, #1
 8008f68:	6144      	str	r4, [r0, #20]
 8008f6a:	6103      	str	r3, [r0, #16]
 8008f6c:	bd10      	pop	{r4, pc}
 8008f6e:	bf00      	nop
 8008f70:	08009fd0 	.word	0x08009fd0
 8008f74:	0800a044 	.word	0x0800a044

08008f78 <__multiply>:
 8008f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	4614      	mov	r4, r2
 8008f7e:	690a      	ldr	r2, [r1, #16]
 8008f80:	6923      	ldr	r3, [r4, #16]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	bfb8      	it	lt
 8008f86:	460b      	movlt	r3, r1
 8008f88:	460d      	mov	r5, r1
 8008f8a:	bfbc      	itt	lt
 8008f8c:	4625      	movlt	r5, r4
 8008f8e:	461c      	movlt	r4, r3
 8008f90:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008f94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f98:	68ab      	ldr	r3, [r5, #8]
 8008f9a:	6869      	ldr	r1, [r5, #4]
 8008f9c:	eb0a 0709 	add.w	r7, sl, r9
 8008fa0:	42bb      	cmp	r3, r7
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	bfb8      	it	lt
 8008fa6:	3101      	addlt	r1, #1
 8008fa8:	f7ff fed4 	bl	8008d54 <_Balloc>
 8008fac:	b930      	cbnz	r0, 8008fbc <__multiply+0x44>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	4b42      	ldr	r3, [pc, #264]	; (80090bc <__multiply+0x144>)
 8008fb2:	4843      	ldr	r0, [pc, #268]	; (80090c0 <__multiply+0x148>)
 8008fb4:	f240 115d 	movw	r1, #349	; 0x15d
 8008fb8:	f000 fcc4 	bl	8009944 <__assert_func>
 8008fbc:	f100 0614 	add.w	r6, r0, #20
 8008fc0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008fc4:	4633      	mov	r3, r6
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	4543      	cmp	r3, r8
 8008fca:	d31e      	bcc.n	800900a <__multiply+0x92>
 8008fcc:	f105 0c14 	add.w	ip, r5, #20
 8008fd0:	f104 0314 	add.w	r3, r4, #20
 8008fd4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008fd8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008fdc:	9202      	str	r2, [sp, #8]
 8008fde:	ebac 0205 	sub.w	r2, ip, r5
 8008fe2:	3a15      	subs	r2, #21
 8008fe4:	f022 0203 	bic.w	r2, r2, #3
 8008fe8:	3204      	adds	r2, #4
 8008fea:	f105 0115 	add.w	r1, r5, #21
 8008fee:	458c      	cmp	ip, r1
 8008ff0:	bf38      	it	cc
 8008ff2:	2204      	movcc	r2, #4
 8008ff4:	9201      	str	r2, [sp, #4]
 8008ff6:	9a02      	ldr	r2, [sp, #8]
 8008ff8:	9303      	str	r3, [sp, #12]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d808      	bhi.n	8009010 <__multiply+0x98>
 8008ffe:	2f00      	cmp	r7, #0
 8009000:	dc55      	bgt.n	80090ae <__multiply+0x136>
 8009002:	6107      	str	r7, [r0, #16]
 8009004:	b005      	add	sp, #20
 8009006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800900a:	f843 2b04 	str.w	r2, [r3], #4
 800900e:	e7db      	b.n	8008fc8 <__multiply+0x50>
 8009010:	f8b3 a000 	ldrh.w	sl, [r3]
 8009014:	f1ba 0f00 	cmp.w	sl, #0
 8009018:	d020      	beq.n	800905c <__multiply+0xe4>
 800901a:	f105 0e14 	add.w	lr, r5, #20
 800901e:	46b1      	mov	r9, r6
 8009020:	2200      	movs	r2, #0
 8009022:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009026:	f8d9 b000 	ldr.w	fp, [r9]
 800902a:	b2a1      	uxth	r1, r4
 800902c:	fa1f fb8b 	uxth.w	fp, fp
 8009030:	fb0a b101 	mla	r1, sl, r1, fp
 8009034:	4411      	add	r1, r2
 8009036:	f8d9 2000 	ldr.w	r2, [r9]
 800903a:	0c24      	lsrs	r4, r4, #16
 800903c:	0c12      	lsrs	r2, r2, #16
 800903e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009042:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009046:	b289      	uxth	r1, r1
 8009048:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800904c:	45f4      	cmp	ip, lr
 800904e:	f849 1b04 	str.w	r1, [r9], #4
 8009052:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009056:	d8e4      	bhi.n	8009022 <__multiply+0xaa>
 8009058:	9901      	ldr	r1, [sp, #4]
 800905a:	5072      	str	r2, [r6, r1]
 800905c:	9a03      	ldr	r2, [sp, #12]
 800905e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009062:	3304      	adds	r3, #4
 8009064:	f1b9 0f00 	cmp.w	r9, #0
 8009068:	d01f      	beq.n	80090aa <__multiply+0x132>
 800906a:	6834      	ldr	r4, [r6, #0]
 800906c:	f105 0114 	add.w	r1, r5, #20
 8009070:	46b6      	mov	lr, r6
 8009072:	f04f 0a00 	mov.w	sl, #0
 8009076:	880a      	ldrh	r2, [r1, #0]
 8009078:	f8be b002 	ldrh.w	fp, [lr, #2]
 800907c:	fb09 b202 	mla	r2, r9, r2, fp
 8009080:	4492      	add	sl, r2
 8009082:	b2a4      	uxth	r4, r4
 8009084:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009088:	f84e 4b04 	str.w	r4, [lr], #4
 800908c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009090:	f8be 2000 	ldrh.w	r2, [lr]
 8009094:	0c24      	lsrs	r4, r4, #16
 8009096:	fb09 2404 	mla	r4, r9, r4, r2
 800909a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800909e:	458c      	cmp	ip, r1
 80090a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80090a4:	d8e7      	bhi.n	8009076 <__multiply+0xfe>
 80090a6:	9a01      	ldr	r2, [sp, #4]
 80090a8:	50b4      	str	r4, [r6, r2]
 80090aa:	3604      	adds	r6, #4
 80090ac:	e7a3      	b.n	8008ff6 <__multiply+0x7e>
 80090ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1a5      	bne.n	8009002 <__multiply+0x8a>
 80090b6:	3f01      	subs	r7, #1
 80090b8:	e7a1      	b.n	8008ffe <__multiply+0x86>
 80090ba:	bf00      	nop
 80090bc:	08009fd0 	.word	0x08009fd0
 80090c0:	0800a044 	.word	0x0800a044

080090c4 <__pow5mult>:
 80090c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090c8:	4615      	mov	r5, r2
 80090ca:	f012 0203 	ands.w	r2, r2, #3
 80090ce:	4606      	mov	r6, r0
 80090d0:	460f      	mov	r7, r1
 80090d2:	d007      	beq.n	80090e4 <__pow5mult+0x20>
 80090d4:	4c25      	ldr	r4, [pc, #148]	; (800916c <__pow5mult+0xa8>)
 80090d6:	3a01      	subs	r2, #1
 80090d8:	2300      	movs	r3, #0
 80090da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090de:	f7ff fe9b 	bl	8008e18 <__multadd>
 80090e2:	4607      	mov	r7, r0
 80090e4:	10ad      	asrs	r5, r5, #2
 80090e6:	d03d      	beq.n	8009164 <__pow5mult+0xa0>
 80090e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090ea:	b97c      	cbnz	r4, 800910c <__pow5mult+0x48>
 80090ec:	2010      	movs	r0, #16
 80090ee:	f7ff fe1b 	bl	8008d28 <malloc>
 80090f2:	4602      	mov	r2, r0
 80090f4:	6270      	str	r0, [r6, #36]	; 0x24
 80090f6:	b928      	cbnz	r0, 8009104 <__pow5mult+0x40>
 80090f8:	4b1d      	ldr	r3, [pc, #116]	; (8009170 <__pow5mult+0xac>)
 80090fa:	481e      	ldr	r0, [pc, #120]	; (8009174 <__pow5mult+0xb0>)
 80090fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009100:	f000 fc20 	bl	8009944 <__assert_func>
 8009104:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009108:	6004      	str	r4, [r0, #0]
 800910a:	60c4      	str	r4, [r0, #12]
 800910c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009110:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009114:	b94c      	cbnz	r4, 800912a <__pow5mult+0x66>
 8009116:	f240 2171 	movw	r1, #625	; 0x271
 800911a:	4630      	mov	r0, r6
 800911c:	f7ff ff16 	bl	8008f4c <__i2b>
 8009120:	2300      	movs	r3, #0
 8009122:	f8c8 0008 	str.w	r0, [r8, #8]
 8009126:	4604      	mov	r4, r0
 8009128:	6003      	str	r3, [r0, #0]
 800912a:	f04f 0900 	mov.w	r9, #0
 800912e:	07eb      	lsls	r3, r5, #31
 8009130:	d50a      	bpl.n	8009148 <__pow5mult+0x84>
 8009132:	4639      	mov	r1, r7
 8009134:	4622      	mov	r2, r4
 8009136:	4630      	mov	r0, r6
 8009138:	f7ff ff1e 	bl	8008f78 <__multiply>
 800913c:	4639      	mov	r1, r7
 800913e:	4680      	mov	r8, r0
 8009140:	4630      	mov	r0, r6
 8009142:	f7ff fe47 	bl	8008dd4 <_Bfree>
 8009146:	4647      	mov	r7, r8
 8009148:	106d      	asrs	r5, r5, #1
 800914a:	d00b      	beq.n	8009164 <__pow5mult+0xa0>
 800914c:	6820      	ldr	r0, [r4, #0]
 800914e:	b938      	cbnz	r0, 8009160 <__pow5mult+0x9c>
 8009150:	4622      	mov	r2, r4
 8009152:	4621      	mov	r1, r4
 8009154:	4630      	mov	r0, r6
 8009156:	f7ff ff0f 	bl	8008f78 <__multiply>
 800915a:	6020      	str	r0, [r4, #0]
 800915c:	f8c0 9000 	str.w	r9, [r0]
 8009160:	4604      	mov	r4, r0
 8009162:	e7e4      	b.n	800912e <__pow5mult+0x6a>
 8009164:	4638      	mov	r0, r7
 8009166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800916a:	bf00      	nop
 800916c:	0800a198 	.word	0x0800a198
 8009170:	08009f5a 	.word	0x08009f5a
 8009174:	0800a044 	.word	0x0800a044

08009178 <__lshift>:
 8009178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800917c:	460c      	mov	r4, r1
 800917e:	6849      	ldr	r1, [r1, #4]
 8009180:	6923      	ldr	r3, [r4, #16]
 8009182:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009186:	68a3      	ldr	r3, [r4, #8]
 8009188:	4607      	mov	r7, r0
 800918a:	4691      	mov	r9, r2
 800918c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009190:	f108 0601 	add.w	r6, r8, #1
 8009194:	42b3      	cmp	r3, r6
 8009196:	db0b      	blt.n	80091b0 <__lshift+0x38>
 8009198:	4638      	mov	r0, r7
 800919a:	f7ff fddb 	bl	8008d54 <_Balloc>
 800919e:	4605      	mov	r5, r0
 80091a0:	b948      	cbnz	r0, 80091b6 <__lshift+0x3e>
 80091a2:	4602      	mov	r2, r0
 80091a4:	4b28      	ldr	r3, [pc, #160]	; (8009248 <__lshift+0xd0>)
 80091a6:	4829      	ldr	r0, [pc, #164]	; (800924c <__lshift+0xd4>)
 80091a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80091ac:	f000 fbca 	bl	8009944 <__assert_func>
 80091b0:	3101      	adds	r1, #1
 80091b2:	005b      	lsls	r3, r3, #1
 80091b4:	e7ee      	b.n	8009194 <__lshift+0x1c>
 80091b6:	2300      	movs	r3, #0
 80091b8:	f100 0114 	add.w	r1, r0, #20
 80091bc:	f100 0210 	add.w	r2, r0, #16
 80091c0:	4618      	mov	r0, r3
 80091c2:	4553      	cmp	r3, sl
 80091c4:	db33      	blt.n	800922e <__lshift+0xb6>
 80091c6:	6920      	ldr	r0, [r4, #16]
 80091c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091cc:	f104 0314 	add.w	r3, r4, #20
 80091d0:	f019 091f 	ands.w	r9, r9, #31
 80091d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091dc:	d02b      	beq.n	8009236 <__lshift+0xbe>
 80091de:	f1c9 0e20 	rsb	lr, r9, #32
 80091e2:	468a      	mov	sl, r1
 80091e4:	2200      	movs	r2, #0
 80091e6:	6818      	ldr	r0, [r3, #0]
 80091e8:	fa00 f009 	lsl.w	r0, r0, r9
 80091ec:	4302      	orrs	r2, r0
 80091ee:	f84a 2b04 	str.w	r2, [sl], #4
 80091f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091f6:	459c      	cmp	ip, r3
 80091f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80091fc:	d8f3      	bhi.n	80091e6 <__lshift+0x6e>
 80091fe:	ebac 0304 	sub.w	r3, ip, r4
 8009202:	3b15      	subs	r3, #21
 8009204:	f023 0303 	bic.w	r3, r3, #3
 8009208:	3304      	adds	r3, #4
 800920a:	f104 0015 	add.w	r0, r4, #21
 800920e:	4584      	cmp	ip, r0
 8009210:	bf38      	it	cc
 8009212:	2304      	movcc	r3, #4
 8009214:	50ca      	str	r2, [r1, r3]
 8009216:	b10a      	cbz	r2, 800921c <__lshift+0xa4>
 8009218:	f108 0602 	add.w	r6, r8, #2
 800921c:	3e01      	subs	r6, #1
 800921e:	4638      	mov	r0, r7
 8009220:	612e      	str	r6, [r5, #16]
 8009222:	4621      	mov	r1, r4
 8009224:	f7ff fdd6 	bl	8008dd4 <_Bfree>
 8009228:	4628      	mov	r0, r5
 800922a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800922e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009232:	3301      	adds	r3, #1
 8009234:	e7c5      	b.n	80091c2 <__lshift+0x4a>
 8009236:	3904      	subs	r1, #4
 8009238:	f853 2b04 	ldr.w	r2, [r3], #4
 800923c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009240:	459c      	cmp	ip, r3
 8009242:	d8f9      	bhi.n	8009238 <__lshift+0xc0>
 8009244:	e7ea      	b.n	800921c <__lshift+0xa4>
 8009246:	bf00      	nop
 8009248:	08009fd0 	.word	0x08009fd0
 800924c:	0800a044 	.word	0x0800a044

08009250 <__mcmp>:
 8009250:	b530      	push	{r4, r5, lr}
 8009252:	6902      	ldr	r2, [r0, #16]
 8009254:	690c      	ldr	r4, [r1, #16]
 8009256:	1b12      	subs	r2, r2, r4
 8009258:	d10e      	bne.n	8009278 <__mcmp+0x28>
 800925a:	f100 0314 	add.w	r3, r0, #20
 800925e:	3114      	adds	r1, #20
 8009260:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009264:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009268:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800926c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009270:	42a5      	cmp	r5, r4
 8009272:	d003      	beq.n	800927c <__mcmp+0x2c>
 8009274:	d305      	bcc.n	8009282 <__mcmp+0x32>
 8009276:	2201      	movs	r2, #1
 8009278:	4610      	mov	r0, r2
 800927a:	bd30      	pop	{r4, r5, pc}
 800927c:	4283      	cmp	r3, r0
 800927e:	d3f3      	bcc.n	8009268 <__mcmp+0x18>
 8009280:	e7fa      	b.n	8009278 <__mcmp+0x28>
 8009282:	f04f 32ff 	mov.w	r2, #4294967295
 8009286:	e7f7      	b.n	8009278 <__mcmp+0x28>

08009288 <__mdiff>:
 8009288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928c:	460c      	mov	r4, r1
 800928e:	4606      	mov	r6, r0
 8009290:	4611      	mov	r1, r2
 8009292:	4620      	mov	r0, r4
 8009294:	4617      	mov	r7, r2
 8009296:	f7ff ffdb 	bl	8009250 <__mcmp>
 800929a:	1e05      	subs	r5, r0, #0
 800929c:	d110      	bne.n	80092c0 <__mdiff+0x38>
 800929e:	4629      	mov	r1, r5
 80092a0:	4630      	mov	r0, r6
 80092a2:	f7ff fd57 	bl	8008d54 <_Balloc>
 80092a6:	b930      	cbnz	r0, 80092b6 <__mdiff+0x2e>
 80092a8:	4b39      	ldr	r3, [pc, #228]	; (8009390 <__mdiff+0x108>)
 80092aa:	4602      	mov	r2, r0
 80092ac:	f240 2132 	movw	r1, #562	; 0x232
 80092b0:	4838      	ldr	r0, [pc, #224]	; (8009394 <__mdiff+0x10c>)
 80092b2:	f000 fb47 	bl	8009944 <__assert_func>
 80092b6:	2301      	movs	r3, #1
 80092b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c0:	bfa4      	itt	ge
 80092c2:	463b      	movge	r3, r7
 80092c4:	4627      	movge	r7, r4
 80092c6:	4630      	mov	r0, r6
 80092c8:	6879      	ldr	r1, [r7, #4]
 80092ca:	bfa6      	itte	ge
 80092cc:	461c      	movge	r4, r3
 80092ce:	2500      	movge	r5, #0
 80092d0:	2501      	movlt	r5, #1
 80092d2:	f7ff fd3f 	bl	8008d54 <_Balloc>
 80092d6:	b920      	cbnz	r0, 80092e2 <__mdiff+0x5a>
 80092d8:	4b2d      	ldr	r3, [pc, #180]	; (8009390 <__mdiff+0x108>)
 80092da:	4602      	mov	r2, r0
 80092dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092e0:	e7e6      	b.n	80092b0 <__mdiff+0x28>
 80092e2:	693e      	ldr	r6, [r7, #16]
 80092e4:	60c5      	str	r5, [r0, #12]
 80092e6:	6925      	ldr	r5, [r4, #16]
 80092e8:	f107 0114 	add.w	r1, r7, #20
 80092ec:	f104 0914 	add.w	r9, r4, #20
 80092f0:	f100 0e14 	add.w	lr, r0, #20
 80092f4:	f107 0210 	add.w	r2, r7, #16
 80092f8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80092fc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009300:	46f2      	mov	sl, lr
 8009302:	2700      	movs	r7, #0
 8009304:	f859 3b04 	ldr.w	r3, [r9], #4
 8009308:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800930c:	fa1f f883 	uxth.w	r8, r3
 8009310:	fa17 f78b 	uxtah	r7, r7, fp
 8009314:	0c1b      	lsrs	r3, r3, #16
 8009316:	eba7 0808 	sub.w	r8, r7, r8
 800931a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800931e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009322:	fa1f f888 	uxth.w	r8, r8
 8009326:	141f      	asrs	r7, r3, #16
 8009328:	454d      	cmp	r5, r9
 800932a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800932e:	f84a 3b04 	str.w	r3, [sl], #4
 8009332:	d8e7      	bhi.n	8009304 <__mdiff+0x7c>
 8009334:	1b2b      	subs	r3, r5, r4
 8009336:	3b15      	subs	r3, #21
 8009338:	f023 0303 	bic.w	r3, r3, #3
 800933c:	3304      	adds	r3, #4
 800933e:	3415      	adds	r4, #21
 8009340:	42a5      	cmp	r5, r4
 8009342:	bf38      	it	cc
 8009344:	2304      	movcc	r3, #4
 8009346:	4419      	add	r1, r3
 8009348:	4473      	add	r3, lr
 800934a:	469e      	mov	lr, r3
 800934c:	460d      	mov	r5, r1
 800934e:	4565      	cmp	r5, ip
 8009350:	d30e      	bcc.n	8009370 <__mdiff+0xe8>
 8009352:	f10c 0203 	add.w	r2, ip, #3
 8009356:	1a52      	subs	r2, r2, r1
 8009358:	f022 0203 	bic.w	r2, r2, #3
 800935c:	3903      	subs	r1, #3
 800935e:	458c      	cmp	ip, r1
 8009360:	bf38      	it	cc
 8009362:	2200      	movcc	r2, #0
 8009364:	441a      	add	r2, r3
 8009366:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800936a:	b17b      	cbz	r3, 800938c <__mdiff+0x104>
 800936c:	6106      	str	r6, [r0, #16]
 800936e:	e7a5      	b.n	80092bc <__mdiff+0x34>
 8009370:	f855 8b04 	ldr.w	r8, [r5], #4
 8009374:	fa17 f488 	uxtah	r4, r7, r8
 8009378:	1422      	asrs	r2, r4, #16
 800937a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800937e:	b2a4      	uxth	r4, r4
 8009380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009384:	f84e 4b04 	str.w	r4, [lr], #4
 8009388:	1417      	asrs	r7, r2, #16
 800938a:	e7e0      	b.n	800934e <__mdiff+0xc6>
 800938c:	3e01      	subs	r6, #1
 800938e:	e7ea      	b.n	8009366 <__mdiff+0xde>
 8009390:	08009fd0 	.word	0x08009fd0
 8009394:	0800a044 	.word	0x0800a044

08009398 <__d2b>:
 8009398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800939c:	4689      	mov	r9, r1
 800939e:	2101      	movs	r1, #1
 80093a0:	ec57 6b10 	vmov	r6, r7, d0
 80093a4:	4690      	mov	r8, r2
 80093a6:	f7ff fcd5 	bl	8008d54 <_Balloc>
 80093aa:	4604      	mov	r4, r0
 80093ac:	b930      	cbnz	r0, 80093bc <__d2b+0x24>
 80093ae:	4602      	mov	r2, r0
 80093b0:	4b25      	ldr	r3, [pc, #148]	; (8009448 <__d2b+0xb0>)
 80093b2:	4826      	ldr	r0, [pc, #152]	; (800944c <__d2b+0xb4>)
 80093b4:	f240 310a 	movw	r1, #778	; 0x30a
 80093b8:	f000 fac4 	bl	8009944 <__assert_func>
 80093bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80093c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093c4:	bb35      	cbnz	r5, 8009414 <__d2b+0x7c>
 80093c6:	2e00      	cmp	r6, #0
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	d028      	beq.n	800941e <__d2b+0x86>
 80093cc:	4668      	mov	r0, sp
 80093ce:	9600      	str	r6, [sp, #0]
 80093d0:	f7ff fd8c 	bl	8008eec <__lo0bits>
 80093d4:	9900      	ldr	r1, [sp, #0]
 80093d6:	b300      	cbz	r0, 800941a <__d2b+0x82>
 80093d8:	9a01      	ldr	r2, [sp, #4]
 80093da:	f1c0 0320 	rsb	r3, r0, #32
 80093de:	fa02 f303 	lsl.w	r3, r2, r3
 80093e2:	430b      	orrs	r3, r1
 80093e4:	40c2      	lsrs	r2, r0
 80093e6:	6163      	str	r3, [r4, #20]
 80093e8:	9201      	str	r2, [sp, #4]
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	61a3      	str	r3, [r4, #24]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bf14      	ite	ne
 80093f2:	2202      	movne	r2, #2
 80093f4:	2201      	moveq	r2, #1
 80093f6:	6122      	str	r2, [r4, #16]
 80093f8:	b1d5      	cbz	r5, 8009430 <__d2b+0x98>
 80093fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093fe:	4405      	add	r5, r0
 8009400:	f8c9 5000 	str.w	r5, [r9]
 8009404:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009408:	f8c8 0000 	str.w	r0, [r8]
 800940c:	4620      	mov	r0, r4
 800940e:	b003      	add	sp, #12
 8009410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009418:	e7d5      	b.n	80093c6 <__d2b+0x2e>
 800941a:	6161      	str	r1, [r4, #20]
 800941c:	e7e5      	b.n	80093ea <__d2b+0x52>
 800941e:	a801      	add	r0, sp, #4
 8009420:	f7ff fd64 	bl	8008eec <__lo0bits>
 8009424:	9b01      	ldr	r3, [sp, #4]
 8009426:	6163      	str	r3, [r4, #20]
 8009428:	2201      	movs	r2, #1
 800942a:	6122      	str	r2, [r4, #16]
 800942c:	3020      	adds	r0, #32
 800942e:	e7e3      	b.n	80093f8 <__d2b+0x60>
 8009430:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009434:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009438:	f8c9 0000 	str.w	r0, [r9]
 800943c:	6918      	ldr	r0, [r3, #16]
 800943e:	f7ff fd35 	bl	8008eac <__hi0bits>
 8009442:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009446:	e7df      	b.n	8009408 <__d2b+0x70>
 8009448:	08009fd0 	.word	0x08009fd0
 800944c:	0800a044 	.word	0x0800a044

08009450 <_calloc_r>:
 8009450:	b513      	push	{r0, r1, r4, lr}
 8009452:	434a      	muls	r2, r1
 8009454:	4611      	mov	r1, r2
 8009456:	9201      	str	r2, [sp, #4]
 8009458:	f000 f85a 	bl	8009510 <_malloc_r>
 800945c:	4604      	mov	r4, r0
 800945e:	b118      	cbz	r0, 8009468 <_calloc_r+0x18>
 8009460:	9a01      	ldr	r2, [sp, #4]
 8009462:	2100      	movs	r1, #0
 8009464:	f7fd fd64 	bl	8006f30 <memset>
 8009468:	4620      	mov	r0, r4
 800946a:	b002      	add	sp, #8
 800946c:	bd10      	pop	{r4, pc}
	...

08009470 <_free_r>:
 8009470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009472:	2900      	cmp	r1, #0
 8009474:	d048      	beq.n	8009508 <_free_r+0x98>
 8009476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800947a:	9001      	str	r0, [sp, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	f1a1 0404 	sub.w	r4, r1, #4
 8009482:	bfb8      	it	lt
 8009484:	18e4      	addlt	r4, r4, r3
 8009486:	f000 fae3 	bl	8009a50 <__malloc_lock>
 800948a:	4a20      	ldr	r2, [pc, #128]	; (800950c <_free_r+0x9c>)
 800948c:	9801      	ldr	r0, [sp, #4]
 800948e:	6813      	ldr	r3, [r2, #0]
 8009490:	4615      	mov	r5, r2
 8009492:	b933      	cbnz	r3, 80094a2 <_free_r+0x32>
 8009494:	6063      	str	r3, [r4, #4]
 8009496:	6014      	str	r4, [r2, #0]
 8009498:	b003      	add	sp, #12
 800949a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800949e:	f000 badd 	b.w	8009a5c <__malloc_unlock>
 80094a2:	42a3      	cmp	r3, r4
 80094a4:	d90b      	bls.n	80094be <_free_r+0x4e>
 80094a6:	6821      	ldr	r1, [r4, #0]
 80094a8:	1862      	adds	r2, r4, r1
 80094aa:	4293      	cmp	r3, r2
 80094ac:	bf04      	itt	eq
 80094ae:	681a      	ldreq	r2, [r3, #0]
 80094b0:	685b      	ldreq	r3, [r3, #4]
 80094b2:	6063      	str	r3, [r4, #4]
 80094b4:	bf04      	itt	eq
 80094b6:	1852      	addeq	r2, r2, r1
 80094b8:	6022      	streq	r2, [r4, #0]
 80094ba:	602c      	str	r4, [r5, #0]
 80094bc:	e7ec      	b.n	8009498 <_free_r+0x28>
 80094be:	461a      	mov	r2, r3
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	b10b      	cbz	r3, 80094c8 <_free_r+0x58>
 80094c4:	42a3      	cmp	r3, r4
 80094c6:	d9fa      	bls.n	80094be <_free_r+0x4e>
 80094c8:	6811      	ldr	r1, [r2, #0]
 80094ca:	1855      	adds	r5, r2, r1
 80094cc:	42a5      	cmp	r5, r4
 80094ce:	d10b      	bne.n	80094e8 <_free_r+0x78>
 80094d0:	6824      	ldr	r4, [r4, #0]
 80094d2:	4421      	add	r1, r4
 80094d4:	1854      	adds	r4, r2, r1
 80094d6:	42a3      	cmp	r3, r4
 80094d8:	6011      	str	r1, [r2, #0]
 80094da:	d1dd      	bne.n	8009498 <_free_r+0x28>
 80094dc:	681c      	ldr	r4, [r3, #0]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	6053      	str	r3, [r2, #4]
 80094e2:	4421      	add	r1, r4
 80094e4:	6011      	str	r1, [r2, #0]
 80094e6:	e7d7      	b.n	8009498 <_free_r+0x28>
 80094e8:	d902      	bls.n	80094f0 <_free_r+0x80>
 80094ea:	230c      	movs	r3, #12
 80094ec:	6003      	str	r3, [r0, #0]
 80094ee:	e7d3      	b.n	8009498 <_free_r+0x28>
 80094f0:	6825      	ldr	r5, [r4, #0]
 80094f2:	1961      	adds	r1, r4, r5
 80094f4:	428b      	cmp	r3, r1
 80094f6:	bf04      	itt	eq
 80094f8:	6819      	ldreq	r1, [r3, #0]
 80094fa:	685b      	ldreq	r3, [r3, #4]
 80094fc:	6063      	str	r3, [r4, #4]
 80094fe:	bf04      	itt	eq
 8009500:	1949      	addeq	r1, r1, r5
 8009502:	6021      	streq	r1, [r4, #0]
 8009504:	6054      	str	r4, [r2, #4]
 8009506:	e7c7      	b.n	8009498 <_free_r+0x28>
 8009508:	b003      	add	sp, #12
 800950a:	bd30      	pop	{r4, r5, pc}
 800950c:	20000214 	.word	0x20000214

08009510 <_malloc_r>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	1ccd      	adds	r5, r1, #3
 8009514:	f025 0503 	bic.w	r5, r5, #3
 8009518:	3508      	adds	r5, #8
 800951a:	2d0c      	cmp	r5, #12
 800951c:	bf38      	it	cc
 800951e:	250c      	movcc	r5, #12
 8009520:	2d00      	cmp	r5, #0
 8009522:	4606      	mov	r6, r0
 8009524:	db01      	blt.n	800952a <_malloc_r+0x1a>
 8009526:	42a9      	cmp	r1, r5
 8009528:	d903      	bls.n	8009532 <_malloc_r+0x22>
 800952a:	230c      	movs	r3, #12
 800952c:	6033      	str	r3, [r6, #0]
 800952e:	2000      	movs	r0, #0
 8009530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009532:	f000 fa8d 	bl	8009a50 <__malloc_lock>
 8009536:	4921      	ldr	r1, [pc, #132]	; (80095bc <_malloc_r+0xac>)
 8009538:	680a      	ldr	r2, [r1, #0]
 800953a:	4614      	mov	r4, r2
 800953c:	b99c      	cbnz	r4, 8009566 <_malloc_r+0x56>
 800953e:	4f20      	ldr	r7, [pc, #128]	; (80095c0 <_malloc_r+0xb0>)
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	b923      	cbnz	r3, 800954e <_malloc_r+0x3e>
 8009544:	4621      	mov	r1, r4
 8009546:	4630      	mov	r0, r6
 8009548:	f000 f996 	bl	8009878 <_sbrk_r>
 800954c:	6038      	str	r0, [r7, #0]
 800954e:	4629      	mov	r1, r5
 8009550:	4630      	mov	r0, r6
 8009552:	f000 f991 	bl	8009878 <_sbrk_r>
 8009556:	1c43      	adds	r3, r0, #1
 8009558:	d123      	bne.n	80095a2 <_malloc_r+0x92>
 800955a:	230c      	movs	r3, #12
 800955c:	6033      	str	r3, [r6, #0]
 800955e:	4630      	mov	r0, r6
 8009560:	f000 fa7c 	bl	8009a5c <__malloc_unlock>
 8009564:	e7e3      	b.n	800952e <_malloc_r+0x1e>
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	1b5b      	subs	r3, r3, r5
 800956a:	d417      	bmi.n	800959c <_malloc_r+0x8c>
 800956c:	2b0b      	cmp	r3, #11
 800956e:	d903      	bls.n	8009578 <_malloc_r+0x68>
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	441c      	add	r4, r3
 8009574:	6025      	str	r5, [r4, #0]
 8009576:	e004      	b.n	8009582 <_malloc_r+0x72>
 8009578:	6863      	ldr	r3, [r4, #4]
 800957a:	42a2      	cmp	r2, r4
 800957c:	bf0c      	ite	eq
 800957e:	600b      	streq	r3, [r1, #0]
 8009580:	6053      	strne	r3, [r2, #4]
 8009582:	4630      	mov	r0, r6
 8009584:	f000 fa6a 	bl	8009a5c <__malloc_unlock>
 8009588:	f104 000b 	add.w	r0, r4, #11
 800958c:	1d23      	adds	r3, r4, #4
 800958e:	f020 0007 	bic.w	r0, r0, #7
 8009592:	1ac2      	subs	r2, r0, r3
 8009594:	d0cc      	beq.n	8009530 <_malloc_r+0x20>
 8009596:	1a1b      	subs	r3, r3, r0
 8009598:	50a3      	str	r3, [r4, r2]
 800959a:	e7c9      	b.n	8009530 <_malloc_r+0x20>
 800959c:	4622      	mov	r2, r4
 800959e:	6864      	ldr	r4, [r4, #4]
 80095a0:	e7cc      	b.n	800953c <_malloc_r+0x2c>
 80095a2:	1cc4      	adds	r4, r0, #3
 80095a4:	f024 0403 	bic.w	r4, r4, #3
 80095a8:	42a0      	cmp	r0, r4
 80095aa:	d0e3      	beq.n	8009574 <_malloc_r+0x64>
 80095ac:	1a21      	subs	r1, r4, r0
 80095ae:	4630      	mov	r0, r6
 80095b0:	f000 f962 	bl	8009878 <_sbrk_r>
 80095b4:	3001      	adds	r0, #1
 80095b6:	d1dd      	bne.n	8009574 <_malloc_r+0x64>
 80095b8:	e7cf      	b.n	800955a <_malloc_r+0x4a>
 80095ba:	bf00      	nop
 80095bc:	20000214 	.word	0x20000214
 80095c0:	20000218 	.word	0x20000218

080095c4 <__sfputc_r>:
 80095c4:	6893      	ldr	r3, [r2, #8]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	b410      	push	{r4}
 80095cc:	6093      	str	r3, [r2, #8]
 80095ce:	da08      	bge.n	80095e2 <__sfputc_r+0x1e>
 80095d0:	6994      	ldr	r4, [r2, #24]
 80095d2:	42a3      	cmp	r3, r4
 80095d4:	db01      	blt.n	80095da <__sfputc_r+0x16>
 80095d6:	290a      	cmp	r1, #10
 80095d8:	d103      	bne.n	80095e2 <__sfputc_r+0x1e>
 80095da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095de:	f7fe ba47 	b.w	8007a70 <__swbuf_r>
 80095e2:	6813      	ldr	r3, [r2, #0]
 80095e4:	1c58      	adds	r0, r3, #1
 80095e6:	6010      	str	r0, [r2, #0]
 80095e8:	7019      	strb	r1, [r3, #0]
 80095ea:	4608      	mov	r0, r1
 80095ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <__sfputs_r>:
 80095f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f4:	4606      	mov	r6, r0
 80095f6:	460f      	mov	r7, r1
 80095f8:	4614      	mov	r4, r2
 80095fa:	18d5      	adds	r5, r2, r3
 80095fc:	42ac      	cmp	r4, r5
 80095fe:	d101      	bne.n	8009604 <__sfputs_r+0x12>
 8009600:	2000      	movs	r0, #0
 8009602:	e007      	b.n	8009614 <__sfputs_r+0x22>
 8009604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009608:	463a      	mov	r2, r7
 800960a:	4630      	mov	r0, r6
 800960c:	f7ff ffda 	bl	80095c4 <__sfputc_r>
 8009610:	1c43      	adds	r3, r0, #1
 8009612:	d1f3      	bne.n	80095fc <__sfputs_r+0xa>
 8009614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009618 <_vfiprintf_r>:
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961c:	460d      	mov	r5, r1
 800961e:	b09d      	sub	sp, #116	; 0x74
 8009620:	4614      	mov	r4, r2
 8009622:	4698      	mov	r8, r3
 8009624:	4606      	mov	r6, r0
 8009626:	b118      	cbz	r0, 8009630 <_vfiprintf_r+0x18>
 8009628:	6983      	ldr	r3, [r0, #24]
 800962a:	b90b      	cbnz	r3, 8009630 <_vfiprintf_r+0x18>
 800962c:	f7ff fa72 	bl	8008b14 <__sinit>
 8009630:	4b89      	ldr	r3, [pc, #548]	; (8009858 <_vfiprintf_r+0x240>)
 8009632:	429d      	cmp	r5, r3
 8009634:	d11b      	bne.n	800966e <_vfiprintf_r+0x56>
 8009636:	6875      	ldr	r5, [r6, #4]
 8009638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800963a:	07d9      	lsls	r1, r3, #31
 800963c:	d405      	bmi.n	800964a <_vfiprintf_r+0x32>
 800963e:	89ab      	ldrh	r3, [r5, #12]
 8009640:	059a      	lsls	r2, r3, #22
 8009642:	d402      	bmi.n	800964a <_vfiprintf_r+0x32>
 8009644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009646:	f7ff fb08 	bl	8008c5a <__retarget_lock_acquire_recursive>
 800964a:	89ab      	ldrh	r3, [r5, #12]
 800964c:	071b      	lsls	r3, r3, #28
 800964e:	d501      	bpl.n	8009654 <_vfiprintf_r+0x3c>
 8009650:	692b      	ldr	r3, [r5, #16]
 8009652:	b9eb      	cbnz	r3, 8009690 <_vfiprintf_r+0x78>
 8009654:	4629      	mov	r1, r5
 8009656:	4630      	mov	r0, r6
 8009658:	f7fe fa5c 	bl	8007b14 <__swsetup_r>
 800965c:	b1c0      	cbz	r0, 8009690 <_vfiprintf_r+0x78>
 800965e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009660:	07dc      	lsls	r4, r3, #31
 8009662:	d50e      	bpl.n	8009682 <_vfiprintf_r+0x6a>
 8009664:	f04f 30ff 	mov.w	r0, #4294967295
 8009668:	b01d      	add	sp, #116	; 0x74
 800966a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966e:	4b7b      	ldr	r3, [pc, #492]	; (800985c <_vfiprintf_r+0x244>)
 8009670:	429d      	cmp	r5, r3
 8009672:	d101      	bne.n	8009678 <_vfiprintf_r+0x60>
 8009674:	68b5      	ldr	r5, [r6, #8]
 8009676:	e7df      	b.n	8009638 <_vfiprintf_r+0x20>
 8009678:	4b79      	ldr	r3, [pc, #484]	; (8009860 <_vfiprintf_r+0x248>)
 800967a:	429d      	cmp	r5, r3
 800967c:	bf08      	it	eq
 800967e:	68f5      	ldreq	r5, [r6, #12]
 8009680:	e7da      	b.n	8009638 <_vfiprintf_r+0x20>
 8009682:	89ab      	ldrh	r3, [r5, #12]
 8009684:	0598      	lsls	r0, r3, #22
 8009686:	d4ed      	bmi.n	8009664 <_vfiprintf_r+0x4c>
 8009688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800968a:	f7ff fae7 	bl	8008c5c <__retarget_lock_release_recursive>
 800968e:	e7e9      	b.n	8009664 <_vfiprintf_r+0x4c>
 8009690:	2300      	movs	r3, #0
 8009692:	9309      	str	r3, [sp, #36]	; 0x24
 8009694:	2320      	movs	r3, #32
 8009696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800969a:	f8cd 800c 	str.w	r8, [sp, #12]
 800969e:	2330      	movs	r3, #48	; 0x30
 80096a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009864 <_vfiprintf_r+0x24c>
 80096a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096a8:	f04f 0901 	mov.w	r9, #1
 80096ac:	4623      	mov	r3, r4
 80096ae:	469a      	mov	sl, r3
 80096b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096b4:	b10a      	cbz	r2, 80096ba <_vfiprintf_r+0xa2>
 80096b6:	2a25      	cmp	r2, #37	; 0x25
 80096b8:	d1f9      	bne.n	80096ae <_vfiprintf_r+0x96>
 80096ba:	ebba 0b04 	subs.w	fp, sl, r4
 80096be:	d00b      	beq.n	80096d8 <_vfiprintf_r+0xc0>
 80096c0:	465b      	mov	r3, fp
 80096c2:	4622      	mov	r2, r4
 80096c4:	4629      	mov	r1, r5
 80096c6:	4630      	mov	r0, r6
 80096c8:	f7ff ff93 	bl	80095f2 <__sfputs_r>
 80096cc:	3001      	adds	r0, #1
 80096ce:	f000 80aa 	beq.w	8009826 <_vfiprintf_r+0x20e>
 80096d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096d4:	445a      	add	r2, fp
 80096d6:	9209      	str	r2, [sp, #36]	; 0x24
 80096d8:	f89a 3000 	ldrb.w	r3, [sl]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 80a2 	beq.w	8009826 <_vfiprintf_r+0x20e>
 80096e2:	2300      	movs	r3, #0
 80096e4:	f04f 32ff 	mov.w	r2, #4294967295
 80096e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ec:	f10a 0a01 	add.w	sl, sl, #1
 80096f0:	9304      	str	r3, [sp, #16]
 80096f2:	9307      	str	r3, [sp, #28]
 80096f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096f8:	931a      	str	r3, [sp, #104]	; 0x68
 80096fa:	4654      	mov	r4, sl
 80096fc:	2205      	movs	r2, #5
 80096fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009702:	4858      	ldr	r0, [pc, #352]	; (8009864 <_vfiprintf_r+0x24c>)
 8009704:	f7f6 fd94 	bl	8000230 <memchr>
 8009708:	9a04      	ldr	r2, [sp, #16]
 800970a:	b9d8      	cbnz	r0, 8009744 <_vfiprintf_r+0x12c>
 800970c:	06d1      	lsls	r1, r2, #27
 800970e:	bf44      	itt	mi
 8009710:	2320      	movmi	r3, #32
 8009712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009716:	0713      	lsls	r3, r2, #28
 8009718:	bf44      	itt	mi
 800971a:	232b      	movmi	r3, #43	; 0x2b
 800971c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009720:	f89a 3000 	ldrb.w	r3, [sl]
 8009724:	2b2a      	cmp	r3, #42	; 0x2a
 8009726:	d015      	beq.n	8009754 <_vfiprintf_r+0x13c>
 8009728:	9a07      	ldr	r2, [sp, #28]
 800972a:	4654      	mov	r4, sl
 800972c:	2000      	movs	r0, #0
 800972e:	f04f 0c0a 	mov.w	ip, #10
 8009732:	4621      	mov	r1, r4
 8009734:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009738:	3b30      	subs	r3, #48	; 0x30
 800973a:	2b09      	cmp	r3, #9
 800973c:	d94e      	bls.n	80097dc <_vfiprintf_r+0x1c4>
 800973e:	b1b0      	cbz	r0, 800976e <_vfiprintf_r+0x156>
 8009740:	9207      	str	r2, [sp, #28]
 8009742:	e014      	b.n	800976e <_vfiprintf_r+0x156>
 8009744:	eba0 0308 	sub.w	r3, r0, r8
 8009748:	fa09 f303 	lsl.w	r3, r9, r3
 800974c:	4313      	orrs	r3, r2
 800974e:	9304      	str	r3, [sp, #16]
 8009750:	46a2      	mov	sl, r4
 8009752:	e7d2      	b.n	80096fa <_vfiprintf_r+0xe2>
 8009754:	9b03      	ldr	r3, [sp, #12]
 8009756:	1d19      	adds	r1, r3, #4
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	9103      	str	r1, [sp, #12]
 800975c:	2b00      	cmp	r3, #0
 800975e:	bfbb      	ittet	lt
 8009760:	425b      	neglt	r3, r3
 8009762:	f042 0202 	orrlt.w	r2, r2, #2
 8009766:	9307      	strge	r3, [sp, #28]
 8009768:	9307      	strlt	r3, [sp, #28]
 800976a:	bfb8      	it	lt
 800976c:	9204      	strlt	r2, [sp, #16]
 800976e:	7823      	ldrb	r3, [r4, #0]
 8009770:	2b2e      	cmp	r3, #46	; 0x2e
 8009772:	d10c      	bne.n	800978e <_vfiprintf_r+0x176>
 8009774:	7863      	ldrb	r3, [r4, #1]
 8009776:	2b2a      	cmp	r3, #42	; 0x2a
 8009778:	d135      	bne.n	80097e6 <_vfiprintf_r+0x1ce>
 800977a:	9b03      	ldr	r3, [sp, #12]
 800977c:	1d1a      	adds	r2, r3, #4
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	9203      	str	r2, [sp, #12]
 8009782:	2b00      	cmp	r3, #0
 8009784:	bfb8      	it	lt
 8009786:	f04f 33ff 	movlt.w	r3, #4294967295
 800978a:	3402      	adds	r4, #2
 800978c:	9305      	str	r3, [sp, #20]
 800978e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009874 <_vfiprintf_r+0x25c>
 8009792:	7821      	ldrb	r1, [r4, #0]
 8009794:	2203      	movs	r2, #3
 8009796:	4650      	mov	r0, sl
 8009798:	f7f6 fd4a 	bl	8000230 <memchr>
 800979c:	b140      	cbz	r0, 80097b0 <_vfiprintf_r+0x198>
 800979e:	2340      	movs	r3, #64	; 0x40
 80097a0:	eba0 000a 	sub.w	r0, r0, sl
 80097a4:	fa03 f000 	lsl.w	r0, r3, r0
 80097a8:	9b04      	ldr	r3, [sp, #16]
 80097aa:	4303      	orrs	r3, r0
 80097ac:	3401      	adds	r4, #1
 80097ae:	9304      	str	r3, [sp, #16]
 80097b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b4:	482c      	ldr	r0, [pc, #176]	; (8009868 <_vfiprintf_r+0x250>)
 80097b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097ba:	2206      	movs	r2, #6
 80097bc:	f7f6 fd38 	bl	8000230 <memchr>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	d03f      	beq.n	8009844 <_vfiprintf_r+0x22c>
 80097c4:	4b29      	ldr	r3, [pc, #164]	; (800986c <_vfiprintf_r+0x254>)
 80097c6:	bb1b      	cbnz	r3, 8009810 <_vfiprintf_r+0x1f8>
 80097c8:	9b03      	ldr	r3, [sp, #12]
 80097ca:	3307      	adds	r3, #7
 80097cc:	f023 0307 	bic.w	r3, r3, #7
 80097d0:	3308      	adds	r3, #8
 80097d2:	9303      	str	r3, [sp, #12]
 80097d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d6:	443b      	add	r3, r7
 80097d8:	9309      	str	r3, [sp, #36]	; 0x24
 80097da:	e767      	b.n	80096ac <_vfiprintf_r+0x94>
 80097dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80097e0:	460c      	mov	r4, r1
 80097e2:	2001      	movs	r0, #1
 80097e4:	e7a5      	b.n	8009732 <_vfiprintf_r+0x11a>
 80097e6:	2300      	movs	r3, #0
 80097e8:	3401      	adds	r4, #1
 80097ea:	9305      	str	r3, [sp, #20]
 80097ec:	4619      	mov	r1, r3
 80097ee:	f04f 0c0a 	mov.w	ip, #10
 80097f2:	4620      	mov	r0, r4
 80097f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097f8:	3a30      	subs	r2, #48	; 0x30
 80097fa:	2a09      	cmp	r2, #9
 80097fc:	d903      	bls.n	8009806 <_vfiprintf_r+0x1ee>
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d0c5      	beq.n	800978e <_vfiprintf_r+0x176>
 8009802:	9105      	str	r1, [sp, #20]
 8009804:	e7c3      	b.n	800978e <_vfiprintf_r+0x176>
 8009806:	fb0c 2101 	mla	r1, ip, r1, r2
 800980a:	4604      	mov	r4, r0
 800980c:	2301      	movs	r3, #1
 800980e:	e7f0      	b.n	80097f2 <_vfiprintf_r+0x1da>
 8009810:	ab03      	add	r3, sp, #12
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	462a      	mov	r2, r5
 8009816:	4b16      	ldr	r3, [pc, #88]	; (8009870 <_vfiprintf_r+0x258>)
 8009818:	a904      	add	r1, sp, #16
 800981a:	4630      	mov	r0, r6
 800981c:	f7fd fc30 	bl	8007080 <_printf_float>
 8009820:	4607      	mov	r7, r0
 8009822:	1c78      	adds	r0, r7, #1
 8009824:	d1d6      	bne.n	80097d4 <_vfiprintf_r+0x1bc>
 8009826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009828:	07d9      	lsls	r1, r3, #31
 800982a:	d405      	bmi.n	8009838 <_vfiprintf_r+0x220>
 800982c:	89ab      	ldrh	r3, [r5, #12]
 800982e:	059a      	lsls	r2, r3, #22
 8009830:	d402      	bmi.n	8009838 <_vfiprintf_r+0x220>
 8009832:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009834:	f7ff fa12 	bl	8008c5c <__retarget_lock_release_recursive>
 8009838:	89ab      	ldrh	r3, [r5, #12]
 800983a:	065b      	lsls	r3, r3, #25
 800983c:	f53f af12 	bmi.w	8009664 <_vfiprintf_r+0x4c>
 8009840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009842:	e711      	b.n	8009668 <_vfiprintf_r+0x50>
 8009844:	ab03      	add	r3, sp, #12
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	462a      	mov	r2, r5
 800984a:	4b09      	ldr	r3, [pc, #36]	; (8009870 <_vfiprintf_r+0x258>)
 800984c:	a904      	add	r1, sp, #16
 800984e:	4630      	mov	r0, r6
 8009850:	f7fd feba 	bl	80075c8 <_printf_i>
 8009854:	e7e4      	b.n	8009820 <_vfiprintf_r+0x208>
 8009856:	bf00      	nop
 8009858:	0800a004 	.word	0x0800a004
 800985c:	0800a024 	.word	0x0800a024
 8009860:	08009fe4 	.word	0x08009fe4
 8009864:	0800a1a4 	.word	0x0800a1a4
 8009868:	0800a1ae 	.word	0x0800a1ae
 800986c:	08007081 	.word	0x08007081
 8009870:	080095f3 	.word	0x080095f3
 8009874:	0800a1aa 	.word	0x0800a1aa

08009878 <_sbrk_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4d06      	ldr	r5, [pc, #24]	; (8009894 <_sbrk_r+0x1c>)
 800987c:	2300      	movs	r3, #0
 800987e:	4604      	mov	r4, r0
 8009880:	4608      	mov	r0, r1
 8009882:	602b      	str	r3, [r5, #0]
 8009884:	f7f8 f80e 	bl	80018a4 <_sbrk>
 8009888:	1c43      	adds	r3, r0, #1
 800988a:	d102      	bne.n	8009892 <_sbrk_r+0x1a>
 800988c:	682b      	ldr	r3, [r5, #0]
 800988e:	b103      	cbz	r3, 8009892 <_sbrk_r+0x1a>
 8009890:	6023      	str	r3, [r4, #0]
 8009892:	bd38      	pop	{r3, r4, r5, pc}
 8009894:	200004a4 	.word	0x200004a4

08009898 <__sread>:
 8009898:	b510      	push	{r4, lr}
 800989a:	460c      	mov	r4, r1
 800989c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a0:	f000 f8e2 	bl	8009a68 <_read_r>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	bfab      	itete	ge
 80098a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098aa:	89a3      	ldrhlt	r3, [r4, #12]
 80098ac:	181b      	addge	r3, r3, r0
 80098ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098b2:	bfac      	ite	ge
 80098b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098b6:	81a3      	strhlt	r3, [r4, #12]
 80098b8:	bd10      	pop	{r4, pc}

080098ba <__swrite>:
 80098ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098be:	461f      	mov	r7, r3
 80098c0:	898b      	ldrh	r3, [r1, #12]
 80098c2:	05db      	lsls	r3, r3, #23
 80098c4:	4605      	mov	r5, r0
 80098c6:	460c      	mov	r4, r1
 80098c8:	4616      	mov	r6, r2
 80098ca:	d505      	bpl.n	80098d8 <__swrite+0x1e>
 80098cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d0:	2302      	movs	r3, #2
 80098d2:	2200      	movs	r2, #0
 80098d4:	f000 f898 	bl	8009a08 <_lseek_r>
 80098d8:	89a3      	ldrh	r3, [r4, #12]
 80098da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098e2:	81a3      	strh	r3, [r4, #12]
 80098e4:	4632      	mov	r2, r6
 80098e6:	463b      	mov	r3, r7
 80098e8:	4628      	mov	r0, r5
 80098ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098ee:	f000 b817 	b.w	8009920 <_write_r>

080098f2 <__sseek>:
 80098f2:	b510      	push	{r4, lr}
 80098f4:	460c      	mov	r4, r1
 80098f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098fa:	f000 f885 	bl	8009a08 <_lseek_r>
 80098fe:	1c43      	adds	r3, r0, #1
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	bf15      	itete	ne
 8009904:	6560      	strne	r0, [r4, #84]	; 0x54
 8009906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800990a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800990e:	81a3      	strheq	r3, [r4, #12]
 8009910:	bf18      	it	ne
 8009912:	81a3      	strhne	r3, [r4, #12]
 8009914:	bd10      	pop	{r4, pc}

08009916 <__sclose>:
 8009916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800991a:	f000 b831 	b.w	8009980 <_close_r>
	...

08009920 <_write_r>:
 8009920:	b538      	push	{r3, r4, r5, lr}
 8009922:	4d07      	ldr	r5, [pc, #28]	; (8009940 <_write_r+0x20>)
 8009924:	4604      	mov	r4, r0
 8009926:	4608      	mov	r0, r1
 8009928:	4611      	mov	r1, r2
 800992a:	2200      	movs	r2, #0
 800992c:	602a      	str	r2, [r5, #0]
 800992e:	461a      	mov	r2, r3
 8009930:	f7f7 ff67 	bl	8001802 <_write>
 8009934:	1c43      	adds	r3, r0, #1
 8009936:	d102      	bne.n	800993e <_write_r+0x1e>
 8009938:	682b      	ldr	r3, [r5, #0]
 800993a:	b103      	cbz	r3, 800993e <_write_r+0x1e>
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	bd38      	pop	{r3, r4, r5, pc}
 8009940:	200004a4 	.word	0x200004a4

08009944 <__assert_func>:
 8009944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009946:	4614      	mov	r4, r2
 8009948:	461a      	mov	r2, r3
 800994a:	4b09      	ldr	r3, [pc, #36]	; (8009970 <__assert_func+0x2c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4605      	mov	r5, r0
 8009950:	68d8      	ldr	r0, [r3, #12]
 8009952:	b14c      	cbz	r4, 8009968 <__assert_func+0x24>
 8009954:	4b07      	ldr	r3, [pc, #28]	; (8009974 <__assert_func+0x30>)
 8009956:	9100      	str	r1, [sp, #0]
 8009958:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800995c:	4906      	ldr	r1, [pc, #24]	; (8009978 <__assert_func+0x34>)
 800995e:	462b      	mov	r3, r5
 8009960:	f000 f81e 	bl	80099a0 <fiprintf>
 8009964:	f000 f89f 	bl	8009aa6 <abort>
 8009968:	4b04      	ldr	r3, [pc, #16]	; (800997c <__assert_func+0x38>)
 800996a:	461c      	mov	r4, r3
 800996c:	e7f3      	b.n	8009956 <__assert_func+0x12>
 800996e:	bf00      	nop
 8009970:	20000010 	.word	0x20000010
 8009974:	0800a1b5 	.word	0x0800a1b5
 8009978:	0800a1c2 	.word	0x0800a1c2
 800997c:	0800a1f0 	.word	0x0800a1f0

08009980 <_close_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4d06      	ldr	r5, [pc, #24]	; (800999c <_close_r+0x1c>)
 8009984:	2300      	movs	r3, #0
 8009986:	4604      	mov	r4, r0
 8009988:	4608      	mov	r0, r1
 800998a:	602b      	str	r3, [r5, #0]
 800998c:	f7f7 ff55 	bl	800183a <_close>
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d102      	bne.n	800999a <_close_r+0x1a>
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	b103      	cbz	r3, 800999a <_close_r+0x1a>
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	bd38      	pop	{r3, r4, r5, pc}
 800999c:	200004a4 	.word	0x200004a4

080099a0 <fiprintf>:
 80099a0:	b40e      	push	{r1, r2, r3}
 80099a2:	b503      	push	{r0, r1, lr}
 80099a4:	4601      	mov	r1, r0
 80099a6:	ab03      	add	r3, sp, #12
 80099a8:	4805      	ldr	r0, [pc, #20]	; (80099c0 <fiprintf+0x20>)
 80099aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ae:	6800      	ldr	r0, [r0, #0]
 80099b0:	9301      	str	r3, [sp, #4]
 80099b2:	f7ff fe31 	bl	8009618 <_vfiprintf_r>
 80099b6:	b002      	add	sp, #8
 80099b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099bc:	b003      	add	sp, #12
 80099be:	4770      	bx	lr
 80099c0:	20000010 	.word	0x20000010

080099c4 <_fstat_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4d07      	ldr	r5, [pc, #28]	; (80099e4 <_fstat_r+0x20>)
 80099c8:	2300      	movs	r3, #0
 80099ca:	4604      	mov	r4, r0
 80099cc:	4608      	mov	r0, r1
 80099ce:	4611      	mov	r1, r2
 80099d0:	602b      	str	r3, [r5, #0]
 80099d2:	f7f7 ff3e 	bl	8001852 <_fstat>
 80099d6:	1c43      	adds	r3, r0, #1
 80099d8:	d102      	bne.n	80099e0 <_fstat_r+0x1c>
 80099da:	682b      	ldr	r3, [r5, #0]
 80099dc:	b103      	cbz	r3, 80099e0 <_fstat_r+0x1c>
 80099de:	6023      	str	r3, [r4, #0]
 80099e0:	bd38      	pop	{r3, r4, r5, pc}
 80099e2:	bf00      	nop
 80099e4:	200004a4 	.word	0x200004a4

080099e8 <_isatty_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4d06      	ldr	r5, [pc, #24]	; (8009a04 <_isatty_r+0x1c>)
 80099ec:	2300      	movs	r3, #0
 80099ee:	4604      	mov	r4, r0
 80099f0:	4608      	mov	r0, r1
 80099f2:	602b      	str	r3, [r5, #0]
 80099f4:	f7f7 ff3d 	bl	8001872 <_isatty>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d102      	bne.n	8009a02 <_isatty_r+0x1a>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	b103      	cbz	r3, 8009a02 <_isatty_r+0x1a>
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	200004a4 	.word	0x200004a4

08009a08 <_lseek_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	4d07      	ldr	r5, [pc, #28]	; (8009a28 <_lseek_r+0x20>)
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	4608      	mov	r0, r1
 8009a10:	4611      	mov	r1, r2
 8009a12:	2200      	movs	r2, #0
 8009a14:	602a      	str	r2, [r5, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	f7f7 ff36 	bl	8001888 <_lseek>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d102      	bne.n	8009a26 <_lseek_r+0x1e>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	b103      	cbz	r3, 8009a26 <_lseek_r+0x1e>
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	bd38      	pop	{r3, r4, r5, pc}
 8009a28:	200004a4 	.word	0x200004a4

08009a2c <__ascii_mbtowc>:
 8009a2c:	b082      	sub	sp, #8
 8009a2e:	b901      	cbnz	r1, 8009a32 <__ascii_mbtowc+0x6>
 8009a30:	a901      	add	r1, sp, #4
 8009a32:	b142      	cbz	r2, 8009a46 <__ascii_mbtowc+0x1a>
 8009a34:	b14b      	cbz	r3, 8009a4a <__ascii_mbtowc+0x1e>
 8009a36:	7813      	ldrb	r3, [r2, #0]
 8009a38:	600b      	str	r3, [r1, #0]
 8009a3a:	7812      	ldrb	r2, [r2, #0]
 8009a3c:	1e10      	subs	r0, r2, #0
 8009a3e:	bf18      	it	ne
 8009a40:	2001      	movne	r0, #1
 8009a42:	b002      	add	sp, #8
 8009a44:	4770      	bx	lr
 8009a46:	4610      	mov	r0, r2
 8009a48:	e7fb      	b.n	8009a42 <__ascii_mbtowc+0x16>
 8009a4a:	f06f 0001 	mvn.w	r0, #1
 8009a4e:	e7f8      	b.n	8009a42 <__ascii_mbtowc+0x16>

08009a50 <__malloc_lock>:
 8009a50:	4801      	ldr	r0, [pc, #4]	; (8009a58 <__malloc_lock+0x8>)
 8009a52:	f7ff b902 	b.w	8008c5a <__retarget_lock_acquire_recursive>
 8009a56:	bf00      	nop
 8009a58:	2000049c 	.word	0x2000049c

08009a5c <__malloc_unlock>:
 8009a5c:	4801      	ldr	r0, [pc, #4]	; (8009a64 <__malloc_unlock+0x8>)
 8009a5e:	f7ff b8fd 	b.w	8008c5c <__retarget_lock_release_recursive>
 8009a62:	bf00      	nop
 8009a64:	2000049c 	.word	0x2000049c

08009a68 <_read_r>:
 8009a68:	b538      	push	{r3, r4, r5, lr}
 8009a6a:	4d07      	ldr	r5, [pc, #28]	; (8009a88 <_read_r+0x20>)
 8009a6c:	4604      	mov	r4, r0
 8009a6e:	4608      	mov	r0, r1
 8009a70:	4611      	mov	r1, r2
 8009a72:	2200      	movs	r2, #0
 8009a74:	602a      	str	r2, [r5, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	f7f7 fea6 	bl	80017c8 <_read>
 8009a7c:	1c43      	adds	r3, r0, #1
 8009a7e:	d102      	bne.n	8009a86 <_read_r+0x1e>
 8009a80:	682b      	ldr	r3, [r5, #0]
 8009a82:	b103      	cbz	r3, 8009a86 <_read_r+0x1e>
 8009a84:	6023      	str	r3, [r4, #0]
 8009a86:	bd38      	pop	{r3, r4, r5, pc}
 8009a88:	200004a4 	.word	0x200004a4

08009a8c <__ascii_wctomb>:
 8009a8c:	b149      	cbz	r1, 8009aa2 <__ascii_wctomb+0x16>
 8009a8e:	2aff      	cmp	r2, #255	; 0xff
 8009a90:	bf85      	ittet	hi
 8009a92:	238a      	movhi	r3, #138	; 0x8a
 8009a94:	6003      	strhi	r3, [r0, #0]
 8009a96:	700a      	strbls	r2, [r1, #0]
 8009a98:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a9c:	bf98      	it	ls
 8009a9e:	2001      	movls	r0, #1
 8009aa0:	4770      	bx	lr
 8009aa2:	4608      	mov	r0, r1
 8009aa4:	4770      	bx	lr

08009aa6 <abort>:
 8009aa6:	b508      	push	{r3, lr}
 8009aa8:	2006      	movs	r0, #6
 8009aaa:	f000 f82b 	bl	8009b04 <raise>
 8009aae:	2001      	movs	r0, #1
 8009ab0:	f7f7 fe80 	bl	80017b4 <_exit>

08009ab4 <_raise_r>:
 8009ab4:	291f      	cmp	r1, #31
 8009ab6:	b538      	push	{r3, r4, r5, lr}
 8009ab8:	4604      	mov	r4, r0
 8009aba:	460d      	mov	r5, r1
 8009abc:	d904      	bls.n	8009ac8 <_raise_r+0x14>
 8009abe:	2316      	movs	r3, #22
 8009ac0:	6003      	str	r3, [r0, #0]
 8009ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac6:	bd38      	pop	{r3, r4, r5, pc}
 8009ac8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009aca:	b112      	cbz	r2, 8009ad2 <_raise_r+0x1e>
 8009acc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ad0:	b94b      	cbnz	r3, 8009ae6 <_raise_r+0x32>
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f000 f830 	bl	8009b38 <_getpid_r>
 8009ad8:	462a      	mov	r2, r5
 8009ada:	4601      	mov	r1, r0
 8009adc:	4620      	mov	r0, r4
 8009ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ae2:	f000 b817 	b.w	8009b14 <_kill_r>
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d00a      	beq.n	8009b00 <_raise_r+0x4c>
 8009aea:	1c59      	adds	r1, r3, #1
 8009aec:	d103      	bne.n	8009af6 <_raise_r+0x42>
 8009aee:	2316      	movs	r3, #22
 8009af0:	6003      	str	r3, [r0, #0]
 8009af2:	2001      	movs	r0, #1
 8009af4:	e7e7      	b.n	8009ac6 <_raise_r+0x12>
 8009af6:	2400      	movs	r4, #0
 8009af8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009afc:	4628      	mov	r0, r5
 8009afe:	4798      	blx	r3
 8009b00:	2000      	movs	r0, #0
 8009b02:	e7e0      	b.n	8009ac6 <_raise_r+0x12>

08009b04 <raise>:
 8009b04:	4b02      	ldr	r3, [pc, #8]	; (8009b10 <raise+0xc>)
 8009b06:	4601      	mov	r1, r0
 8009b08:	6818      	ldr	r0, [r3, #0]
 8009b0a:	f7ff bfd3 	b.w	8009ab4 <_raise_r>
 8009b0e:	bf00      	nop
 8009b10:	20000010 	.word	0x20000010

08009b14 <_kill_r>:
 8009b14:	b538      	push	{r3, r4, r5, lr}
 8009b16:	4d07      	ldr	r5, [pc, #28]	; (8009b34 <_kill_r+0x20>)
 8009b18:	2300      	movs	r3, #0
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	4608      	mov	r0, r1
 8009b1e:	4611      	mov	r1, r2
 8009b20:	602b      	str	r3, [r5, #0]
 8009b22:	f7f7 fe37 	bl	8001794 <_kill>
 8009b26:	1c43      	adds	r3, r0, #1
 8009b28:	d102      	bne.n	8009b30 <_kill_r+0x1c>
 8009b2a:	682b      	ldr	r3, [r5, #0]
 8009b2c:	b103      	cbz	r3, 8009b30 <_kill_r+0x1c>
 8009b2e:	6023      	str	r3, [r4, #0]
 8009b30:	bd38      	pop	{r3, r4, r5, pc}
 8009b32:	bf00      	nop
 8009b34:	200004a4 	.word	0x200004a4

08009b38 <_getpid_r>:
 8009b38:	f7f7 be24 	b.w	8001784 <_getpid>

08009b3c <_init>:
 8009b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3e:	bf00      	nop
 8009b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b42:	bc08      	pop	{r3}
 8009b44:	469e      	mov	lr, r3
 8009b46:	4770      	bx	lr

08009b48 <_fini>:
 8009b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4a:	bf00      	nop
 8009b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b4e:	bc08      	pop	{r3}
 8009b50:	469e      	mov	lr, r3
 8009b52:	4770      	bx	lr
